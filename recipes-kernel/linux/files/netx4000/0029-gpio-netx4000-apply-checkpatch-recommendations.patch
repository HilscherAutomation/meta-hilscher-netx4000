From 95a49865a29cb525d6f959553ab1823c25ad5c37 Mon Sep 17 00:00:00 2001
From: Lukas Funke <lukas.funke@weidmueller.com>
Date: Mon, 1 Jul 2024 13:29:42 +0200
Subject: [PATCH 2/4] gpio-netx4000: apply checkpatch recommendations

Upstream-Status: Pending

Signed-off-by: Lukas Funke <lukas.funke@weidmueller.com>
---
 drivers/gpio/gpio-netx4000.c | 81 ++++++++++++++++++------------------
 1 file changed, 40 insertions(+), 41 deletions(-)

diff --git a/drivers/gpio/gpio-netx4000.c b/drivers/gpio/gpio-netx4000.c
index ba3dbc8c1b5f..6b31750b51ff 100644
--- a/drivers/gpio/gpio-netx4000.c
+++ b/drivers/gpio/gpio-netx4000.c
@@ -1,22 +1,21 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
 /*
-* GPIO driver for Hilscher netx4000 based platforms
-*
-* drivers/gpio/gpio-netx4000.c
-*
-* (C) Copyright 2016 Hilscher Gesellschaft fuer Systemautomation mbH
-* http://www.hilscher.com
-*
-* This program is free software; you can redistribute it and/or
-* modify it under the terms of the GNU General Public License as
-* published by the Free Software Foundation; version 2 of
-* the License.
-*
-* This program is distributed in the hope that it will be useful,
-* but WITHOUT ANY WARRANTY; without even the implied warranty of
-* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-* GNU General Public License for more details.
-*
-*/
+ * GPIO driver for Hilscher netx4000 based platforms
+ *
+ * (C) Copyright 2016 Hilscher Gesellschaft fuer Systemautomation mbH
+ * http://www.hilscher.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; version 2 of
+ * the License.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
 
 #define DRIVER_DESC  "GPIO driver for Hilscher netx4000 based platforms"
 #define DRIVER_NAME  "gpio-netx4000"
@@ -53,7 +52,7 @@ struct netx4000_gpio_chip {
 
 static void netx4000_gpio_irq_handler(struct irq_desc *desc)
 {
-    struct gpio_chip *gc = irq_desc_get_handler_data(desc);
+	struct gpio_chip *gc = irq_desc_get_handler_data(desc);
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 	struct irq_chip *chip = irq_desc_get_chip(desc);
 	int i;
@@ -74,7 +73,7 @@ static void netx4000_gpio_irq_unmask(struct irq_data *d)
 {
 	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
-	unsigned offset;
+	unsigned int offset;
 	unsigned long flags;
 
 	offset = d->hwirq;
@@ -93,7 +92,7 @@ static void netx4000_gpio_irq_mask(struct irq_data *d)
 {
 	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
-	unsigned offset;
+	unsigned int offset;
 	unsigned long flags;
 
 	offset = d->hwirq;
@@ -112,14 +111,14 @@ static int netx4000_gpio_irq_set_type(struct irq_data *d, unsigned int type)
 {
 	struct gpio_chip *gc = irq_data_get_irq_chip_data(d);
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
-	unsigned offset;
+	unsigned int offset;
 	unsigned long flags;
 	int ret = 0;
 
 	offset = d->hwirq;
 
 	spin_lock_irqsave(&netx4000_gc->gpio_lock, flags);
-	switch(type) {
+	switch (type) {
 	case IRQ_TYPE_NONE:
 		netx4000_gc->posedge_enable &= ~(1 << offset);
 		netx4000_gc->negedge_enable &= ~(1 << offset);
@@ -153,21 +152,21 @@ static int netx4000_gpio_irq_set_type(struct irq_data *d, unsigned int type)
 }
 
 static const struct irq_chip netx4000_gpio_irq_chip = {
-        .name           = "gpio-netx4000",
-        .irq_mask       = netx4000_gpio_irq_mask,
-        .irq_unmask     = netx4000_gpio_irq_unmask,
-        .irq_set_type   = netx4000_gpio_irq_set_type,
-        .flags          = IRQCHIP_IMMUTABLE | IRQCHIP_SET_TYPE_MASKED |
-                          IRQCHIP_MASK_ON_SUSPEND,
-        GPIOCHIP_IRQ_RESOURCE_HELPERS,
+	.name           = "gpio-netx4000",
+	.irq_mask       = netx4000_gpio_irq_mask,
+	.irq_unmask     = netx4000_gpio_irq_unmask,
+	.irq_set_type   = netx4000_gpio_irq_set_type,
+	.flags          = IRQCHIP_IMMUTABLE | IRQCHIP_SET_TYPE_MASKED |
+						IRQCHIP_MASK_ON_SUSPEND,
+	GPIOCHIP_IRQ_RESOURCE_HELPERS,
 };
 
-static int netx4000_gpio_get(struct gpio_chip *gc, unsigned offset)
+static int netx4000_gpio_get(struct gpio_chip *gc, unsigned int offset)
 {
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 	int ret;
 
-	if(readl(netx4000_gc->base + NETX4000_GPIO_OE) & (1 << offset))
+	if (readl(netx4000_gc->base + NETX4000_GPIO_OE) & (1 << offset))
 		ret = readl(netx4000_gc->base + NETX4000_GPIO_OUT) & (1 << offset);
 	else
 		ret = readl(netx4000_gc->base + NETX4000_GPIO_IN) & (1 << offset);
@@ -181,19 +180,19 @@ static int netx4000_gpio_get_multiple(struct gpio_chip *gc, unsigned long *mask,
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 	uint32_t oe = readl(netx4000_gc->base + NETX4000_GPIO_OE);
 
-	uint32_t in_vals = (readl(netx4000_gc->base + NETX4000_GPIO_IN) & (~oe)) | 
-	                   (readl(netx4000_gc->base + NETX4000_GPIO_OUT) & oe);
+	uint32_t in_vals = (readl(netx4000_gc->base + NETX4000_GPIO_IN) & (~oe)) |
+			   (readl(netx4000_gc->base + NETX4000_GPIO_OUT) & oe);
 
 	bits[0] = in_vals & mask[0];
 
 	return 0;
 }
 
-static void netx4000_gpio_set(struct gpio_chip *gc, unsigned offset, int value)
+static void netx4000_gpio_set(struct gpio_chip *gc, unsigned int offset, int value)
 {
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 
-	if(value)
+	if (value)
 		writel(1 << offset, netx4000_gc->base + NETX4000_GPIO_OUT_SET);
 	else
 		writel(1 << offset, netx4000_gc->base + NETX4000_GPIO_OUT_CLR);
@@ -207,7 +206,7 @@ static void netx4000_gpio_set_multiple(struct gpio_chip *gc, unsigned long *mask
 	writel(bits[0] & mask[0], netx4000_gc->base + NETX4000_GPIO_OUT_SET);
 }
 
-static int netx4000_gpio_direction_input(struct gpio_chip *gc, unsigned offset)
+static int netx4000_gpio_direction_input(struct gpio_chip *gc, unsigned int offset)
 {
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 
@@ -216,7 +215,7 @@ static int netx4000_gpio_direction_input(struct gpio_chip *gc, unsigned offset)
 	return 0;
 }
 
-static int netx4000_gpio_direction_output(struct gpio_chip *gc, unsigned offset, int value)
+static int netx4000_gpio_direction_output(struct gpio_chip *gc, unsigned int offset, int value)
 {
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 
@@ -230,10 +229,10 @@ static int netx4000_gpio_get_direction(struct gpio_chip *gc, unsigned int offset
 {
 	struct netx4000_gpio_chip *netx4000_gc = gpiochip_get_data(gc);
 
-	if(readl(netx4000_gc->base + NETX4000_GPIO_OE) & (1 << offset))
+	if (readl(netx4000_gc->base + NETX4000_GPIO_OE) & (1 << offset))
 		return GPIO_LINE_DIRECTION_OUT;
-	else
-		return GPIO_LINE_DIRECTION_IN;
+
+	return GPIO_LINE_DIRECTION_IN;
 }
 
 static int netx4000_gpio_probe(struct platform_device *pdev)
-- 
2.30.2

