From 0378c8a05dd30904554d5ce745a8658966137d7b Mon Sep 17 00:00:00 2001
From: Lukas Funke <lukas.funke@weidmueller.com>
Date: Wed, 19 Jun 2024 16:17:18 +0200
Subject: [PATCH 1/4] gpio-netx4000: add interrupt handler for gpio pin

Add interrupt handler for each gpio pin. Otherwise the bad_irq handler
will be called which simply reports that there is no irq handler
for this specific irq.

Upstream-Status: Pending

Signed-off-by: Lukas Funke <lukas.funke@weidmueller.com>
---
 drivers/gpio/gpio-netx4000.c | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

diff --git a/drivers/gpio/gpio-netx4000.c b/drivers/gpio/gpio-netx4000.c
index e4ebacf4af03..ba3dbc8c1b5f 100644
--- a/drivers/gpio/gpio-netx4000.c
+++ b/drivers/gpio/gpio-netx4000.c
@@ -65,8 +65,7 @@ static void netx4000_gpio_irq_handler(struct irq_desc *desc)
 	writel(status, netx4000_gc->base + NETX4000_GPIO_IRQ_SRC);
 
 	for_each_set_bit(i, &status, netx4000_gc->chip.ngpio)
-		generic_handle_domain_irq(gc->irq.domain,
-                                  i);
+		generic_handle_domain_irq(gc->irq.domain, i);
 
 	chained_irq_exit(chip, desc);
 }
@@ -278,15 +277,23 @@ static int netx4000_gpio_probe(struct platform_device *pdev)
 	}
 
 	netx4000_gc->irq = platform_get_irq(pdev, 0);
-	if (netx4000_gc->irq > 0) {
-		struct gpio_irq_chip* girq = &netx4000_gc->chip.irq;
+	if (netx4000_gc->irq >= 0) {
+		struct gpio_irq_chip *girq;
 
+		girq = &netx4000_gc->chip.irq;
 		gpio_irq_chip_set_chip(girq, &netx4000_gpio_irq_chip);
+		girq->handler = handle_simple_irq;
 		girq->default_type = IRQ_TYPE_NONE;
 		girq->num_parents = 1;
-		girq->parents = &netx4000_gc->irq;
 		girq->parent_handler = netx4000_gpio_irq_handler;
 		girq->parent_handler_data = netx4000_gc;
+		girq->parents = devm_kcalloc(&pdev->dev, 1,
+					     sizeof(*girq->parents),
+					     GFP_KERNEL);
+		if (!girq->parents)
+			return -ENOMEM;
+
+		girq->parents[0] = netx4000_gc->irq;
 	}
 
 	ret = gpiochip_add_data(&netx4000_gc->chip, netx4000_gc);
-- 
2.30.2

