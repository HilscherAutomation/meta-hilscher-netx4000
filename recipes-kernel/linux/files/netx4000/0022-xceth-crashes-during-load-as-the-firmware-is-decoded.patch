From ce22539ad81fe2bd9c0afb2e210679a666d53029 Mon Sep 17 00:00:00 2001
From: Michael Trensch <mtrensch@hilscher.com>
Date: Wed, 10 Aug 2022 18:15:34 +0200
Subject: [PATCH 22/25] xceth crashes during load, as the firmware is decoded
 using of_fdt_unflatten_tree() and integrated into device node. Once firmware
 is loaded the firmware is onloaded, thus the device tree is invalid. Any
 further parsing action results in a crash.

See following crash dump:
-------------------------
Unable to handle kernel paging request at virtual address f08fdd38
pgd = 6c7f67f6
[f08fdd38] *pgd=4110d811, *pte=00000000, *ppte=00000000
Internal error: Oops: 7 [#1] PREEMPT SMP ARM
Modules linked in: netx4000_xc_stdmac(+) mdio_xc_netx4000 usb_f_acm u_serial g_serial libcomposite udc_netx4000 udc_core
CPU: 1 PID: 387 Comm: udevd Not tainted 5.15.26-yocto-standard #1
Hardware name: netX4000 using device tree
PC is at strcmp+0x4/0x34
LR is at __of_find_property+0x40/0x58
pc : [<c060f994>]    lr : [<c07ec374>]    psr: a00f0093
sp : c1399d40  ip : 00000000  fp : 005249e8
r10: 00000000  r9 : c0bc1d50  r8 : c0a6b5c2
r7 : c1398000  r6 : c0bcf5f4  r5 : c1399d60  r4 : c2edc070
r3 : f08fdd38  r2 : c1399d60  r1 : c0bcf5f4  r0 : f08fdd38
Flags: NzCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment none
Control: 10c5387d  Table: 42ee004a  DAC: 00000051
Register r0 information: non-paged memory
Register r1 information: non-slab/vmalloc memory
Register r2 information: non-slab/vmalloc memory
Register r3 information: non-paged memory
Register r4 information: slab kmalloc-1k start c2edc000 pointer offset 112 size 1024
Register r5 information: non-slab/vmalloc memory
Register r6 information: non-slab/vmalloc memory
Register r7 information: non-slab/vmalloc memory
Register r8 information: non-slab/vmalloc memory
Register r9 information: non-slab/vmalloc memory
Register r10 information: NULL pointer
Register r11 information: non-paged memory
Register r12 information: NULL pointer
Process udevd (pid: 387, stack limit = 0xcd1d4255)
Stack: (0xc1399d40 to 0xc139a000)
9d40: c2edc000 c1398000 a00f0013 c07ed09c c2edc000 c09d3140 c2edc06c a00f0013
9d60: c0fb0004 dd440c2e ef6f4844 c2edc000 00000000 c07ed67c ef6f4844 00000000
9d80: ef6f4850 c07f1258 00000000 ef6f4850 00000001 c069aaa4 c223f010 ef6f4b5c
9da0: 00000001 c06905f0 c0bd4aea c1399dac c1399dac dd440c2e c2d52124 c223f010
9dc0: 00000000 bf045014 c223f010 00000006 c0f52300 00000000 005249e8 c06943a0
9de0: c223f010 c069470c c223f010 bf045014 bf045014 c223f010 00000006 c0694818
9e00: c0faeb54 c0faeb58 bf045014 c0694874 c223f010 00000000 bf045014 c0694c10
9e20: 00000000 c0694cdc c223f010 c1398000 bf045014 c06928fc c112816c c1128158
9e40: c23536b4 dd440c2e c112816c bf045014 c2d52100 00000000 c0f21cb8 c069397c
9e60: bf043830 bf04383a 00000000 bf045014 ffffe000 c135b900 c1398000 c06955dc
9e80: bf048000 ffffe000 c135b900 bf048018 bf048000 c010262c c01ac06c c135b900
9ea0: c135b900 00000cc0 c1398000 c01ac06c 00000008 c135b900 ef6d1274 c02be64c
9ec0: 00000cc0 00000000 00000000 c1001180 00000000 c135b900 00000000 dd440c2e
9ee0: 00000000 dd440c2e bf0451c0 00000000 c135b900 00000008 c0100268 c1398000
9f00: 0000017b c01ac08c bf0451c0 8040003f c1398000 00000000 b6f1f790 c01ae62c
9f20: c1399f34 7fffffff 00000000 00000002 00000001 f08ab000 f08aec49 f08af380
9f40: f08ab000 000090a0 f08b3920 f08b3724 f08b1124 00006000 00006920 00004ba0
9f60: 00006f02 00000000 00000000 00000000 00004b90 0000002d 0000002e 00000024
9f80: 00000000 0000001c 00000000 dd440c2e 00000008 00000000 be84b8fc 00000000
9fa0: 0000017b c0100060 00000000 be84b8fc 00000008 b6f1f790 00000000 00000000
9fc0: 00000000 be84b8fc 00000000 0000017b 004f77d8 004f76e8 00000000 005249e8
9fe0: be84b810 be84b800 b6f186ec b6e7ae50 60010010 00000008 00000000 00000000
[<c060f994>] (strcmp) from [<c07ec374>] (__of_find_property+0x40/0x58)
[<c07ec374>] (__of_find_property) from [<c07ed09c>] (__of_get_property+0x10/0x1c)
[<c07ed09c>] (__of_get_property) from [<c09d3140>] (__of_device_is_available.part.0+0x54/0xc8)
[<c09d3140>] (__of_device_is_available.part.0) from [<c07ed67c>] (of_get_next_available_child+0x40/0x98)
[<c07ed67c>] (of_get_next_available_child) from [<c07f1258>] (of_fwnode_get_next_child_node+0x38/0x44)
[<c07f1258>] (of_fwnode_get_next_child_node) from [<c069aaa4>] (fwnode_get_next_available_child_node+0x24/0x48)
[<c069aaa4>] (fwnode_get_next_available_child_node) from [<c06905f0>] (device_links_driver_bound+0x158/0x2b8)
[<c06905f0>] (device_links_driver_bound) from [<c06943a0>] (driver_bound+0x50/0x9c)
[<c06943a0>] (driver_bound) from [<c069470c>] (really_probe+0x2c8/0x308)
[<c069470c>] (really_probe) from [<c0694818>] (__driver_probe_device+0xcc/0xe0)
[<c0694818>] (__driver_probe_device) from [<c0694874>] (driver_probe_device+0x48/0xc8)
[<c0694874>] (driver_probe_device) from [<c0694cdc>] (__driver_attach+0xcc/0xe0)
[<c0694cdc>] (__driver_attach) from [<c06928fc>] (bus_for_each_dev+0x74/0xac)
[<c06928fc>] (bus_for_each_dev) from [<c069397c>] (bus_add_driver+0x15c/0x1bc)
[<c069397c>] (bus_add_driver) from [<c06955dc>] (driver_register+0xb4/0xf8)
[<c06955dc>] (driver_register) from [<bf048018>] (netx_eth_init+0x18/0x1000 [netx4000_xc_stdmac])
[<bf048018>] (netx_eth_init [netx4000_xc_stdmac]) from [<c010262c>] (do_one_initcall+0xa8/0x1f8)
[<c010262c>] (do_one_initcall) from [<c01ac08c>] (do_init_module+0x44/0x204)
[<c01ac08c>] (do_init_module) from [<c01ae62c>] (sys_finit_module+0xb0/0xcc)
[<c01ae62c>] (sys_finit_module) from [<c0100060>] (ret_fast_syscall+0x0/0x48)
Exception stack(0xc1399fa8 to 0xc1399ff0)
9fa0:                   00000000 be84b8fc 00000008 b6f1f790 00000000 00000000
9fc0: 00000000 be84b8fc 00000000 0000017b 004f77d8 004f76e8 00000000 005249e8
9fe0: be84b810 be84b800 b6f186ec b6e7ae50
Code: e3520000 1afffffb e12fff1e e1a03000 (e4d30001)
---[ end trace c6e7988c2bd524b6 ]---
---
 drivers/net/ethernet/netx4000/netx4000-xc.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/netx4000/netx4000-xc.c b/drivers/net/ethernet/netx4000/netx4000-xc.c
index 020825d15579..865ca52cfd0c 100644
--- a/drivers/net/ethernet/netx4000/netx4000-xc.c
+++ b/drivers/net/ethernet/netx4000/netx4000-xc.c
@@ -131,7 +131,7 @@ struct fw_info* get_root_node(struct port* p, char* name, struct fw_info* fw_inf
 	struct device_node* root = NULL;
 
 	if (0 == (ret = request_firmware(&fw, name, p->dev))) {
-		root = of_fdt_unflatten_tree( (unsigned long*)fw->data, p->dev->of_node, &root);
+		root = of_fdt_unflatten_tree( (unsigned long*)fw->data, NULL, &root);
 		if (root == NULL) {
 			dev_err( p->dev, "%s: Failed to interprete firmware!\n", __func__);
 			release_firmware( fw);
@@ -149,6 +149,7 @@ struct fw_info* get_root_node(struct port* p, char* name, struct fw_info* fw_inf
 
 void free_root_node(struct fw_info* fw_info)
 {
+	kfree( fw_info->root);
 	release_firmware( fw_info->fw);
 }
 
-- 
2.25.1

