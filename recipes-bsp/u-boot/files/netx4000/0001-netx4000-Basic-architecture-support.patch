From 158d93d55571c8a46db2ce1ccba1e935661f9651 Mon Sep 17 00:00:00 2001
From: Michael Trensch <mtrensch@hilscher.com>
Date: Tue, 11 May 2021 13:43:56 +0200
Subject: [PATCH 1/5] netx4000: Basic architecture support

---
 .gitignore                                    |    2 +
 Makefile                                      |   15 +
 arch/arm/Kconfig                              |   15 +
 arch/arm/Makefile                             |    1 +
 arch/arm/dts/Makefile                         |    3 +
 arch/arm/dts/netx4000-common.dtsi             | 1188 +++
 .../dts/netx4000-nxhx4000-jtag-plus-rev4.dts  |   22 +
 arch/arm/dts/nxhx4000-jtag-plus-revx.dts      |  171 +
 arch/arm/mach-netx4000/Kconfig                |   82 +
 arch/arm/mach-netx4000/Makefile               |    6 +
 arch/arm/mach-netx4000/cpu.c                  |   29 +
 arch/arm/mach-netx4000/ddr.c                  |  129 +
 arch/arm/mach-netx4000/ddr400-init.c          |  221 +
 arch/arm/mach-netx4000/ddr600-init.c          |  221 +
 .../mach/as4c512m16d3l-12-2gib-400mhz.h       |  170 +
 .../mach/as4c512m16d3l-12-2gib-600mhz.h       |  170 +
 arch/arm/mach-netx4000/include/mach/gpio.h    |   10 +
 .../include/mach/is43tr16256al-1gib-400mhz.h  |  170 +
 .../include/mach/is43tr16256al-1gib-600mhz.h  |  170 +
 .../mach-netx4000/include/mach/netx4000_ddr.h |  608 ++
 .../mach-netx4000/include/mach/netx4000_dma.h |   39 +
 .../include/mach/netx4000_regs.h              |   54 +
 arch/arm/mach-netx4000/reset.c                |   19 +
 arch/arm/mach-netx4000/timer.c                |   54 +
 board/hilscher/netx4000/Makefile              |    5 +
 board/hilscher/netx4000/board.c               |   51 +
 board/hilscher/netx4000/device-label.c        |  123 +
 board/hilscher/netx4000/device-label.h        |   77 +
 configs/netx4000_defconfig                    |   59 +
 drivers/clk/Makefile                          |    1 +
 drivers/clk/clk-netx4000.c                    |  169 +
 drivers/net/Kconfig                           |    8 +
 drivers/net/dwc_eth_qos.c                     |  193 +
 drivers/net/phy/Kconfig                       |    6 +
 drivers/net/phy/Makefile                      |    2 +
 drivers/net/phy/mdio-gpio-bb.c                |  291 +
 drivers/pinctrl/pinctrl-single.c              |   44 +
 drivers/serial/serial_pl01x.c                 |    7 +
 include/configs/netx4000.h                    |   47 +
 include/dt-bindings/dma/nbpfaxi.h             |   20 +
 include/dt-bindings/pinctrl/netx4000.h        |   44 +
 include/dt-bindings/video/netx4000.h          |   14 +
 tools/netx4000/.gitignore                     |    1 +
 tools/netx4000/ca9_boot.xml                   |   27 +
 .../netx4000/hboot_image_compiler/__init__.py |    3 +
 .../hboot_image_compiler/elf_support.py       |  301 +
 .../hboot_image_compiler/hboot_image.py       | 5348 +++++++++++++
 .../hboot_image_compiler/hboot_image_compiler |  186 +
 .../netx90_app_iflash_image.py                |  106 +
 .../hboot_image_compiler/option_compiler.py   |  447 ++
 .../hboot_image_compiler/patch_definitions.py |  138 +
 .../hboot_image_compiler/snippet_library.py   |  351 +
 tools/netx4000/hboot_netx4000_patch_table.xml | 7129 +++++++++++++++++
 tools/netx4000/netx4000_cr7_openfirewalls.elf |  Bin 0 -> 34631 bytes
 54 files changed, 18767 insertions(+)
 create mode 100644 arch/arm/dts/netx4000-common.dtsi
 create mode 100644 arch/arm/dts/netx4000-nxhx4000-jtag-plus-rev4.dts
 create mode 100644 arch/arm/dts/nxhx4000-jtag-plus-revx.dts
 create mode 100644 arch/arm/mach-netx4000/Kconfig
 create mode 100644 arch/arm/mach-netx4000/Makefile
 create mode 100644 arch/arm/mach-netx4000/cpu.c
 create mode 100644 arch/arm/mach-netx4000/ddr.c
 create mode 100644 arch/arm/mach-netx4000/ddr400-init.c
 create mode 100644 arch/arm/mach-netx4000/ddr600-init.c
 create mode 100644 arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-400mhz.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-600mhz.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/gpio.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-400mhz.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-600mhz.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/netx4000_ddr.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/netx4000_dma.h
 create mode 100644 arch/arm/mach-netx4000/include/mach/netx4000_regs.h
 create mode 100644 arch/arm/mach-netx4000/reset.c
 create mode 100644 arch/arm/mach-netx4000/timer.c
 create mode 100644 board/hilscher/netx4000/Makefile
 create mode 100644 board/hilscher/netx4000/board.c
 create mode 100644 board/hilscher/netx4000/device-label.c
 create mode 100644 board/hilscher/netx4000/device-label.h
 create mode 100644 configs/netx4000_defconfig
 create mode 100644 drivers/clk/clk-netx4000.c
 create mode 100644 drivers/net/phy/mdio-gpio-bb.c
 create mode 100644 include/configs/netx4000.h
 create mode 100644 include/dt-bindings/dma/nbpfaxi.h
 create mode 100644 include/dt-bindings/pinctrl/netx4000.h
 create mode 100644 include/dt-bindings/video/netx4000.h
 create mode 100644 tools/netx4000/.gitignore
 create mode 100644 tools/netx4000/ca9_boot.xml
 create mode 100644 tools/netx4000/hboot_image_compiler/__init__.py
 create mode 100644 tools/netx4000/hboot_image_compiler/elf_support.py
 create mode 100644 tools/netx4000/hboot_image_compiler/hboot_image.py
 create mode 100755 tools/netx4000/hboot_image_compiler/hboot_image_compiler
 create mode 100644 tools/netx4000/hboot_image_compiler/netx90_app_iflash_image.py
 create mode 100644 tools/netx4000/hboot_image_compiler/option_compiler.py
 create mode 100644 tools/netx4000/hboot_image_compiler/patch_definitions.py
 create mode 100644 tools/netx4000/hboot_image_compiler/snippet_library.py
 create mode 100644 tools/netx4000/hboot_netx4000_patch_table.xml
 create mode 100644 tools/netx4000/netx4000_cr7_openfirewalls.elf

diff --git a/.gitignore b/.gitignore
index e66aa864da..c58a2da3b3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -26,6 +26,8 @@
 *.o.*
 *.order
 *.patch
+*.pyc
+*.rom
 *.s
 *.su
 *.swp
diff --git a/Makefile b/Makefile
index b4f1cbcf9b..c743b3fe1b 100644
--- a/Makefile
+++ b/Makefile
@@ -929,6 +929,8 @@ ifeq ($(CONFIG_SPL),)
 INPUTS-$(CONFIG_ARCH_MEDIATEK) += u-boot-mtk.bin
 endif
 
+INPUTS-$(CONFIG_ARCH_NETX4000) += u-boot.netx4000
+
 # Add optional build target if defined in board/cpu/soc headers
 ifneq ($(CONFIG_BUILD_TARGET),)
 INPUTS-y += $(CONFIG_BUILD_TARGET:"%"=%)
@@ -1622,6 +1624,19 @@ u-boot-br.bin: u-boot FORCE
 endif
 endif
 
+ifeq ($(CONFIG_ARCH_NETX4000),y)
+u-boot.netx4000: u-boot-dtb.bin
+	$(Q)$(src)/tools/netx4000/hboot_image_compiler/hboot_image_compiler \
+		   -nNETX4000 \
+		   -p$(src)/tools/netx4000/hboot_netx4000_patch_table.xml \
+		   -Auboot_bin=$< \
+		   -Aopen_fw_elf=$(src)/tools/netx4000/netx4000_cr7_openfirewalls.elf \
+		   --objcopy $(OBJCOPY) --objdump $(OBJDUMP) \
+		   --readelf $(CROSS_COMPILE)readelf \
+		   $(src)/tools/netx4000/ca9_boot.xml $@
+	$(Q)ln -sf u-boot.netx4000 netx.rom
+endif
+
 quiet_cmd_ldr = LD      $@
 cmd_ldr = $(LD) $(LDFLAGS_$(@F)) \
 	       $(filter-out FORCE,$^) -o $@
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index fbe90875ae..538d2257e9 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -833,6 +833,19 @@ config ARCH_LPC32XX
 	select SUPPORT_SPL
 	imply CMD_DM
 
+config ARCH_NETX4000
+	bool "Hilscher netX4000 platform"
+	select CPU_V7A
+	select DM
+	select DM_SERIAL
+	select PL01X_SERIAL
+	select DM_MMC
+	select MMC_NETX4000
+	select PINCTRL_SINGLE
+	select OF_CONTROL
+	select CLK
+	select SPL_CLK if SPL
+
 config ARCH_IMX8
 	bool "NXP i.MX8 platform"
 	select ARM64
@@ -1913,6 +1926,8 @@ source "arch/arm/mach-imx/imxrt/Kconfig"
 
 source "arch/arm/mach-imx/mxs/Kconfig"
 
+source "arch/arm/mach-netx4000/Kconfig"
+
 source "arch/arm/mach-omap2/Kconfig"
 
 source "arch/arm/cpu/armv8/fsl-layerscape/Kconfig"
diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 28b523b37c..d3bb69bf54 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -66,6 +66,7 @@ machine-$(CONFIG_ARCH_LPC32XX)		+= lpc32xx
 machine-$(CONFIG_ARCH_MEDIATEK)		+= mediatek
 machine-$(CONFIG_ARCH_MESON)		+= meson
 machine-$(CONFIG_ARCH_MVEBU)		+= mvebu
+machine-$(CONFIG_ARCH_NETX4000)		+= netx4000
 machine-$(CONFIG_ARCH_NEXELL)		+= nexell
 machine-$(CONFIG_ARCH_OMAP2PLUS)	+= omap2
 machine-$(CONFIG_ARCH_ORION5X)		+= orion5x
diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index fd47e408f8..9cc025ad76 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -233,6 +233,9 @@ dtb-$(CONFIG_ARCH_MVEBU) +=			\
 	armada-xp-synology-ds414.dtb		\
 	armada-xp-theadorable.dtb
 
+dtb-$(CONFIG_ARCH_NETX4000) +=			\
+	netx4000-nxhx4000-jtag-plus-rev4.dtb
+
 dtb-$(CONFIG_ARCH_UNIPHIER_LD11) += \
 	uniphier-ld11-global.dtb \
 	uniphier-ld11-ref.dtb
diff --git a/arch/arm/dts/netx4000-common.dtsi b/arch/arm/dts/netx4000-common.dtsi
new file mode 100644
index 0000000000..650dbe3a1c
--- /dev/null
+++ b/arch/arm/dts/netx4000-common.dtsi
@@ -0,0 +1,1188 @@
+/*
+* Common device tree for Hilscher netX4000 based platforms
+*
+* arch/arm/boot/dts/netx4000-common.dtsi
+*
+* (C) Copyright 2017 Hilscher Gesellschaft fuer Systemautomation mbH
+* http://www.hilscher.com
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; version 2 of
+* the License.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+*/
+
+#include "dt-bindings/pinctrl/netx4000.h"
+#include "dt-bindings/video/netx4000.h"
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/dma/nbpfaxi.h>
+#include <dt-bindings/interrupt-controller/arm-gic.h>
+
+/ {
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+	aliases {
+		serial0 = &uart0;
+		serial1 = &uart1;
+		serial2 = &uart2;
+		serial3 = &uart3;
+		spi0 = &spi0;
+		spi1 = &spi1;
+		ethernet0 = &gmac0;
+		ethernet1 = &gmac1;
+		/* CAUTION: Only use eth2/3 if no R7 firmware is running */
+		ethernet2 = &xceth0;
+		ethernet3 = &xceth1;
+	};
+
+	/* CPU */
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu@0 {
+			compatible = "arm,cortex-a9";
+			device_type = "cpu";
+			reg = <0>;
+			clocks = <&arm_clk>;
+			next-level-cache = <&l2>;
+		};
+		cpu@1 {
+			compatible = "arm,cortex-a9";
+			device_type = "cpu";
+			reg = <1>;
+			clocks = <&arm_clk>;
+			next-level-cache = <&l2>;
+		};
+	};
+
+	/* Snoop Control Unit */
+
+	scu@faf00000 {
+		compatible = "arm,cortex-a9-scu";
+		reg = <0xfaf00000 0x100>;
+	};
+
+	/* Cache */
+
+	l2: l2-cache@faf10000 {
+		compatible = "arm,pl310-cache";
+		reg = <0xfaf10000 0x1000>;
+		cache-unified;
+		cache-level = <2>;
+		cache-size = <524288>;
+		cache-sets = <1024>;
+		cache-line-size = <32>;
+	};
+
+	/* Global Interrupt Controller */
+
+	gic: interrupt-controller@faf10000 {
+		compatible = "arm,cortex-a9-gic";
+		reg = <0xfaf01000 0x1000>, /* gic-distributor */
+		      <0xfaf00100 0x0100>; /* cpu interface   */
+		interrupt-controller;
+		#interrupt-cells = <3>;
+	};
+
+	/* Timer */
+
+	timer@faf00200 {
+		compatible = "arm,cortex-a9-global-timer";
+		reg = <0xfaf00200 0x20>;
+		interrupt-parent = <&gic>;
+		interrupts = <GIC_PPI (27-16) (GIC_CPU_MASK_RAW(0x1)|IRQ_TYPE_LEVEL_HIGH)>;
+		clocks = <&arm_periph_clk>;
+	};
+
+	local-timer@faf00600 {
+		status = "disabled";
+		compatible = "arm,cortex-a9-twd-timer";
+		reg = <0xfaf00600 0x20>;
+		interrupt-parent = <&gic>;
+		interrupts = <GIC_PPI (29-16) IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&arm_periph_clk>;
+	};
+
+	/* Clock */
+
+	clocks {
+		arm_clk: arm_clk {
+			compatible = "hilscher,netx4000-cpu-clock";
+			#clock-cells = <0>;
+			clock-names = "arm_clk";
+		};
+		arm_periph_clk: arm_periph_clk {
+			compatible = "fixed-factor-clock";
+			#clock-cells = <0>;
+			clocks = <&arm_clk>;
+			clock-names = "arm_periph_clk";
+			clock-mult = <1>;
+			clock-div = <2>;
+		};
+		periph_clk: periph_clk {
+			compatible = "fixed-clock";
+			#clock-cells = <0>;
+			clock-output-names = "periph_clk","apb_pclk";
+			clock-frequency = <(100 * 1000 * 1000)>;
+		};
+
+		/* Gated clocks */
+		/* NOTE: This gated clock comprises clk100_usb and clk33_usb */
+		usb_clk: usb_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "usb_clk";
+			clock-frequency = <(100 * 1000 * 1000)>;
+			clock-mask = <0x01>;
+		};
+		/* NOTE: This gated clock comprises clk133_pcie_aclk and clk133_pcie_clk_pmu */
+		pcie_clk: pcie_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "pcie_clk";
+			clock-frequency = <(133 * 1000 * 1000)>;
+			clock-mask = <0x02>;
+		};
+		/* NOTE: This gated clock comprises clk100_r7_sdio */
+		sdio_clk: sdio_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "sdio_clk";
+			clock-frequency = <(100 * 1000 * 1000)>;
+			clock-mask = <0x04>;
+		};
+		/* NOTE: This gated clock comprises clk150_a9_gmac, clk125_eth_gmac, clk25_eth_gmac and clk2_5_eth_gmac */
+		gmac_clk: gmac_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "gmac_clk";
+			clock-frequency = <(150 * 1000 * 1000)>;
+			clock-mask = <0x08>;
+		};
+		/* NOTE: This gated clock comprises clk200_r7_eswitch, clk100_r7_eswitch, clk125_eth_eswitch, clk25_eth_eswitch and clk2_5_eth_eswitch */
+		switch_clk: switch_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "switch_clk";
+			clock-frequency = <(200 * 1000 * 1000)>;
+			clock-mask = <0x10>;
+		};
+		/* NOTE: This gated clock comprises clk_pixclk(1000) and clk150_a9_tes */
+		gfx_clk: gfx_clk {
+			compatible = "hilscher,netx4000-periph-clock";
+			#clock-cells = <0>;
+			clock-output-names = "gfx_clk";
+			clock-frequency = <(1*1000*1000*1000)>;
+			clock-mask = <0x20>;
+		};
+		/* NOTE: This gated clock comprises clk600_a9_ddr, clk300_a9_ddr and clk150_a9_ddr */
+// 		ddr_clk: ddr_clk {
+// 			compatible = "hilscher,netx4000-periph-clock";
+// 			#clock-cells = <0>;
+// 			clock-output-names = "ddr_clk";
+// 			clock-frequency = <(600 * 1000 * 1000)>;
+// 			clock-mask = <0x40>;
+// 		};
+	};
+
+	netx4000_xc: netx4000_xc {
+		status = "okay";
+		compatible = "hilscher,netx4000-xc";
+	};
+
+	mdio_xc0: mdio_xc0 {
+		status = "okay";
+		compatible = "hilscher,netx4000-mdio-xc0";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		reg = <0xf4023a90 0x10>;
+		intphy_id = <0>;
+
+		intphy0: phy {
+			phy-mode = "internal";
+			reg = <0>;
+		};
+	};
+
+	mdio_xc1: mdio_xc1 {
+		status = "okay";
+		compatible = "hilscher,netx4000-mdio-xc1";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		reg = <0xf4023aa0 0x10>;
+		intphy_id = <1>;
+
+		intphy1: phy {
+			phy-mode = "internal";
+			reg = <1>;
+		};
+	};
+
+	/* AMBA devices */
+
+	amba {
+		compatible = "arm,amba-bus","simple-bus";
+		#address-cells = <1>;
+		#size-cells = <1>;
+		interrupt-parent = <&gic>;
+		ranges;
+
+		/* DMA */
+
+		dmac0: dma-controller@f8019000 {
+			compatible = "renesas,nbpfaxi64dmac8b16";
+			reg = <0xf8019000 0x400>;
+			interrupts = <GIC_SPI (80-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (64-32) IRQ_TYPE_LEVEL_HIGH>,<0 (65-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (66-32) IRQ_TYPE_LEVEL_HIGH>,<0 (67-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (68-32) IRQ_TYPE_LEVEL_HIGH>,<0 (69-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (70-32) IRQ_TYPE_LEVEL_HIGH>,<0 (71-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "error",
+			                  "chan0","chan1",
+			                  "chan2","chan3",
+			                  "chan4","chan5",
+			                  "chan6","chan7";
+			#dma-cells = <2>;
+			dma-channels = <8>;
+			dma-requests = <8>;
+			clocks = <&periph_clk>;
+		};
+
+		dmac1: dma-controller@f8019400 {
+			compatible = "renesas,nbpfaxi64dmac8b16";
+			reg = <0xf8019400 0x400>;
+			interrupts = <GIC_SPI (80-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (72-32) IRQ_TYPE_LEVEL_HIGH>,<0 (73-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (74-32) IRQ_TYPE_LEVEL_HIGH>,<0 (75-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (76-32) IRQ_TYPE_LEVEL_HIGH>,<0 (77-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (78-32) IRQ_TYPE_LEVEL_HIGH>,<0 (79-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "error",
+			                  "chan8","chan9",
+			                  "chan10","chan11",
+			                  "chan12","chan13",
+			                  "chan14","chan15";
+			#dma-cells = <2>;
+			dma-channels = <8>;
+			dma-requests = <8>;
+			clocks = <&periph_clk>;
+		};
+
+		/* ECC */
+
+		edac_ddr_mc: edac-ddr-mc@f8001000 {
+			compatible = "hilscher,edac-ddr-mc-netx4000";
+			reg = <0xf8001000 0x400>;
+			interrupts = <GIC_SPI (43-32) IRQ_TYPE_LEVEL_HIGH>;
+		};
+
+		edac_cache_dc: edac-cache-dc@0xf0200000 {
+			compatible = "hilscher,edac-cache-dc-netx4000";
+			reg = <0xf0200000 0x90>;
+			interrupts = <GIC_SPI (36-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (37-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (38-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (39-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (40-32) IRQ_TYPE_EDGE_RISING>,
+			             <GIC_SPI (41-32) IRQ_TYPE_EDGE_RISING>;
+			interrupt-names = "sbe-core0",
+			                  "sbe-core1",
+			                  "dbe-core0",
+			                  "dbe-core1",
+			                  "sbe-pl310",
+			                  "dbe-pl310";
+		};
+
+		/* PINCTRL */
+
+		pinctrl: pinctrl@fb100000 {
+			compatible = "pinctrl-single-netx4000";
+			reg = <0xfb100000 0x800>;
+			pinctrl-single,register-width = <32>;
+			pinctrl-single,function-mask = <0xffff>;
+		};
+
+		/* cifX */
+
+		idpm0: idpm0@05210000 {
+			status = "disabled";
+			compatible = "hilscher,uio-netx";
+			reg = <0x05210000 0x10000>;
+			interrupt-names = "card";
+			interrupts = <GIC_SPI (253-32) IRQ_TYPE_LEVEL_HIGH>;
+			dma = <0>;
+			startuptype = "flash";
+			alias = "idpm0";
+		};
+
+		idpm1: idpm1@05250000 {
+			status = "disabled";
+			compatible = "hilscher,uio-netx";
+			reg = <0x05250000 0x10000>;
+			interrupt-names = "card";
+			interrupts = <GIC_SPI (254-32) IRQ_TYPE_LEVEL_HIGH>;
+			dma = <0>;
+			startuptype = "flash";
+			alias = "idpm1";
+		};
+
+		/* RTC */
+
+		rtc0: rtc@f801ce00 {
+			status = "disabled";
+			compatible = "hilscher,rtc-netx4000";
+			reg = <0xf801ce00 0x100>;
+		};
+
+		/* UART */
+
+		uart0: serial@f8036000 {
+			status = "disabled";
+			compatible = "arm,pl011", "arm,primecell";
+			device_type = "serial";
+			reg = <0xf8036000 0x1000>;
+			interrupts = <GIC_SPI (138-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk";
+		};
+
+		uart1: serial@f8037000 {
+			status = "disabled";
+			compatible = "arm,pl011", "arm,primecell";
+			device_type = "serial";
+			reg = <0xf8037000 0x1000>;
+			interrupts = <GIC_SPI (139-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk";
+		};
+
+		uart2: serial@f8038000 {
+			status = "disabled";
+			compatible = "arm,pl011", "arm,primecell";
+			device_type = "serial";
+			reg = <0xf8038000 0x1000>;
+			interrupts = <GIC_SPI (140-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk";
+		};
+
+		uart3: serial@f8039000 {
+			status = "disabled";
+			compatible = "arm,pl011", "arm,primecell";
+			device_type = "serial";
+			reg = <0xf8039000 0x1000>;
+			interrupts = <GIC_SPI (141-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk";
+		};
+
+		/* GPIO */
+
+		gpio0: gpio@f801f000 {
+			status = "okay";
+			compatible = "hilscher,netx4000-gpio";
+			reg = <0xf801f000 0x100>;
+			interrupts = <GIC_SPI (123-32) IRQ_TYPE_LEVEL_HIGH>;
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			gpio-ranges = <&pinctrl 0 (MUX_PIN(10,10)/4) 1>,
+			              // <&pinctrl 1 (MUX_PIN(3,5)/4) 15>, // Use this line instead to use all pins as GPIOs
+			              <&pinctrl 5 (MUX_PIN(3,5)/4) 11>,    // Use this line when using xc port
+			              <&pinctrl 16 (MUX_PIN(7,1)/4) 8>;
+		};
+
+		gpio1: gpio@f801f100 {
+			status = "okay";
+			compatible = "hilscher,netx4000-gpio";
+			reg = <0xf801f100 0x100>;
+			interrupts = <GIC_SPI (124-32) IRQ_TYPE_LEVEL_HIGH>;
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			gpio-ranges = <&pinctrl 0 (MUX_PIN(4,0)/4) 16>,
+			              <&pinctrl 16 (MUX_PIN(11,0)/4) 8>,
+			              <&pinctrl 24 (MUX_PIN(14,0)/4) 2>;
+		};
+
+		gpio2: gpio@f801f200 {
+			status = "okay";
+			compatible = "hilscher,netx4000-gpio";
+			reg = <0xf801f200 0x100>;
+			interrupts = <GIC_SPI (125-32) IRQ_TYPE_LEVEL_HIGH>;
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			gpio-ranges = <&pinctrl 0 (MUX_PIN(5,0)/4) 16>,
+			              <&pinctrl 16 (MUX_PIN(6,0)/4) 16>;
+		};
+
+		gpio3: gpio@f801f300 {
+			status = "okay";
+			compatible = "hilscher,netx4000-gpio";
+			reg = <0xf801f300 0x100>;
+			interrupts = <GIC_SPI (126-32) IRQ_TYPE_LEVEL_HIGH>;
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			gpio-ranges = <&pinctrl 0 (MUX_PIN(12,0)/4) 16>,
+			              <&pinctrl 16 (MUX_PIN(13,0)/4) 12>,
+			              <&pinctrl 28 (MUX_PIN(8,15)/4) 1>,
+			              <&pinctrl 29 (MUX_PIN(10,2)/4) 1>,
+			              <&pinctrl 30 (MUX_PIN(9,0)/4) 1>;
+		};
+
+		gpio4: gpio@f801f400 {
+			status = "okay";
+			compatible = "hilscher,netx4000-gpio";
+			reg = <0xf801f400 0x100>;
+			interrupts = <GIC_SPI (127-32) IRQ_TYPE_LEVEL_HIGH>;
+			gpio-controller;
+			#gpio-cells = <2>;
+
+			gpio-ranges = <&pinctrl 0 (MUX_PIN(15,2)/4) 14>,
+			              <&pinctrl 14 (MUX_PIN(16,0)/4) 12>,
+			              <&pinctrl 26 (MUX_PIN(2,0)/4) 2>;
+		};
+
+		/* I2C */
+
+		i2c0: i2c@f801b800 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801b800 0x100>;
+			interrupts = <GIC_SPI (130-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c0_pins>;
+		};
+
+		i2c1: i2c@f801b900 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801b900 0x100>;
+			interrupts = <GIC_SPI (131-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c1_pins>;
+		};
+
+		i2c2: i2c@f801ba00 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801ba00 0x100>;
+			interrupts = <GIC_SPI (132-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c2_pins>;
+		};
+
+		i2c3: i2c@f801bb00 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801bb00 0x100>;
+			interrupts = <GIC_SPI (133-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c3_pins>;
+		};
+
+		i2c4: i2c@f801bc00 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801bc00 0x100>;
+			interrupts = <GIC_SPI (134-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c4_pins>;
+		};
+
+		i2c5: i2c@f801bd00 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-i2c";
+			reg = <0xf801bd00 0x100>;
+			interrupts = <GIC_SPI (135-32) IRQ_TYPE_LEVEL_HIGH>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&i2c5_pins>;
+		};
+
+		/* ADC */
+
+		adc0: adc@f409ca00 {
+			status = "disabled";
+			compatible = "hilscher,iio-adc-netx4000";
+			reg = <0xf409ca00 100>;
+			vref = <3300>;
+		};
+
+		adc1: adc@f409cb00 {
+			status = "disabled";
+			compatible = "hilscher,iio-adc-netx4000";
+			reg = <0xf409cb00 100>;
+			vref = <3300>;
+		};
+
+		/* SPI */
+
+		spi0: pl022@f8034000 {
+			status = "disabled";
+			compatible = "arm,pl022", "arm,primecell";
+			reg = <0xf8034000 0x1000>;
+			interrupts = <GIC_SPI (136-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk"; /* required for 'arm,primecell' devices */
+			dmas = <
+				&dmac0 0 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* read channel */
+				&dmac0 1 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* write channel */
+			>;
+			dma-names = "rx", "tx";
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi0_pins>;
+//			num-cs = <1>;
+//			cs-gpios = <&gpio2 9 GPIO_ACTIVE_LOW>;
+		};
+
+		spi1: pl022@f8035000 {
+			status = "disabled";
+			compatible = "arm,pl022", "arm,primecell";
+			reg = <0xf8035000 0x1000>;
+			interrupts = <GIC_SPI (137-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk"; /* required for 'arm,primecell' devices */
+			dmas = <
+				&dmac0 2 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* read channel */
+				&dmac0 3 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* write channel */
+			>;
+			dma-names = "rx", "tx";
+			pinctrl-names = "default";
+			pinctrl-0 = <&spi1_pins>;
+//			num-cs = <1>;
+//			cs-gpios = <&gpio2 23 GPIO_ACTIVE_LOW>;
+		};
+
+		/* Quad SPI */
+
+		qspi0: qspi@f801d300 {
+			status = "disabled";
+			compatible = "hilscher,qspi-netx4000";
+			reg = <0xf801d300 0x100>;
+			interrupts = <GIC_SPI (85-32) IRQ_TYPE_LEVEL_HIGH>;
+			dmas = <
+				&dmac0 4 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL) /* rx channel */
+				&dmac0 5 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL) /* tx channel */
+			>;
+			dma-names = "rx", "tx";
+			pinctrl-names = "default";
+			pinctrl-0 = <&qspi0_pins>;
+		};
+
+		qspi1: qspi@f801d400 {
+			status = "disabled";
+			compatible = "hilscher,qspi-netx4000";
+			reg = <0xf801d400 0x100>;
+			interrupts = <GIC_SPI (86-32) IRQ_TYPE_LEVEL_HIGH>;
+			dmas = <
+				&dmac0 6 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL) /* rx channel */
+				&dmac0 7 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL) /* tx channel */
+			>;
+			dma-names = "rx", "tx";
+			pinctrl-names = "default";
+			pinctrl-0 = <&qspi1_pins>;
+		};
+
+		/* USB */
+
+		hcd0: usb-host@f9000000 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-hcd";
+			reg = <0xf9000000 0x20000>;
+			interrupts = <GIC_SPI (177-32) IRQ_TYPE_LEVEL_HIGH>;
+			clocks = <&usb_clk>;
+		};
+
+		udc0: usb-device@f8004000 {
+			status = "disabled";
+			compatible = "hilscher,udc-netx4000";
+			reg = <0xf8004000 0x2000>;
+			interrupts = <GIC_SPI (178-32) IRQ_TYPE_LEVEL_HIGH>, <GIC_SPI (179-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "irq_u2f", "irq_u2fepc";
+
+			clocks = <&usb_clk>;
+		};
+
+		/* CAN */
+
+		can0: can@f8030000 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-can";
+			reg = <0xf8030000 0x4000>;
+			interrupts = <GIC_SPI (110-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (111-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (112-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (113-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (114-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (115-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (116-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (117-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (118-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (119-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (120-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "cherrint0",
+			                  "cherrint1",
+			                  "cherrint2",
+			                  "rxfint",
+			                  "comfrxint0",
+			                  "comfrxint1",
+			                  "comfrxint2",
+			                  "glerrint",
+			                  "txint0",
+			                  "txint1",
+			                  "txint2";
+			clocks = <&periph_clk>;
+			clock_select = <0>; /* CLKR_CLKC */
+
+//			channels = <0 1 2>; /* list of enabled channels */
+		};
+
+		/* GMAC */
+
+		gmac0: gmac@f8010000 {
+			status = "disabled";
+			pinctrl-names = "default";
+			pinctrl-0 = <&rgmii0_pins &gmac0_mdio_pins>;
+			compatible = "snps,dwc-qos-ethernet-4.10", "hilscher,netx4000-gmac";
+			reg = <0xf8010000 0x4000>;
+			clocks = <&gmac_clk>, <&gmac_clk>, <&gmac_clk>, <&gmac_clk>;
+			clock-names = "apb_pclk", "phy_ref_clk", /* phy_ref_clk is unused/unsupported at 'nxhx4000 jtag plus' board */
+						  "stmmaceth", "pclk"; /* clocks are renamed to 'stmmaceth' and 'pclk' since kernel 4.14 */
+			interrupts = <GIC_SPI (106-32) IRQ_TYPE_LEVEL_HIGH>, <GIC_SPI (107-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "macirq", "eth_wake_irq";
+
+			phy-handle = <&phy0>;
+			phy-mode = "rgmii-id";
+			mac-address = [00 00 00 00 00 00]; /* will be filled by bootloader */
+
+			mdio {
+				compatible = "snps,dwc-qos-ethernet-mdio";
+				#address-cells = <1>;
+				#size-cells = <0>;
+				phy0: phy0@0 {
+					compatible = "ethernet-phy-ieee802.3-c22";
+					device_type = "ethernet-phy";
+					reg = <0>;
+				};
+				phy1: phy1@1 {
+					compatible = "ethernet-phy-ieee802.3-c22";
+					device_type = "ethernet-phy";
+					reg = <1>;
+				};
+			};
+		};
+
+		gmac1: gmac@f8014000 {
+			status = "disabled";
+			pinctrl-names = "default";
+			pinctrl-0 = <&rgmii1_pins>;
+			compatible = "snps,dwc-qos-ethernet-4.10", "hilscher,netx4000-gmac";
+			reg = <0xf8014000 0x4000>;
+			clocks = <&gmac_clk>, <&gmac_clk>, <&gmac_clk>, <&gmac_clk>;
+			clock-names = "apb_pclk", "phy_ref_clk", /* phy_ref_clk is unused/unsupported at 'nxhx4000 jtag plus' board */
+						  "stmmaceth", "pclk"; /* clocks are renamed to 'stmmaceth' and 'pclk' since kernel 4.14 */
+			interrupts = <GIC_SPI (108-32) IRQ_TYPE_LEVEL_HIGH>, <GIC_SPI (109-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "macirq", "eth_wake_irq";
+
+			phy-handle = <&phy1>;
+			phy-mode = "rgmii-id";
+			mac-address = [00 00 00 00 00 00]; /* will be filled by bootloader */
+		};
+
+		/* Display */
+
+		display0: pvo@f803c000 {
+			status = "disabled";
+			compatible = "hilscher,fb-netx4000";
+			reg = <0xf803c000 0x400>;
+			clocks = <&gfx_clk>;
+			pinctrl-names = "default";
+			pinctrl-0 = <&pvo_rgb888_pins>;
+			interrupts = <GIC_SPI (90-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (91-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (92-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (93-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (94-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (95-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "bus_error",
+			                  "fifo_underrun",
+			                  "reg_reload",
+			                  "scanline",
+			                  "video_no_start",
+			                  "video_not_in_sync";
+		};
+
+		/* Memory Controller */
+
+		smc353: smc353@f8003000 {
+			status = "disabled";
+			compatible = "arm,smc-35x","arm,primecell";
+			reg = <0xf8003000 0x1000>;
+			clocks = <&periph_clk>;
+			clock-names = "apb_pclk";
+		};
+
+		/* SD/MMC */
+
+		sdmmc0: sdmmc@f803a000 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-sdio";
+			reg = <0xf803a000 0x1000>;
+			interrupts = <GIC_SPI (81-32) IRQ_TYPE_LEVEL_HIGH>, <GIC_SPI (82-32) IRQ_TYPE_LEVEL_HIGH>, <GIC_SPI (83-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "sdio", "card", "access";
+			card-detect-delay = <100>;
+			voltage-ranges = <3300 3300>;
+			bus-width = <4>;
+			clocks = <&sdio_clk>;
+			dmas = <
+				&dmac1 0 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* read channel */
+				&dmac1 1 (NBPF_SLAVE_RQ_HIGH | NBPF_SLAVE_RQ_LEVEL)  /* write channel */
+			>;
+			dma-names = "rx", "tx";
+		};
+
+		/* PCIe root complex */
+
+		pcie_rc: pci_rc@f8050000 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-pcie-rc";
+			reg = <0xf8050000 0x4000>;
+
+			device_type = "pci";
+			linux,pci-domain = <1>;
+			max-link-speed = <2>;
+
+			interrupts = <GIC_SPI (97-32)  IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (98-32)  IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (99-32)  IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (100-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (101-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (102-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (103-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (104-32) IRQ_TYPE_LEVEL_HIGH>,
+			             <GIC_SPI (105-32) IRQ_TYPE_LEVEL_HIGH>;
+			interrupt-names = "all",
+			                  "dma",
+			                  "msi_rc",
+			                  "serr",
+			                  "err_cor",
+			                  "err_fatal",
+			                  "err_nonfatal",
+			                  "msg",
+			                  "pcie_evt";
+
+			clocks = <&pcie_clk>;
+
+			bus-range = <0 0xff>;
+
+			#address-cells = <3>;
+			#size-cells = <2>;
+
+			// pci_space
+			//        0x01: IO   pci_addr     cpu_addr     size
+			//        0x02: Mem  (64bit)      (64bit)
+			//        0x40: pref
+			ranges = <0x02000000 0 0xC0000000 0xC0000000 0 0x10000000   /* non-prefetchable memory (256M) */
+			          0x42000000 0 0xD0000000 0xD0000000 0 0x10000000>; /* prefetchable memory (256M) */
+
+			#interrupt-cells = <1>;
+			interrupt-map-mask = <0 0 0 0x7>;
+			interrupt-map = <0 0 0 1 &pcie_intc 1>, /* inta */
+			                <0 0 0 2 &pcie_intc 2>, /* intb */
+			                <0 0 0 3 &pcie_intc 3>, /* intc */
+			                <0 0 0 4 &pcie_intc 4>; /* intd */
+
+			pcie_intc: irq-controller@pcie {
+				interrupt-controller;
+				#address-cells = <0>;
+				#interrupt-cells = <1>;
+			};
+		};
+
+		/* XC Port (ethernet)
+		   CAUTION: Only use, when no R7 firmware is running */
+
+		xceth0: xceth0 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-xceth0";
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&xc0_pins &netx_xc0_pins>;
+
+			phy-handle = <&intphy0>;
+
+			port = <0>;
+			xc_res = "xc0";/* array of xc refs */
+
+			interrupt-parent = <&gic>;
+			interrupts = <GIC_SPI (206-32) IRQ_TYPE_LEVEL_HIGH>;
+
+			mac-address = [00 00 00 00 00 00]; /* will be filled by bootloader */
+		};
+
+		xceth1: xceth1 {
+			status = "disabled";
+			compatible = "hilscher,netx4000-xceth1";
+
+			pinctrl-names = "default";
+			pinctrl-0 = <&xc1_pins &netx_xc1_pins>;
+
+			phy-handle = <&intphy1>;
+
+			port = <1>;
+			xc_res = "xc1";/* array of xc refs */
+
+			interrupt-parent = <&gic>;
+			interrupts = <GIC_SPI (207-32) IRQ_TYPE_LEVEL_HIGH>;
+
+			mac-address = [00 00 00 00 00 00]; /* will be filled by bootloader */
+		};
+
+		netx_pinctrl: pinctrl@f4080400 {
+			compatible = "pinctrl-single-netx4000";
+			reg = <0xf4080400 0x400>;
+			pinctrl-single,register-width = <32>;
+			pinctrl-single,function-mask = <0xffff>;
+
+			#address-cells = <1>;
+			#size-cells = <1>;
+			ranges;
+			keyaccess-control {
+				reg = <0xf408017c 0x4>;
+			};
+		};
+	};
+};
+
+&pinctrl {
+	/* Default pin control used by GPIO requests ---> */
+	pinctrl-single,gpio-range = <
+		&range (MUX_PIN(15,0)/4) 1 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLUP50K | REEMUX_CTL(0x8)) // gpio4[0] / mdio (gpio-bitbang)
+		&range (MUX_PIN(15,1)/4) 1 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))      // gpio4[1] / mdc (gpio-bitbang)
+	>;
+
+	range: gpio-range {
+		#pinctrl-single,gpio-range-cells = <3>;
+	};
+	/* <--- */
+
+	uart0_pins_noflow: uart0_pins_noflow {
+		pinctrl-single,pins = <
+			MUX_PIN(4,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RXD
+			MUX_PIN(4,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // TXD
+		>;
+	};
+
+	uart0_pins: uart0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(4,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RXD
+			MUX_PIN(4,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // TXD
+			MUX_PIN(4,12)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // CTS
+			MUX_PIN(4,13)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RTS
+		>;
+	};
+
+	uart1_pins_noflow: uart1_pins_noflow {
+		pinctrl-single,pins = <
+			MUX_PIN(4,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RXD
+			MUX_PIN(4,15)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // TXD
+		>;
+	};
+
+	uart1_pins: uart1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(4,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RXD
+			MUX_PIN(4,15)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // TXD
+			MUX_PIN(5,0)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // CTS
+			MUX_PIN(5,1)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // RTS
+		>;
+	};
+
+	uart2_pins_noflow: uart2_pins_noflow {
+		pinctrl-single,pins = <
+			MUX_PIN(5,2)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // RXD
+			MUX_PIN(5,3)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // TXD
+		>;
+	};
+
+	uart3_pins_noflow: uart3_pins_noflow {
+		pinctrl-single,pins = <
+			MUX_PIN(5,4)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // RXD
+			MUX_PIN(5,5)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // TXD
+		>;
+	};
+
+	i2c0_pins: i2c0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(2,0)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // scl / gpio4_26
+			MUX_PIN(2,1)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // sda / gpio4_27
+		>;
+	};
+
+	i2c1_pins: i2c1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(4,8)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // scl / gpio1_8
+			MUX_PIN(4,9)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // sda / gpio1_9
+		>;
+	};
+
+	i2c2_pins: i2c2_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(16,8)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // scl / gpio4_22
+			MUX_PIN(16,9)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // sda / gpio4_23
+		>;
+	};
+
+	i2c3_pins: i2c3_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(16,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K) // scl / gpio4_24
+			MUX_PIN(16,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K) // sda / gpio4_25
+		>;
+	};
+
+	i2c4_pins: i2c4_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(6,0)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // scl / gpio2_16
+			MUX_PIN(6,1)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // sda / gpio2_17
+		>;
+	};
+
+	i2c5_pins: i2c5_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(6,2)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // scl / gpio2_18
+			MUX_PIN(6,3)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // sda / gpio2_19
+		>;
+	};
+
+	spi0_pins: spi0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(5,6)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // PL022_CLK
+			MUX_PIN(5,7)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // PL022_MOSI
+			MUX_PIN(5,8)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // PL022_MISO
+		>;
+	};
+
+	spi1_pins: spi1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(6,4)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // PL022_CLK
+			MUX_PIN(6,5)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // PL022_MOSI
+			MUX_PIN(6,6)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // PL022_MISO
+		>;
+	};
+
+	qspi0_pins: qspi0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(1,0)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // sqi0_clk
+			MUX_PIN(1,1)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // sqi0_mosi
+			MUX_PIN(1,2)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // sqi0_miso
+			MUX_PIN(1,3)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // sqi0_sio2
+			MUX_PIN(1,4)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // sqi0_sio3
+			MUX_PIN(1,5)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // sqi0_cs0n
+		>;
+	};
+
+	qspi1_pins: qspi1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(10,3)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // sqi1_clk
+			MUX_PIN(10,4)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // sqi1_mosi
+			MUX_PIN(10,5)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // sqi1_miso
+			MUX_PIN(10,6)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // sqi1_sio2
+			MUX_PIN(10,7)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // sqi1_sio3
+			MUX_PIN(10,8)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)  // sqi1_cs0n
+		>;
+	};
+
+	hcd0_0_pins: hcd0_0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(14,0)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // OCI1
+			MUX_PIN(14,1)  (REEMUX_0 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)       // PPON1
+		>;
+	};
+
+	hcd0_1_pins: hcd0_1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(5,4)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // OCI2
+			MUX_PIN(5,5)  (REEMUX_3 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // PPON2
+		>;
+	};
+
+	can0_0_pins: can0_0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(5,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // MMIO43 => GPIO2_11 => rx
+			MUX_PIN(5,12)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // MMIO44 => GPIO2_12 => tx
+		>;
+	};
+
+	can0_1_pins: can0_1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(5,13)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // MMIO45 => GPIO2_13 => rx
+			MUX_PIN(5,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // MMIO46 => GPIO2_14 => tx
+		>;
+	};
+
+	can0_2_pins: can0_2_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(6,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)   // MMIO62 => GPIO2_30 => rx
+			MUX_PIN(6,15)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)        // MMIO63 => GPIO2_31 => rx
+		>;
+	};
+
+	gmac0_mdio_pins: gmac0_mdio_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(15,0)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))   // MDIO
+			MUX_PIN(15,1)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))   // MDC
+		>;
+	};
+
+	rgmii0_pins: rgmii0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(15,2)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD0
+			MUX_PIN(15,3)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD1
+			MUX_PIN(15,4)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD2
+			MUX_PIN(15,5)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD3
+			MUX_PIN(15,6)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD0
+			MUX_PIN(15,7)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD1
+			MUX_PIN(15,8)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD2
+			MUX_PIN(15,9)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD3
+			MUX_PIN(15,10)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXCLK
+			MUX_PIN(15,11)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXCTL
+			MUX_PIN(15,12)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXCLK
+			MUX_PIN(15,13)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXCTL
+		>;
+	};
+
+	rgmii1_pins: rgmii1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(16,0)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD0
+			MUX_PIN(16,1)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD1
+			MUX_PIN(16,2)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD2
+			MUX_PIN(16,3)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXD3
+			MUX_PIN(16,4)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD0
+			MUX_PIN(16,5)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD1
+			MUX_PIN(16,6)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD2
+			MUX_PIN(16,7)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXD3
+			MUX_PIN(16,8)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXCLK
+			MUX_PIN(16,9)   (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // TXCTL
+			MUX_PIN(16,10)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXCLK
+			MUX_PIN(16,11)  (REEMUX_3 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // RXCTL
+		>;
+	};
+
+	pvo_rgb888_pins: pvo_rgb888_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(12,0)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R0
+			MUX_PIN(12,1)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R1
+			MUX_PIN(12,2)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R2
+			MUX_PIN(12,3)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R3
+			MUX_PIN(12,4)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R4
+			MUX_PIN(12,5)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R5
+			MUX_PIN(12,6)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R6
+			MUX_PIN(12,7)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // R7
+			MUX_PIN(12,8)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G0
+			MUX_PIN(12,9)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G1
+			MUX_PIN(12,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G2
+			MUX_PIN(12,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G3
+			MUX_PIN(12,12)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G4
+			MUX_PIN(12,13)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G5
+			MUX_PIN(12,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G6
+			MUX_PIN(12,15)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // G7
+			MUX_PIN(13,0)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B0
+			MUX_PIN(13,1)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B1
+			MUX_PIN(13,2)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B2
+			MUX_PIN(13,3)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B3
+			MUX_PIN(13,4)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B4
+			MUX_PIN(13,5)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B5
+			MUX_PIN(13,6)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B6
+			MUX_PIN(13,7)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // B7
+			MUX_PIN(13,8)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // PCLK
+			MUX_PIN(13,9)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // BLANK
+			MUX_PIN(13,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // HSYNC
+			MUX_PIN(13,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_NONE)      // VSYNC
+		>;
+	};
+
+	nand8_pins: nand8_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(8,1)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA0
+			MUX_PIN(8,2)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA1
+			MUX_PIN(8,3)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA2
+			MUX_PIN(8,4)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA3
+			MUX_PIN(8,5)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA4
+			MUX_PIN(8,6)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA5
+			MUX_PIN(8,7)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA6
+			MUX_PIN(8,8)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)   // PL353_DATA7
+			MUX_PIN(8,9)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_CLE
+			MUX_PIN(8,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_CS_N
+			MUX_PIN(8,11)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_OE_N
+			MUX_PIN(8,12)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_WE_N
+			MUX_PIN(8,13)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_BUSY
+			MUX_PIN(8,14)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)     // PL353_NAND_ALE
+		>;
+	};
+
+	nand16_pins: nand16_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(8,1)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA0
+			MUX_PIN(8,2)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA1
+			MUX_PIN(8,3)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA2
+			MUX_PIN(8,4)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA3
+			MUX_PIN(8,5)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA4
+			MUX_PIN(8,6)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA5
+			MUX_PIN(8,7)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA6
+			MUX_PIN(8,8)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA7
+			MUX_PIN(8,9)    (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_CLE
+			MUX_PIN(8,10)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_CS_N
+			MUX_PIN(8,11)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_OE_N
+			MUX_PIN(8,12)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_WE_N
+			MUX_PIN(8,13)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_BUSY
+			MUX_PIN(8,14)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLUP50K)    // PL353_NAND_ALE
+			MUX_PIN(10,3)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA8
+			MUX_PIN(10,4)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA9
+			MUX_PIN(10,5)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA10
+			MUX_PIN(10,6)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA11
+			MUX_PIN(10,7)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA12
+			MUX_PIN(10,8)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA13
+			MUX_PIN(10,9)   (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA14
+			MUX_PIN(10,10)  (REEMUX_2 | REEMUX_DRV_06MA | REEMUX_UDC_PULLDOWN50K)  // PL353_DATA15
+		>;
+	};
+
+	xc0_pins: xc0_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(3,1)  (REEMUX_0 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // mmio1 / phy0activity
+			MUX_PIN(3,2)  (REEMUX_0 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // mmio2 / phy0link
+		>;
+	};
+
+	xc1_pins: xc1_pins {
+		pinctrl-single,pins = <
+			MUX_PIN(3, 3)  (REEMUX_0 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // mmio3 / phy1activity
+			MUX_PIN(3, 4)  (REEMUX_0 | REEMUX_DRV_04MA | REEMUX_UDC_NONE | REEMUX_CTL(0x8))  // mmio4 / phy1link
+		>;
+	};
+};
+
+&netx_pinctrl {
+	netx_xc0_pins: xc0_pins {
+		pinctrl-single,pins = <
+				MMIO(1) (MMIO_OUT_INV | PHY0_LED_PHY_CTRL_LNK)
+				MMIO(2) (MMIO_OUT_INV | PHY0_LED_PHY_CTRL_ACT)
+		>;
+	};
+	netx_xc1_pins: xc1_pins {
+		pinctrl-single,pins = <
+				MMIO(3) (MMIO_OUT_INV | PHY1_LED_PHY_CTRL_LNK)
+				MMIO(4) (MMIO_OUT_INV | PHY1_LED_PHY_CTRL_ACT)
+		>;
+	};
+};
diff --git a/arch/arm/dts/netx4000-nxhx4000-jtag-plus-rev4.dts b/arch/arm/dts/netx4000-nxhx4000-jtag-plus-rev4.dts
new file mode 100644
index 0000000000..1ec854e4c4
--- /dev/null
+++ b/arch/arm/dts/netx4000-nxhx4000-jtag-plus-rev4.dts
@@ -0,0 +1,22 @@
+/*
+* (C) Copyright 2018 Hilscher Gesellschaft fuer Systemautomation mbH
+* http://www.hilscher.com
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; version 2 of
+* the License.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*/
+
+/dts-v1/;
+
+#include "nxhx4000-jtag-plus-revx.dts"
+
+/ {
+	model = "nxhx4000-jtag-plus-rev4";
+};
diff --git a/arch/arm/dts/nxhx4000-jtag-plus-revx.dts b/arch/arm/dts/nxhx4000-jtag-plus-revx.dts
new file mode 100644
index 0000000000..a6c2c7d141
--- /dev/null
+++ b/arch/arm/dts/nxhx4000-jtag-plus-revx.dts
@@ -0,0 +1,171 @@
+/*
+* (C) Copyright 2018 Hilscher Gesellschaft fuer Systemautomation mbH
+* http://www.hilscher.com
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; version 2 of
+* the License.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*/
+
+/dts-v1/;
+
+#include "netx4000-common.dtsi"
+
+/ {
+	model = "nxhx4000-jtag-plus-revx";
+	compatible = "hilscher,netx4000";
+
+	chosen {
+		stdout-path = &uart0;
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x0>; /* will be filled by bootloader */
+	};
+
+	leds {
+		compatible = "gpio-leds";
+
+		led0 {
+			gpios = <&gpio0 2 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "none";
+			default-state = "off";
+		};
+		led1 {
+			gpios = <&gpio0 3 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "none";
+			default-state = "off";
+		};
+		led2 {
+			gpios = <&gpio0 4 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "none";
+			default-state = "off";
+		};
+		led3 {
+			gpios = <&gpio0 5 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "none";
+			default-state = "off";
+		};
+	};
+};
+
+/* Static platform gpio pins */
+&pinctrl {
+	pinctrl-single,gpio-range0 = <
+// 		MUX_PIN(3,2)  (REEMUX_1 | REEMUX_DRV_08MA | REEMUX_UDC_NONE)        // mmio2  / gpio0.2  / led p300
+// 		MUX_PIN(3,3)  (REEMUX_1 | REEMUX_DRV_08MA | REEMUX_UDC_NONE)        // mmio3  / gpio0.3  / led p301
+// 		MUX_PIN(3,4)  (REEMUX_1 | REEMUX_DRV_08MA | REEMUX_UDC_NONE)        // mmio4  / gpio0.4  / led p302
+// 		MUX_PIN(3,5)  (REEMUX_1 | REEMUX_DRV_08MA | REEMUX_UDC_NONE)        // mmio5  / gpio0.5  / led p303
+// 		MUX_PIN(3,6)  (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio6  / gpio0.6  / s301-a
+// 		MUX_PIN(3,7)  (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio7  / gpio0.7  / s301-b
+// 		MUX_PIN(3,8)  (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio8  / gpio0.8  / s301-c
+// 		MUX_PIN(3,9)  (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio9  / gpio0.9  / s301-d
+// 		MUX_PIN(3,14) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio14 / gpio0.14 / x1602.10
+		&range (MUX_PIN(3,2)/4) 4 (REEMUX_1 | REEMUX_DRV_08MA | REEMUX_UDC_NONE)
+		&range (MUX_PIN(3,6)/4) 4 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K)
+		&range (MUX_PIN(3,14)/4) 1 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+
+// 		MUX_PIN(4,4)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio20 / gpio1.4  / x1601.7
+// 		MUX_PIN(4,5)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio21 / gpio1.5  / x1601.8
+// 		MUX_PIN(4,6)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio22 / gpio1.6  / x1601.9
+// 		MUX_PIN(4,7)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio23 / gpio1.7  / x1601.10
+// 		MUX_PIN(4,8)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio24 / gpio1.8  / x1800.15
+// 		MUX_PIN(4,9)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio25 / gpio1.9  / x1800.17
+// 		MUX_PIN(4,14) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio30 / gpio1.14 / x1601.2
+// 		MUX_PIN(4,15) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio31 / gpio1.15 / x1601.1
+		&range (MUX_PIN(4,4)/4) 6 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+		&range (MUX_PIN(4,14)/4) 2 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+
+// 		MUX_PIN(5,0)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio32 / gpio2.0  / x1601.4
+// 		MUX_PIN(5,1)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio33 / gpio2.1  / x1601.3
+// 		MUX_PIN(5,6)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio38 / gpio2.6  / x1800.23
+// 		MUX_PIN(5,7)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio39 / gpio2.7  / x1800.25
+// 		MUX_PIN(5,8)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio40 / gpio2.8  / x1800.27
+// 		MUX_PIN(5,9)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio41 / gpio2.9  / x1800.28
+// 		MUX_PIN(5,10) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio42 / gpio2.10 / x1800.29
+// 		MUX_PIN(5,11) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio43 / gpio2.11 / x1602.2
+// 		MUX_PIN(5,12) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio44 / gpio2.12 / x1602.1
+// 		MUX_PIN(6,9)  (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio57 / gpio2.25 / x1602.4
+// 		MUX_PIN(6,10) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio58 / gpio2.26 / x1602.3
+// 		MUX_PIN(6,11) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio59 / gpio2.27 / x1602.7
+// 		MUX_PIN(6,12) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio60 / gpio2.28 / x1602.8
+// 		MUX_PIN(6,13) (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K) // mmio61 / gpio2.29 / x1602.9
+		&range (MUX_PIN(5,0)/4) 2 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+		&range (MUX_PIN(5,6)/4) 7 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+		&range (MUX_PIN(6,9)/4) 5 (REEMUX_1 | REEMUX_DRV_12MA | REEMUX_UDC_PULLDOWN50K)
+
+		/* pcie-rc */
+		&range (MUX_PIN(6,2)/4)  1 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio50 / gpio2_18 / reset-gpio
+		&range (MUX_PIN(6,14)/4) 1 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio62 / gpio2_30 / wake-gpio
+		&range (MUX_PIN(6,15)/4) 1 (REEMUX_1 | REEMUX_DRV_04MA | REEMUX_UDC_PULLDOWN50K) // mmio63 / gpio2_31 / clkreq-gpio
+	>;
+};
+
+&sdmmc0 {
+	status = "okay";
+};
+
+&rtc0 {
+	status = "okay";
+};
+
+&uart0 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_pins>;
+};
+
+&i2c0 {
+	status = "okay";
+	clock-frequency = <800000>;
+	/* Uncomment the line below to enable the polling mode. */
+//	interrupts = <0>;
+	#address-cells = <1>;
+	#size-cells = <0>;
+	eeprom@50 {
+		/* The 'NXHX4000 JTAG+ rev3' board is populated with a 24FC1025.
+		 * We use the 24c32 only for testing (16bit access!). */
+		compatible = "24c32";
+		reg = <0x50>;
+		pagesize = <128>;
+	};
+};
+
+&hcd0 {
+	status = "okay";
+	num-ports = <1>; /* 1 or 2 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&hcd0_0_pins>;
+};
+
+&udc0 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&hcd0_1_pins>;
+};
+
+&gmac0 {
+	status = "okay";
+};
+
+&gmac1 {
+	status = "okay";
+};
+
+&idpm0 {
+	status = "okay";
+};
+
+&pcie_rc {
+	status = "okay";
+	reset-gpio   = <&gpio2 18 GPIO_ACTIVE_LOW>;
+	wake-gpio    = <&gpio2 30 GPIO_ACTIVE_LOW>;
+	clkreq-gpio  = <&gpio2 31 GPIO_ACTIVE_LOW>;
+};
diff --git a/arch/arm/mach-netx4000/Kconfig b/arch/arm/mach-netx4000/Kconfig
new file mode 100644
index 0000000000..aafb433a25
--- /dev/null
+++ b/arch/arm/mach-netx4000/Kconfig
@@ -0,0 +1,82 @@
+config NETX4000
+	bool "Hilscher netX4000 SoC support"
+	depends on ARCH_NETX4000
+	select CPU_V7A
+
+menu "netX4000 Boards"
+
+choice
+	prompt "netX4000 board select"
+
+config TARGET_NXHX4000_REV4
+	bool "NXHX4000-JTAG+ Rev.4"
+	help
+	  NXHX4000-JTAG+ Rev. 4 board
+	select NETX4000
+endchoice
+
+choice
+	prompt "DDR RAM Type"
+
+config DDR_RAM_AS4C512M16D3L_12_2GIB
+	bool "2GiB (AS4C512M16D3L-12)"
+
+config DDR_RAM_IS43TR16256AL_1GIB
+	bool "1GiB (IS43TR16256A)"
+
+config DDR_RAM_OUT_OF_TREE
+	bool "Out of tree DDR RAM parameters."
+        help
+	  Select this to provide your own specific DDR RAM timing parameters.
+
+endchoice
+
+config DDR_RAM_OUT_OF_TREE_INCLUDE_400
+	string "Include file for out of tree DDR RAM parameters (400MHz)."
+	default "mach/as4c512m16d3l-12-2gib-400mhz.h"
+	depends on DDR_RAM_OUT_OF_TREE
+
+config DDR_RAM_OUT_OF_TREE_INCLUDE_600
+	string "Include file for out of tree DDR RAM parameters (600MHz)."
+	default "mach/as4c512m16d3l-12-2gib-600mhz"
+	depends on DDR_RAM_OUT_OF_TREE
+
+config DDR400_RAM_INCLUDE
+	string
+	default "mach/as4c512m16d3l-12-2gib-400mhz.h" if DDR_RAM_AS4C512M16D3L_12_2GIB
+	default "mach/is43tr16256al-1gib-400mhz.h" if DDR_RAM_IS43TR16256AL_1GIB
+	default DDR_RAM_OUT_OF_TREE_INCLUDE_400 if DDR_RAM_OUT_OF_TREE
+
+config DDR600_RAM_INCLUDE
+	string
+	default "mach/as4c512m16d3l-12-2gib-600mhz.h" if DDR_RAM_AS4C512M16D3L_12_2GIB
+	default "mach/is43tr16256al-1gib-600mhz.h" if DDR_RAM_IS43TR16256AL_1GIB
+	default DDR_RAM_OUT_OF_TREE_INCLUDE_600 if DDR_RAM_OUT_OF_TREE
+
+config ENABLE_DDR_ECC
+	bool "Enable ecc for DDR-RAM"
+	default n
+	help
+	  Enables ecc for DDR-RAM.
+	  NOTE: This feature will slow down the boot process due to the memory initialization time.
+
+endmenu
+
+config FDL_ADDRESS
+	hex "Memory location of flash device label"
+	default "0x0505f000"
+	help
+	  Setup memory location where to find a flash device label containing device data like MAC
+	  address and board information.
+
+config SYS_BOARD
+	default "netx4000"
+
+config SYS_VENDOR
+	default "hilscher"
+
+config SYS_SOC
+	default "netx4000"
+
+config SYS_CONFIG_NAME
+	default "netx4000"
diff --git a/arch/arm/mach-netx4000/Makefile b/arch/arm/mach-netx4000/Makefile
new file mode 100644
index 0000000000..c3cd73ff48
--- /dev/null
+++ b/arch/arm/mach-netx4000/Makefile
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# (C) Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+
+obj-y	+= cpu.o reset.o timer.o
+obj-y	+= ddr.o ddr400-init.o ddr600-init.o
diff --git a/arch/arm/mach-netx4000/cpu.c b/arch/arm/mach-netx4000/cpu.c
new file mode 100644
index 0000000000..caf4be5868
--- /dev/null
+++ b/arch/arm/mach-netx4000/cpu.c
@@ -0,0 +1,29 @@
+#include <common.h>
+#include <cpu_func.h>
+
+uint32_t get_netx4000_cpu_rate(void)
+{
+        volatile u32* ulRAPSysCtrlBootMode = (volatile u32*)0xf8000000;
+
+        /* get current PLL speed */
+        if ((*ulRAPSysCtrlBootMode & (1<<8)) == (1<<8))
+                return (600*1000*1000);/* 600MHZ */
+        else
+                return (400*1000*1000);/* 400MHZ */
+}
+
+#if defined(CONFIG_DISPLAY_CPUINFO)
+int print_cpuinfo(void)
+{
+	printf("SoC:   netX4000\n");
+	return 0;
+}
+#endif /* CONFIG_DISPLAY_CPUINFO */
+
+#ifndef CONFIG_SYS_DCACHE_OFF
+void enable_caches(void)
+{
+        /* Enable D-cache. I-cache is already enabled in start.S */
+        dcache_enable();
+}
+#endif
diff --git a/arch/arm/mach-netx4000/ddr.c b/arch/arm/mach-netx4000/ddr.c
new file mode 100644
index 0000000000..258b1b4b53
--- /dev/null
+++ b/arch/arm/mach-netx4000/ddr.c
@@ -0,0 +1,129 @@
+#include <common.h>
+#include <asm/io.h>
+#include <mach/netx4000_ddr.h>
+#include <mach/netx4000_dma.h>
+
+extern int ddr400_init(void);
+extern int ddr600_init(void);
+extern uint32_t get_netx4000_cpu_rate(void);
+
+static uint32_t get_sdram_size(void) {
+	uint32_t tmp;
+	uint32_t max_row, max_col;
+	uint32_t row_diff, col_diff, bank_diff;
+	uint32_t dp_width;
+	uint32_t size;
+
+	tmp = readl(DENALI_CTL(1));
+	max_col = (tmp & DENALI_CTL1_MAXCOL_MASK) >> DENALI_CTL1_MAXCOL_SHIFT;
+	max_row = (tmp & DENALI_CTL1_MAXROW_MASK) >> DENALI_CTL1_MAXROW_SHIFT;
+
+	tmp = readl(DENALI_CTL(53));
+	col_diff  = (tmp & DENALI_CTL53_COL_DIFF_MASK) >> DENALI_CTL53_COL_DIFF_SHIFT;
+	row_diff  = (tmp & DENALI_CTL53_ROW_DIFF_MASK) >> DENALI_CTL53_ROW_DIFF_SHIFT;
+	bank_diff = (tmp & DENALI_CTL53_BANK_DIFF_MASK)>> DENALI_CTL53_BANK_DIFF_SHIFT;
+
+        tmp = readl(DENALI_CTL(58));
+	dp_width = (tmp & DENALI_CTL58_REDUC_MASK) ? 2: 4; /* 16 / 32 Bit */
+
+	size =  (1 << (max_col - col_diff));
+	size *= (1 << (max_row - row_diff));
+	size *= (8 >> bank_diff);
+	size *= dp_width;
+
+	return size;
+}
+
+static uint64_t fill_char[2];
+static void ddr_ecc_init(uint32_t sdram_size)
+{
+	uint32_t ram_size = sdram_size & ~0x1;
+	uint32_t ram_addr = NETX4000_DDR_ADDR_SPACE_START;
+	uint32_t chunk_size = ram_size / 8;
+	void __iomem *dmareg = (void __iomem *)NETX4000_DMAC0_REG;
+	int ch;
+	void __iomem *dmach;
+
+	/* Prepare source buffer for DMA transfer */
+	memset((void*)&fill_char[0], 0, sizeof(fill_char));
+
+	/* Setup 8 DMA channels to clear DDR */
+	for(ch=0;ch<8;ch++) {
+		dmach = (void __iomem *)(NETX4000_DMAC0 + ch * 0x40);
+
+		/* Reset */
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_CLREN, dmach + RAP_DMAC_CH_CHCTRL);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_SWRST, dmach + RAP_DMAC_CH_CHCTRL);
+
+		/* Setup and start */
+		writel((uint32_t)&fill_char[0], dmach + RAP_DMAC_CH_0_SA);
+		writel(ram_addr + ch * chunk_size, dmach + RAP_DMAC_CH_0_DA);
+		writel(chunk_size, dmach + RAP_DMAC_CH_0_TB);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCFG_SAD |        /* no source increment */
+		       MSK_NX4000_RAP_DMAC_CH_CHCFG_TM  |        /* Block transfer */
+		       (4 << SRT_NX4000_RAP_DMAC_CH_CHCFG_DDS) | /* 128 bit dest size */
+		       (4 << SRT_NX4000_RAP_DMAC_CH_CHCFG_SDS),  /* 128 Bit source size */
+		       dmach + RAP_DMAC_CH_CHCFG);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_SETEN |
+		       MSK_NX4000_RAP_DMAC_CH_CHCTRL_CLRSUS,
+		       dmach + RAP_DMAC_CH_CHCTRL);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_STG, dmach + RAP_DMAC_CH_CHCTRL);  /* Software triggered DMA */
+	}
+
+	/* Wait for DMA to finish */
+	while ((readl(dmareg + RAP_DMAC_REG_DST_END) & 0xFF) != 0xFF)
+		;
+
+	/* Reset all DMA channels */
+	for(ch=0;ch<8;ch++) {
+		dmach = (void __iomem *)(NETX4000_DMAC0 + ch * 0x40);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_CLREN, dmach + RAP_DMAC_CH_CHCTRL);
+		writel(MSK_NX4000_RAP_DMAC_CH_CHCTRL_SWRST, dmach + RAP_DMAC_CH_CHCTRL);
+		writel(DFLT_VAL_NX4000_RAP_DMAC_CH_CHCFG, dmach + RAP_DMAC_CH_CHCFG);
+		writel(0, dmach + RAP_DMAC_CH_0_SA);
+		writel(0, dmach + RAP_DMAC_CH_0_DA);
+		writel(0, dmach + RAP_DMAC_CH_0_TB);
+	}
+}
+
+#define AddressFilteringStartRegister  0xFAF10C00
+#define AddressFilteringEndRegister    0xFAF10C04
+static void fix_l2c_address_filtering_issue(void)
+{
+	*(uint32_t*)AddressFilteringStartRegister = 0x0;
+	*(uint32_t*)AddressFilteringEndRegister = 0xc0000000;
+	*(uint32_t*)AddressFilteringStartRegister = 0x40000001;
+}
+
+uint32_t netx4000_ddr_init(void)
+{
+	uint32_t cpu_rate;
+	int ecc;
+	uint32_t sdram_size;
+
+	fix_l2c_address_filtering_issue();
+
+	/* Initialize DDR controller */
+	cpu_rate = get_netx4000_cpu_rate();
+	if (cpu_rate == 400000000)
+		ecc = ddr400_init();
+	else if ((cpu_rate == 600000000))
+		ecc = ddr600_init();
+	else
+		while (1); /* FIXME */
+
+	sdram_size = get_sdram_size();
+	if (sdram_size > 0x40000000) {
+		memset((void*)0x80000000-32,0x55,32);
+		memset((void*)0xc0000000-32,0xaa,32);
+		/* Limit sdram_size if the upper GiB is inaccessible ('netX4000 RLXD' and 'netX4000 FULL v1'). */
+		if (*(volatile uint32_t*)0x7ffffffc != 0x55555555)
+			sdram_size = 0x40000001;
+	}
+
+	/* initialize memory to safely enable ecc */
+	if (ecc)
+		ddr_ecc_init(sdram_size);
+
+	return sdram_size & ~0x1;
+}
diff --git a/arch/arm/mach-netx4000/ddr400-init.c b/arch/arm/mach-netx4000/ddr400-init.c
new file mode 100644
index 0000000000..43cc53c9c0
--- /dev/null
+++ b/arch/arm/mach-netx4000/ddr400-init.c
@@ -0,0 +1,221 @@
+#include <common.h>
+#include <mach/netx4000_regs.h>
+#include <mach/netx4000_ddr.h>
+
+#include CONFIG_DDR400_RAM_INCLUDE
+
+#define DDRCTRL_DENALI_CTL(n)   (*(volatile uint32_t*)(Adr_NX4000_DDR_CTRL_CTL_00 + (n * 4)))
+#define PHYCTRL_CTL(n)   (*(volatile uint32_t*)(Adr_NX4000_DDR_PHY_DDR_PHY_FUNCCTRL + (n * 4)))
+
+int ddr400_init(void) {
+	volatile uint32_t *RAP_SYSCTRL_NOCPWRCTRL = (volatile uint32_t *)0xf8000040;
+	volatile uint32_t *RAP_SYSCTRL_NOCPWRSTAT = (volatile uint32_t *)0xf8000048;
+	volatile uint32_t *RAP_SYSCTRL_CLKCFG = (volatile uint32_t *)0xf800004c;
+	int ecc;
+
+	// Enable DDR clock.
+	while (!(*RAP_SYSCTRL_NOCPWRSTAT & 0x40)) {
+		*RAP_SYSCTRL_CLKCFG |= 0x40;
+		*RAP_SYSCTRL_NOCPWRCTRL |= 0x40;
+	}
+	
+	/* Only perform initialization if not done from a previous run / rom loader */
+	if(0 != (DDRCTRL_DENALI_CTL(0) & 0x1)) {
+		return (DDRCTRL_DENALI_CTL(152) & 1) ? 1 : 0;
+	}
+
+	DDRCTRL_DENALI_CTL(0) = DENALI_CTL_00_DATA;
+	DDRCTRL_DENALI_CTL(1) = DENALI_CTL_01_DATA;
+	DDRCTRL_DENALI_CTL(2) = DENALI_CTL_02_DATA;
+	DDRCTRL_DENALI_CTL(3) = DENALI_CTL_03_DATA;
+	DDRCTRL_DENALI_CTL(4) = DENALI_CTL_04_DATA;
+	DDRCTRL_DENALI_CTL(5) = DENALI_CTL_05_DATA;
+	DDRCTRL_DENALI_CTL(6) = DENALI_CTL_06_DATA;
+	DDRCTRL_DENALI_CTL(7) = DENALI_CTL_07_DATA;
+	DDRCTRL_DENALI_CTL(8) = DENALI_CTL_08_DATA;
+	DDRCTRL_DENALI_CTL(9) = DENALI_CTL_09_DATA;
+	DDRCTRL_DENALI_CTL(10) = DENALI_CTL_10_DATA;
+	DDRCTRL_DENALI_CTL(11) = DENALI_CTL_11_DATA;
+	DDRCTRL_DENALI_CTL(12) = DENALI_CTL_12_DATA;
+	DDRCTRL_DENALI_CTL(13) = DENALI_CTL_13_DATA;
+	DDRCTRL_DENALI_CTL(14) = DENALI_CTL_14_DATA;
+	DDRCTRL_DENALI_CTL(15) = DENALI_CTL_15_DATA;
+	DDRCTRL_DENALI_CTL(16) = DENALI_CTL_16_DATA;
+	DDRCTRL_DENALI_CTL(17) = DENALI_CTL_17_DATA;
+	DDRCTRL_DENALI_CTL(18) = DENALI_CTL_18_DATA;
+	DDRCTRL_DENALI_CTL(19) = DENALI_CTL_19_DATA;
+	DDRCTRL_DENALI_CTL(20) = DENALI_CTL_20_DATA;
+	DDRCTRL_DENALI_CTL(21) = DENALI_CTL_21_DATA;
+	DDRCTRL_DENALI_CTL(22) = DENALI_CTL_22_DATA;
+	DDRCTRL_DENALI_CTL(23) = DENALI_CTL_23_DATA;
+	DDRCTRL_DENALI_CTL(24) = DENALI_CTL_24_DATA;
+	DDRCTRL_DENALI_CTL(25) = DENALI_CTL_25_DATA;
+	DDRCTRL_DENALI_CTL(26) = DENALI_CTL_26_DATA;
+	DDRCTRL_DENALI_CTL(27) = DENALI_CTL_27_DATA;
+	DDRCTRL_DENALI_CTL(28) = DENALI_CTL_28_DATA;
+	DDRCTRL_DENALI_CTL(29) = DENALI_CTL_29_DATA;
+	DDRCTRL_DENALI_CTL(30) = DENALI_CTL_30_DATA;
+	DDRCTRL_DENALI_CTL(31) = DENALI_CTL_31_DATA;
+	DDRCTRL_DENALI_CTL(32) = DENALI_CTL_32_DATA;
+	DDRCTRL_DENALI_CTL(33) = DENALI_CTL_33_DATA;
+	DDRCTRL_DENALI_CTL(34) = DENALI_CTL_34_DATA;
+	DDRCTRL_DENALI_CTL(35) = DENALI_CTL_35_DATA;
+	DDRCTRL_DENALI_CTL(36) = DENALI_CTL_36_DATA;
+	DDRCTRL_DENALI_CTL(37) = DENALI_CTL_37_DATA;
+	DDRCTRL_DENALI_CTL(38) = DENALI_CTL_38_DATA;
+	DDRCTRL_DENALI_CTL(39) = DENALI_CTL_39_DATA;
+	DDRCTRL_DENALI_CTL(40) = DENALI_CTL_40_DATA;
+	DDRCTRL_DENALI_CTL(41) = DENALI_CTL_41_DATA;
+	DDRCTRL_DENALI_CTL(42) = DENALI_CTL_42_DATA;
+	DDRCTRL_DENALI_CTL(43) = DENALI_CTL_43_DATA;
+	DDRCTRL_DENALI_CTL(44) = DENALI_CTL_44_DATA;
+	DDRCTRL_DENALI_CTL(45) = DENALI_CTL_45_DATA;
+	DDRCTRL_DENALI_CTL(46) = DENALI_CTL_46_DATA;
+	DDRCTRL_DENALI_CTL(47) = DENALI_CTL_47_DATA;
+	DDRCTRL_DENALI_CTL(48) = DENALI_CTL_48_DATA;
+	DDRCTRL_DENALI_CTL(49) = DENALI_CTL_49_DATA;
+	DDRCTRL_DENALI_CTL(50) = DENALI_CTL_50_DATA;
+	DDRCTRL_DENALI_CTL(51) = DENALI_CTL_51_DATA;
+	DDRCTRL_DENALI_CTL(52) = DENALI_CTL_52_DATA;
+	DDRCTRL_DENALI_CTL(53) = DENALI_CTL_53_DATA;
+	DDRCTRL_DENALI_CTL(54) = DENALI_CTL_54_DATA;
+	DDRCTRL_DENALI_CTL(55) = DENALI_CTL_55_DATA;
+	DDRCTRL_DENALI_CTL(56) = DENALI_CTL_56_DATA;
+	DDRCTRL_DENALI_CTL(57) = DENALI_CTL_57_DATA;
+	DDRCTRL_DENALI_CTL(58) = DENALI_CTL_58_DATA;
+	DDRCTRL_DENALI_CTL(59) = DENALI_CTL_59_DATA;
+	DDRCTRL_DENALI_CTL(60) = DENALI_CTL_60_DATA;
+	DDRCTRL_DENALI_CTL(61) = DENALI_CTL_61_DATA;
+	DDRCTRL_DENALI_CTL(62) = DENALI_CTL_62_DATA;
+	DDRCTRL_DENALI_CTL(63) = DENALI_CTL_63_DATA;
+	DDRCTRL_DENALI_CTL(64) = DENALI_CTL_64_DATA;
+	DDRCTRL_DENALI_CTL(65) = DENALI_CTL_65_DATA;
+	DDRCTRL_DENALI_CTL(66) = DENALI_CTL_66_DATA;
+	DDRCTRL_DENALI_CTL(67) = DENALI_CTL_67_DATA;
+	DDRCTRL_DENALI_CTL(68) = DENALI_CTL_68_DATA;
+	DDRCTRL_DENALI_CTL(69) = DENALI_CTL_69_DATA;
+	DDRCTRL_DENALI_CTL(70) = DENALI_CTL_70_DATA;
+	DDRCTRL_DENALI_CTL(71) = DENALI_CTL_71_DATA;
+	DDRCTRL_DENALI_CTL(72) = DENALI_CTL_72_DATA;
+	DDRCTRL_DENALI_CTL(73) = DENALI_CTL_73_DATA;
+	DDRCTRL_DENALI_CTL(74) = DENALI_CTL_74_DATA;
+	DDRCTRL_DENALI_CTL(75) = DENALI_CTL_75_DATA;
+	DDRCTRL_DENALI_CTL(76) = DENALI_CTL_76_DATA;
+	DDRCTRL_DENALI_CTL(77) = DENALI_CTL_77_DATA;
+	DDRCTRL_DENALI_CTL(78) = DENALI_CTL_78_DATA;
+	DDRCTRL_DENALI_CTL(79) = DENALI_CTL_79_DATA;
+	DDRCTRL_DENALI_CTL(80) = DENALI_CTL_80_DATA;
+	DDRCTRL_DENALI_CTL(81) = DENALI_CTL_81_DATA;
+	DDRCTRL_DENALI_CTL(82) = DENALI_CTL_82_DATA;
+	DDRCTRL_DENALI_CTL(83) = DENALI_CTL_83_DATA;
+	DDRCTRL_DENALI_CTL(84) = DENALI_CTL_84_DATA;
+	DDRCTRL_DENALI_CTL(85) = DENALI_CTL_85_DATA;
+	DDRCTRL_DENALI_CTL(86) = DENALI_CTL_86_DATA;
+	DDRCTRL_DENALI_CTL(87) = DENALI_CTL_87_DATA;
+	DDRCTRL_DENALI_CTL(88) = DENALI_CTL_88_DATA;
+	DDRCTRL_DENALI_CTL(89) = DENALI_CTL_89_DATA;
+	DDRCTRL_DENALI_CTL(90) = DENALI_CTL_90_DATA;
+	DDRCTRL_DENALI_CTL(91) = DENALI_CTL_91_DATA;
+	DDRCTRL_DENALI_CTL(92) = DENALI_CTL_92_DATA;
+	DDRCTRL_DENALI_CTL(93) = DENALI_CTL_93_DATA;
+	DDRCTRL_DENALI_CTL(94) = DENALI_CTL_94_DATA;
+	DDRCTRL_DENALI_CTL(95) = DENALI_CTL_95_DATA;
+	DDRCTRL_DENALI_CTL(96) = DENALI_CTL_96_DATA;
+	DDRCTRL_DENALI_CTL(97) = DENALI_CTL_97_DATA;
+	DDRCTRL_DENALI_CTL(98) = DENALI_CTL_98_DATA;
+	DDRCTRL_DENALI_CTL(99) = DENALI_CTL_99_DATA;
+	DDRCTRL_DENALI_CTL(100) = DENALI_CTL_100_DATA;
+	DDRCTRL_DENALI_CTL(101) = DENALI_CTL_101_DATA;
+	DDRCTRL_DENALI_CTL(102) = DENALI_CTL_102_DATA;
+	DDRCTRL_DENALI_CTL(103) = DENALI_CTL_103_DATA;
+	DDRCTRL_DENALI_CTL(104) = DENALI_CTL_104_DATA;
+	DDRCTRL_DENALI_CTL(105) = DENALI_CTL_105_DATA;
+	DDRCTRL_DENALI_CTL(106) = DENALI_CTL_106_DATA;
+	DDRCTRL_DENALI_CTL(107) = DENALI_CTL_107_DATA;
+	DDRCTRL_DENALI_CTL(108) = DENALI_CTL_108_DATA;
+	DDRCTRL_DENALI_CTL(109) = DENALI_CTL_109_DATA;
+	DDRCTRL_DENALI_CTL(110) = DENALI_CTL_110_DATA;
+	DDRCTRL_DENALI_CTL(111) = DENALI_CTL_111_DATA;
+	DDRCTRL_DENALI_CTL(112) = DENALI_CTL_112_DATA;
+	DDRCTRL_DENALI_CTL(113) = DENALI_CTL_113_DATA;
+	DDRCTRL_DENALI_CTL(114) = DENALI_CTL_114_DATA;
+	DDRCTRL_DENALI_CTL(115) = DENALI_CTL_115_DATA;
+	DDRCTRL_DENALI_CTL(116) = DENALI_CTL_116_DATA;
+	DDRCTRL_DENALI_CTL(117) = DENALI_CTL_117_DATA;
+	DDRCTRL_DENALI_CTL(118) = DENALI_CTL_118_DATA;
+	DDRCTRL_DENALI_CTL(119) = DENALI_CTL_119_DATA;
+	DDRCTRL_DENALI_CTL(120) = DENALI_CTL_120_DATA;
+	DDRCTRL_DENALI_CTL(121) = DENALI_CTL_121_DATA;
+	DDRCTRL_DENALI_CTL(122) = DENALI_CTL_122_DATA;
+	DDRCTRL_DENALI_CTL(123) = DENALI_CTL_123_DATA;
+	DDRCTRL_DENALI_CTL(124) = DENALI_CTL_124_DATA;
+	DDRCTRL_DENALI_CTL(125) = DENALI_CTL_125_DATA;
+	DDRCTRL_DENALI_CTL(126) = DENALI_CTL_126_DATA;
+	DDRCTRL_DENALI_CTL(127) = DENALI_CTL_127_DATA;
+	DDRCTRL_DENALI_CTL(128) = DENALI_CTL_128_DATA;
+	DDRCTRL_DENALI_CTL(129) = DENALI_CTL_129_DATA;
+	DDRCTRL_DENALI_CTL(130) = DENALI_CTL_130_DATA;
+	DDRCTRL_DENALI_CTL(131) = DENALI_CTL_131_DATA;
+	DDRCTRL_DENALI_CTL(132) = DENALI_CTL_132_DATA;
+	DDRCTRL_DENALI_CTL(133) = DENALI_CTL_133_DATA;
+	DDRCTRL_DENALI_CTL(134) = DENALI_CTL_134_DATA;
+	DDRCTRL_DENALI_CTL(135) = DENALI_CTL_135_DATA;
+	DDRCTRL_DENALI_CTL(136) = DENALI_CTL_136_DATA;
+	DDRCTRL_DENALI_CTL(137) = DENALI_CTL_137_DATA;
+	DDRCTRL_DENALI_CTL(138) = DENALI_CTL_138_DATA;
+	DDRCTRL_DENALI_CTL(139) = DENALI_CTL_139_DATA;
+	DDRCTRL_DENALI_CTL(140) = DENALI_CTL_140_DATA;
+	DDRCTRL_DENALI_CTL(141) = DENALI_CTL_141_DATA;
+	DDRCTRL_DENALI_CTL(142) = DENALI_CTL_142_DATA;
+	DDRCTRL_DENALI_CTL(143) = DENALI_CTL_143_DATA;
+	DDRCTRL_DENALI_CTL(144) = DENALI_CTL_144_DATA;
+	DDRCTRL_DENALI_CTL(145) = DENALI_CTL_145_DATA;
+	DDRCTRL_DENALI_CTL(146) = DENALI_CTL_146_DATA;
+	DDRCTRL_DENALI_CTL(147) = DENALI_CTL_147_DATA;
+	DDRCTRL_DENALI_CTL(148) = DENALI_CTL_148_DATA;
+	DDRCTRL_DENALI_CTL(149) = DENALI_CTL_149_DATA;
+	DDRCTRL_DENALI_CTL(150) = DENALI_CTL_150_DATA;
+	DDRCTRL_DENALI_CTL(151) = DENALI_CTL_151_DATA;
+
+#ifdef CONFIG_ENABLE_DDR_ECC
+	DDRCTRL_DENALI_CTL(152) = DENALI_CTL_152_DATA | 0x1;
+	ecc = 1;
+#else
+	DDRCTRL_DENALI_CTL(152) = DENALI_CTL_152_DATA & ~0x1;
+	ecc = 0;
+#endif
+
+	DDRCTRL_DENALI_CTL(153) = DENALI_CTL_153_DATA;
+
+#ifdef DENALI_CTL_154_DATA
+	DDRCTRL_DENALI_CTL(154) = DENALI_CTL_154_DATA;
+	DDRCTRL_DENALI_CTL(155) = DENALI_CTL_155_DATA;
+	DDRCTRL_DENALI_CTL(156) = DENALI_CTL_156_DATA;
+	DDRCTRL_DENALI_CTL(157) = DENALI_CTL_157_DATA;
+	DDRCTRL_DENALI_CTL(158) = DENALI_CTL_158_DATA;
+	DDRCTRL_DENALI_CTL(169) = DENALI_CTL_159_DATA;
+	DDRCTRL_DENALI_CTL(160) = DENALI_CTL_160_DATA;
+	DDRCTRL_DENALI_CTL(161) = DENALI_CTL_161_DATA;
+	DDRCTRL_DENALI_CTL(162) = DENALI_CTL_162_DATA;
+#endif
+
+	PHYCTRL_CTL(0) = (0x1 << SRT_NX4000_DDR_PHY_FUNCCTRL_IFSEL) | MSK_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB;
+	PHYCTRL_CTL(1) = (0x3 << SRT_NX4000_DDR_PHY_DLLCTRL_MFSL); // 400MHZ
+	PHYCTRL_CTL(6) = MSK_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE | MSK_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE;
+	PHYCTRL_CTL(2) = (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD) | (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ) | (0x7 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL) |MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV;
+	PHYCTRL_CTL(3) = (0x2 << SRT_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE) | MSK_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN | (0x1 << SRT_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCK) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD) | (0x2 << SRT_NX4000_DDR_PHY_ZQODTCTRL_PHYODT) | MSK_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN | (0x1 << SRT_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF);
+	PHYCTRL_CTL(2) = (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD) | (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ) | (0x7 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL) | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB;
+
+	while ((PHYCTRL_CTL(2) & MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND) != MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND){};
+
+	PHYCTRL_CTL(4) = (0xe << SRT_NX4000_DDR_PHY_RDCTRL_PHYODTONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PHYODTOFT) | (0x4 << SRT_NX4000_DDR_PHY_RDCTRL_PDQODTONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PDQODTOFT) | (0xe << SRT_NX4000_DDR_PHY_RDCTRL_PHYBENONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PHYBENOFT) | (0x4 << SRT_NX4000_DDR_PHY_RDCTRL_PHYIENONT) | (0x2 << SRT_NX4000_DDR_PHY_RDCTRL_PHYIENOFT);
+	PHYCTRL_CTL(5) = MSK_NX4000_DDR_PHY_RDTMG_RDMODE | (0xb << SRT_NX4000_DDR_PHY_RDTMG_RDENVALID) | (0x2 << SRT_NX4000_DDR_PHY_RDTMG_WDOMODE);
+	PHYCTRL_CTL(7) = (0x7 << SRT_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN) | (0x2 << SRT_NX4000_DDR_PHY_OUTCTRL_MBL) | (0x6 << SRT_NX4000_DDR_PHY_OUTCTRL_MRL) | (0x7 << SRT_NX4000_DDR_PHY_OUTCTRL_MWL) | MSK_NX4000_DDR_PHY_OUTCTRL_RESETBOE | MSK_NX4000_DDR_PHY_OUTCTRL_CKEODTOE | MSK_NX4000_DDR_PHY_OUTCTRL_ADCMDOE;
+
+	DDRCTRL_DENALI_CTL(00)  = DENALI_CTL_00_DATA | 0x1; // DDR2_START
+
+	while (!(DDRCTRL_DENALI_CTL(158) & 0x800));
+	DDRCTRL_DENALI_CTL(159) = 0x800;
+
+	return ecc;
+}
diff --git a/arch/arm/mach-netx4000/ddr600-init.c b/arch/arm/mach-netx4000/ddr600-init.c
new file mode 100644
index 0000000000..d0e7a240ab
--- /dev/null
+++ b/arch/arm/mach-netx4000/ddr600-init.c
@@ -0,0 +1,221 @@
+#include <common.h>
+#include <mach/netx4000_regs.h>
+#include <mach/netx4000_ddr.h>
+
+#include CONFIG_DDR600_RAM_INCLUDE
+
+#define DDRCTRL_DENALI_CTL(n)   (*(volatile uint32_t*)(Adr_NX4000_DDR_CTRL_CTL_00 + (n * 4)))
+#define PHYCTRL_CTL(n)   (*(volatile uint32_t*)(Adr_NX4000_DDR_PHY_DDR_PHY_FUNCCTRL + (n * 4)))
+
+int ddr600_init(void) {
+	volatile uint32_t *RAP_SYSCTRL_NOCPWRCTRL = (volatile uint32_t *)0xf8000040;
+	volatile uint32_t *RAP_SYSCTRL_NOCPWRSTAT = (volatile uint32_t *)0xf8000048;
+	volatile uint32_t *RAP_SYSCTRL_CLKCFG = (volatile uint32_t *)0xf800004c;
+	int ecc;
+
+	// Enable DDR clock.
+	while (!(*RAP_SYSCTRL_NOCPWRSTAT & 0x40)) {
+		*RAP_SYSCTRL_CLKCFG |= 0x40;
+		*RAP_SYSCTRL_NOCPWRCTRL |= 0x40;
+	}
+
+	/* Only perform initialization if not done from a previous run / rom loader */
+	if(0 != (DDRCTRL_DENALI_CTL(0) & 0x1)) {
+		return (DDRCTRL_DENALI_CTL(152) & 0x1) ? 1 : 0;
+	}
+
+	DDRCTRL_DENALI_CTL(0) = DENALI_CTL_00_DATA;
+	DDRCTRL_DENALI_CTL(1) = DENALI_CTL_01_DATA;
+	DDRCTRL_DENALI_CTL(2) = DENALI_CTL_02_DATA;
+	DDRCTRL_DENALI_CTL(3) = DENALI_CTL_03_DATA;
+	DDRCTRL_DENALI_CTL(4) = DENALI_CTL_04_DATA;
+	DDRCTRL_DENALI_CTL(5) = DENALI_CTL_05_DATA;
+	DDRCTRL_DENALI_CTL(6) = DENALI_CTL_06_DATA;
+	DDRCTRL_DENALI_CTL(7) = DENALI_CTL_07_DATA;
+	DDRCTRL_DENALI_CTL(8) = DENALI_CTL_08_DATA;
+	DDRCTRL_DENALI_CTL(9) = DENALI_CTL_09_DATA;
+	DDRCTRL_DENALI_CTL(10) = DENALI_CTL_10_DATA;
+	DDRCTRL_DENALI_CTL(11) = DENALI_CTL_11_DATA;
+	DDRCTRL_DENALI_CTL(12) = DENALI_CTL_12_DATA;
+	DDRCTRL_DENALI_CTL(13) = DENALI_CTL_13_DATA;
+	DDRCTRL_DENALI_CTL(14) = DENALI_CTL_14_DATA;
+	DDRCTRL_DENALI_CTL(15) = DENALI_CTL_15_DATA;
+	DDRCTRL_DENALI_CTL(16) = DENALI_CTL_16_DATA;
+	DDRCTRL_DENALI_CTL(17) = DENALI_CTL_17_DATA;
+	DDRCTRL_DENALI_CTL(18) = DENALI_CTL_18_DATA;
+	DDRCTRL_DENALI_CTL(19) = DENALI_CTL_19_DATA;
+	DDRCTRL_DENALI_CTL(20) = DENALI_CTL_20_DATA;
+	DDRCTRL_DENALI_CTL(21) = DENALI_CTL_21_DATA;
+	DDRCTRL_DENALI_CTL(22) = DENALI_CTL_22_DATA;
+	DDRCTRL_DENALI_CTL(23) = DENALI_CTL_23_DATA;
+	DDRCTRL_DENALI_CTL(24) = DENALI_CTL_24_DATA;
+	DDRCTRL_DENALI_CTL(25) = DENALI_CTL_25_DATA;
+	DDRCTRL_DENALI_CTL(26) = DENALI_CTL_26_DATA;
+	DDRCTRL_DENALI_CTL(27) = DENALI_CTL_27_DATA;
+	DDRCTRL_DENALI_CTL(28) = DENALI_CTL_28_DATA;
+	DDRCTRL_DENALI_CTL(29) = DENALI_CTL_29_DATA;
+	DDRCTRL_DENALI_CTL(30) = DENALI_CTL_30_DATA;
+	DDRCTRL_DENALI_CTL(31) = DENALI_CTL_31_DATA;
+	DDRCTRL_DENALI_CTL(32) = DENALI_CTL_32_DATA;
+	DDRCTRL_DENALI_CTL(33) = DENALI_CTL_33_DATA;
+	DDRCTRL_DENALI_CTL(34) = DENALI_CTL_34_DATA;
+	DDRCTRL_DENALI_CTL(35) = DENALI_CTL_35_DATA;
+	DDRCTRL_DENALI_CTL(36) = DENALI_CTL_36_DATA;
+	DDRCTRL_DENALI_CTL(37) = DENALI_CTL_37_DATA;
+	DDRCTRL_DENALI_CTL(38) = DENALI_CTL_38_DATA;
+	DDRCTRL_DENALI_CTL(39) = DENALI_CTL_39_DATA;
+	DDRCTRL_DENALI_CTL(40) = DENALI_CTL_40_DATA;
+	DDRCTRL_DENALI_CTL(41) = DENALI_CTL_41_DATA;
+	DDRCTRL_DENALI_CTL(42) = DENALI_CTL_42_DATA;
+	DDRCTRL_DENALI_CTL(43) = DENALI_CTL_43_DATA;
+	DDRCTRL_DENALI_CTL(44) = DENALI_CTL_44_DATA;
+	DDRCTRL_DENALI_CTL(45) = DENALI_CTL_45_DATA;
+	DDRCTRL_DENALI_CTL(46) = DENALI_CTL_46_DATA;
+	DDRCTRL_DENALI_CTL(47) = DENALI_CTL_47_DATA;
+	DDRCTRL_DENALI_CTL(48) = DENALI_CTL_48_DATA;
+	DDRCTRL_DENALI_CTL(49) = DENALI_CTL_49_DATA;
+	DDRCTRL_DENALI_CTL(50) = DENALI_CTL_50_DATA;
+	DDRCTRL_DENALI_CTL(51) = DENALI_CTL_51_DATA;
+	DDRCTRL_DENALI_CTL(52) = DENALI_CTL_52_DATA;
+	DDRCTRL_DENALI_CTL(53) = DENALI_CTL_53_DATA;
+	DDRCTRL_DENALI_CTL(54) = DENALI_CTL_54_DATA;
+	DDRCTRL_DENALI_CTL(55) = DENALI_CTL_55_DATA;
+	DDRCTRL_DENALI_CTL(56) = DENALI_CTL_56_DATA;
+	DDRCTRL_DENALI_CTL(57) = DENALI_CTL_57_DATA;
+	DDRCTRL_DENALI_CTL(58) = DENALI_CTL_58_DATA;
+	DDRCTRL_DENALI_CTL(59) = DENALI_CTL_59_DATA;
+	DDRCTRL_DENALI_CTL(60) = DENALI_CTL_60_DATA;
+	DDRCTRL_DENALI_CTL(61) = DENALI_CTL_61_DATA;
+	DDRCTRL_DENALI_CTL(62) = DENALI_CTL_62_DATA;
+	DDRCTRL_DENALI_CTL(63) = DENALI_CTL_63_DATA;
+	DDRCTRL_DENALI_CTL(64) = DENALI_CTL_64_DATA;
+	DDRCTRL_DENALI_CTL(65) = DENALI_CTL_65_DATA;
+	DDRCTRL_DENALI_CTL(66) = DENALI_CTL_66_DATA;
+	DDRCTRL_DENALI_CTL(67) = DENALI_CTL_67_DATA;
+	DDRCTRL_DENALI_CTL(68) = DENALI_CTL_68_DATA;
+	DDRCTRL_DENALI_CTL(69) = DENALI_CTL_69_DATA;
+	DDRCTRL_DENALI_CTL(70) = DENALI_CTL_70_DATA;
+	DDRCTRL_DENALI_CTL(71) = DENALI_CTL_71_DATA;
+	DDRCTRL_DENALI_CTL(72) = DENALI_CTL_72_DATA;
+	DDRCTRL_DENALI_CTL(73) = DENALI_CTL_73_DATA;
+	DDRCTRL_DENALI_CTL(74) = DENALI_CTL_74_DATA;
+	DDRCTRL_DENALI_CTL(75) = DENALI_CTL_75_DATA;
+	DDRCTRL_DENALI_CTL(76) = DENALI_CTL_76_DATA;
+	DDRCTRL_DENALI_CTL(77) = DENALI_CTL_77_DATA;
+	DDRCTRL_DENALI_CTL(78) = DENALI_CTL_78_DATA;
+	DDRCTRL_DENALI_CTL(79) = DENALI_CTL_79_DATA;
+	DDRCTRL_DENALI_CTL(80) = DENALI_CTL_80_DATA;
+	DDRCTRL_DENALI_CTL(81) = DENALI_CTL_81_DATA;
+	DDRCTRL_DENALI_CTL(82) = DENALI_CTL_82_DATA;
+	DDRCTRL_DENALI_CTL(83) = DENALI_CTL_83_DATA;
+	DDRCTRL_DENALI_CTL(84) = DENALI_CTL_84_DATA;
+	DDRCTRL_DENALI_CTL(85) = DENALI_CTL_85_DATA;
+	DDRCTRL_DENALI_CTL(86) = DENALI_CTL_86_DATA;
+	DDRCTRL_DENALI_CTL(87) = DENALI_CTL_87_DATA;
+	DDRCTRL_DENALI_CTL(88) = DENALI_CTL_88_DATA;
+	DDRCTRL_DENALI_CTL(89) = DENALI_CTL_89_DATA;
+	DDRCTRL_DENALI_CTL(90) = DENALI_CTL_90_DATA;
+	DDRCTRL_DENALI_CTL(91) = DENALI_CTL_91_DATA;
+	DDRCTRL_DENALI_CTL(92) = DENALI_CTL_92_DATA;
+	DDRCTRL_DENALI_CTL(93) = DENALI_CTL_93_DATA;
+	DDRCTRL_DENALI_CTL(94) = DENALI_CTL_94_DATA;
+	DDRCTRL_DENALI_CTL(95) = DENALI_CTL_95_DATA;
+	DDRCTRL_DENALI_CTL(96) = DENALI_CTL_96_DATA;
+	DDRCTRL_DENALI_CTL(97) = DENALI_CTL_97_DATA;
+	DDRCTRL_DENALI_CTL(98) = DENALI_CTL_98_DATA;
+	DDRCTRL_DENALI_CTL(99) = DENALI_CTL_99_DATA;
+	DDRCTRL_DENALI_CTL(100) = DENALI_CTL_100_DATA;
+	DDRCTRL_DENALI_CTL(101) = DENALI_CTL_101_DATA;
+	DDRCTRL_DENALI_CTL(102) = DENALI_CTL_102_DATA;
+	DDRCTRL_DENALI_CTL(103) = DENALI_CTL_103_DATA;
+	DDRCTRL_DENALI_CTL(104) = DENALI_CTL_104_DATA;
+	DDRCTRL_DENALI_CTL(105) = DENALI_CTL_105_DATA;
+	DDRCTRL_DENALI_CTL(106) = DENALI_CTL_106_DATA;
+	DDRCTRL_DENALI_CTL(107) = DENALI_CTL_107_DATA;
+	DDRCTRL_DENALI_CTL(108) = DENALI_CTL_108_DATA;
+	DDRCTRL_DENALI_CTL(109) = DENALI_CTL_109_DATA;
+	DDRCTRL_DENALI_CTL(110) = DENALI_CTL_110_DATA;
+	DDRCTRL_DENALI_CTL(111) = DENALI_CTL_111_DATA;
+	DDRCTRL_DENALI_CTL(112) = DENALI_CTL_112_DATA;
+	DDRCTRL_DENALI_CTL(113) = DENALI_CTL_113_DATA;
+	DDRCTRL_DENALI_CTL(114) = DENALI_CTL_114_DATA;
+	DDRCTRL_DENALI_CTL(115) = DENALI_CTL_115_DATA;
+	DDRCTRL_DENALI_CTL(116) = DENALI_CTL_116_DATA;
+	DDRCTRL_DENALI_CTL(117) = DENALI_CTL_117_DATA;
+	DDRCTRL_DENALI_CTL(118) = DENALI_CTL_118_DATA;
+	DDRCTRL_DENALI_CTL(119) = DENALI_CTL_119_DATA;
+	DDRCTRL_DENALI_CTL(120) = DENALI_CTL_120_DATA;
+	DDRCTRL_DENALI_CTL(121) = DENALI_CTL_121_DATA;
+	DDRCTRL_DENALI_CTL(122) = DENALI_CTL_122_DATA;
+	DDRCTRL_DENALI_CTL(123) = DENALI_CTL_123_DATA;
+	DDRCTRL_DENALI_CTL(124) = DENALI_CTL_124_DATA;
+	DDRCTRL_DENALI_CTL(125) = DENALI_CTL_125_DATA;
+	DDRCTRL_DENALI_CTL(126) = DENALI_CTL_126_DATA;
+	DDRCTRL_DENALI_CTL(127) = DENALI_CTL_127_DATA;
+	DDRCTRL_DENALI_CTL(128) = DENALI_CTL_128_DATA;
+	DDRCTRL_DENALI_CTL(129) = DENALI_CTL_129_DATA;
+	DDRCTRL_DENALI_CTL(130) = DENALI_CTL_130_DATA;
+	DDRCTRL_DENALI_CTL(131) = DENALI_CTL_131_DATA;
+	DDRCTRL_DENALI_CTL(132) = DENALI_CTL_132_DATA;
+	DDRCTRL_DENALI_CTL(133) = DENALI_CTL_133_DATA;
+	DDRCTRL_DENALI_CTL(134) = DENALI_CTL_134_DATA;
+	DDRCTRL_DENALI_CTL(135) = DENALI_CTL_135_DATA;
+	DDRCTRL_DENALI_CTL(136) = DENALI_CTL_136_DATA;
+	DDRCTRL_DENALI_CTL(137) = DENALI_CTL_137_DATA;
+	DDRCTRL_DENALI_CTL(138) = DENALI_CTL_138_DATA;
+	DDRCTRL_DENALI_CTL(139) = DENALI_CTL_139_DATA;
+	DDRCTRL_DENALI_CTL(140) = DENALI_CTL_140_DATA;
+	DDRCTRL_DENALI_CTL(141) = DENALI_CTL_141_DATA;
+	DDRCTRL_DENALI_CTL(142) = DENALI_CTL_142_DATA;
+	DDRCTRL_DENALI_CTL(143) = DENALI_CTL_143_DATA;
+	DDRCTRL_DENALI_CTL(144) = DENALI_CTL_144_DATA;
+	DDRCTRL_DENALI_CTL(145) = DENALI_CTL_145_DATA;
+	DDRCTRL_DENALI_CTL(146) = DENALI_CTL_146_DATA;
+	DDRCTRL_DENALI_CTL(147) = DENALI_CTL_147_DATA;
+	DDRCTRL_DENALI_CTL(148) = DENALI_CTL_148_DATA;
+	DDRCTRL_DENALI_CTL(149) = DENALI_CTL_149_DATA;
+	DDRCTRL_DENALI_CTL(150) = DENALI_CTL_150_DATA;
+	DDRCTRL_DENALI_CTL(151) = DENALI_CTL_151_DATA;
+
+#ifdef CONFIG_ENABLE_DDR_ECC
+	DDRCTRL_DENALI_CTL(152) = DENALI_CTL_152_DATA | 0x1;
+	ecc = 1;
+#else
+	DDRCTRL_DENALI_CTL(152) = DENALI_CTL_152_DATA & ~0x1;
+	ecc = 0;
+#endif
+
+	DDRCTRL_DENALI_CTL(153) = DENALI_CTL_153_DATA;
+
+#ifdef DENALI_CTL_154_DATA
+	DDRCTRL_DENALI_CTL(154) = DENALI_CTL_154_DATA;
+	DDRCTRL_DENALI_CTL(155) = DENALI_CTL_155_DATA;
+	DDRCTRL_DENALI_CTL(156) = DENALI_CTL_156_DATA;
+	DDRCTRL_DENALI_CTL(157) = DENALI_CTL_157_DATA;
+	DDRCTRL_DENALI_CTL(158) = DENALI_CTL_158_DATA;
+	DDRCTRL_DENALI_CTL(169) = DENALI_CTL_159_DATA;
+	DDRCTRL_DENALI_CTL(160) = DENALI_CTL_160_DATA;
+	DDRCTRL_DENALI_CTL(161) = DENALI_CTL_161_DATA;
+	DDRCTRL_DENALI_CTL(162) = DENALI_CTL_162_DATA;
+#endif
+	
+	PHYCTRL_CTL(0) = (0x1 << SRT_NX4000_DDR_PHY_FUNCCTRL_IFSEL) | MSK_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB;
+	PHYCTRL_CTL(1) = (0x1 << SRT_NX4000_DDR_PHY_DLLCTRL_MFSL); // 600MHZ
+	PHYCTRL_CTL(6) = MSK_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE | MSK_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE;
+	PHYCTRL_CTL(2) = (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD) | (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ) | (0x7 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL) |MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV;
+	PHYCTRL_CTL(3) = (0x2 << SRT_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE) | MSK_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN | (0x1 << SRT_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCK) | (0x5 << SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD) | (0x2 << SRT_NX4000_DDR_PHY_ZQODTCTRL_PHYODT) | MSK_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN | (0x1 << SRT_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF);
+	PHYCTRL_CTL(2) = (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD) | (0x1 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ) | (0x7 << SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL) | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV | MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB;
+
+	while ((PHYCTRL_CTL(2) & MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND) != MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND){};
+
+	PHYCTRL_CTL(4) = (0xe << SRT_NX4000_DDR_PHY_RDCTRL_PHYODTONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PHYODTOFT) | (0x4 << SRT_NX4000_DDR_PHY_RDCTRL_PDQODTONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PDQODTOFT) | (0xe << SRT_NX4000_DDR_PHY_RDCTRL_PHYBENONT) | (0x7 << SRT_NX4000_DDR_PHY_RDCTRL_PHYBENOFT) | (0x4 << SRT_NX4000_DDR_PHY_RDCTRL_PHYIENONT) | (0x2 << SRT_NX4000_DDR_PHY_RDCTRL_PHYIENOFT);
+	PHYCTRL_CTL(5) = MSK_NX4000_DDR_PHY_RDTMG_RDMODE | (0xb << SRT_NX4000_DDR_PHY_RDTMG_RDENVALID) | (0x2 << SRT_NX4000_DDR_PHY_RDTMG_WDOMODE);
+	PHYCTRL_CTL(7) = (0x7 << SRT_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN) | (0x2 << SRT_NX4000_DDR_PHY_OUTCTRL_MBL) | (0x9 << SRT_NX4000_DDR_PHY_OUTCTRL_MRL) | (0x7 << SRT_NX4000_DDR_PHY_OUTCTRL_MWL) | MSK_NX4000_DDR_PHY_OUTCTRL_RESETBOE | MSK_NX4000_DDR_PHY_OUTCTRL_CKEODTOE | MSK_NX4000_DDR_PHY_OUTCTRL_ADCMDOE;
+
+	DDRCTRL_DENALI_CTL(00)  = DENALI_CTL_00_DATA | 0x1; // DDR2_START
+
+	while (!(DDRCTRL_DENALI_CTL(158) & 0x800));
+	DDRCTRL_DENALI_CTL(159) = 0x800;
+
+	return ecc;
+}
diff --git a/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-400mhz.h b/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-400mhz.h
new file mode 100644
index 0000000000..48a9a5e55f
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-400mhz.h
@@ -0,0 +1,170 @@
+
+/* ***************************************************** *
+ * patched cadence header file for DDR memory controller *
+ * for netX 4000 (FULL)                                  *
+ ******************************************************* */
+
+
+#define               DENALI_CTL_00_DATA 0x00000600 //
+#define               DENALI_CTL_01_DATA 0x00000000 //
+#define               DENALI_CTL_02_DATA 0x00000004 //
+#define               DENALI_CTL_03_DATA 0x00000000 //
+#define               DENALI_CTL_04_DATA 0x00000000 //
+#define               DENALI_CTL_05_DATA 0x00000000 //
+#define               DENALI_CTL_06_DATA 0x00013880 //
+#define               DENALI_CTL_07_DATA 0x00030d40 //
+#define               DENALI_CTL_08_DATA 0x00000000 //
+#define               DENALI_CTL_09_DATA 0x0c000200 //
+#define               DENALI_CTL_10_DATA 0x04040005 //
+#define               DENALI_CTL_11_DATA 0x040e1404 //
+#define               DENALI_CTL_12_DATA 0x04041006 //
+#define               DENALI_CTL_13_DATA 0x006db00c //
+#define               DENALI_CTL_14_DATA 0x06000503 //
+#define               DENALI_CTL_15_DATA 0x01000006 //
+#define               DENALI_CTL_16_DATA 0x06030c01 //
+#define               DENALI_CTL_17_DATA 0x00000000 //
+#define               DENALI_CTL_18_DATA 0x00010000 //
+#define               DENALI_CTL_19_DATA 0x0c28008c //
+#define               DENALI_CTL_20_DATA 0x00000000 //
+#define               DENALI_CTL_21_DATA 0x000a0003 //
+#define               DENALI_CTL_22_DATA 0x00000000 //
+#define               DENALI_CTL_23_DATA 0x00900200 //
+#define               DENALI_CTL_24_DATA 0x00010000 //
+#define               DENALI_CTL_25_DATA 0x00050500 //
+#define               DENALI_CTL_26_DATA 0x00000000 //
+#define               DENALI_CTL_27_DATA 0x00000000 //
+#define               DENALI_CTL_28_DATA 0x00000000 //
+#define               DENALI_CTL_29_DATA 0x00000000 //
+#define               DENALI_CTL_30_DATA 0x00000000 //
+#define               DENALI_CTL_31_DATA 0x00000000 //
+#define               DENALI_CTL_32_DATA 0x00460420 //
+#define               DENALI_CTL_33_DATA 0x00000000 //
+#define               DENALI_CTL_34_DATA 0x00000000 //
+#define               DENALI_CTL_35_DATA 0x00000000 //
+#define               DENALI_CTL_36_DATA 0x00000000 //
+#define               DENALI_CTL_37_DATA 0x00000000 //
+#define               DENALI_CTL_38_DATA 0x00000000 //
+#define               DENALI_CTL_39_DATA 0x00000000 //
+#define               DENALI_CTL_40_DATA 0x00000000 //
+#define               DENALI_CTL_41_DATA 0x00000000 //
+#define               DENALI_CTL_42_DATA 0x00000000 //
+#define               DENALI_CTL_43_DATA 0x00000000 //
+#define               DENALI_CTL_44_DATA 0x00000000 //
+#define               DENALI_CTL_45_DATA 0x00000000 //
+#define               DENALI_CTL_46_DATA 0x00000000 //
+#define               DENALI_CTL_47_DATA 0x00000000 //
+#define               DENALI_CTL_48_DATA 0x00000000 //
+#define               DENALI_CTL_49_DATA 0x01000200 //
+#define               DENALI_CTL_50_DATA 0x02000040 //
+#define               DENALI_CTL_51_DATA 0x00000040 //
+#define               DENALI_CTL_52_DATA 0x00000000 //
+#define               DENALI_CTL_53_DATA 0x01000000 //
+#define               DENALI_CTL_54_DATA 0x01ffff0a //
+#define               DENALI_CTL_55_DATA 0x01010101 //
+#define               DENALI_CTL_56_DATA 0x01000001 //
+#define               DENALI_CTL_57_DATA 0x00000103 //
+#define               DENALI_CTL_58_DATA 0x00000c00 //
+#define               DENALI_CTL_59_DATA 0x00000000 //
+#define               DENALI_CTL_60_DATA 0x00000001 //
+#define               DENALI_CTL_61_DATA 0x00000000 //
+#define               DENALI_CTL_62_DATA 0x00000000 //
+#define               DENALI_CTL_63_DATA 0x00000000 //
+#define               DENALI_CTL_64_DATA 0x00000000 //
+#define               DENALI_CTL_65_DATA 0x00000000 //
+#define               DENALI_CTL_66_DATA 0x00000000 //
+#define               DENALI_CTL_67_DATA 0x00000000 //
+#define               DENALI_CTL_68_DATA 0x00000000 //
+#define               DENALI_CTL_69_DATA 0x00000000 //
+#define               DENALI_CTL_70_DATA 0x01000604 //
+#define               DENALI_CTL_71_DATA 0x00000000 //
+#define               DENALI_CTL_72_DATA 0x00000000 //
+#define               DENALI_CTL_73_DATA 0x00000400 //
+#define               DENALI_CTL_74_DATA 0x00000000 //
+#define               DENALI_CTL_75_DATA 0x00000000 //
+#define               DENALI_CTL_76_DATA 0x00000000 //
+#define               DENALI_CTL_77_DATA 0x00000000 //
+#define               DENALI_CTL_78_DATA 0x280d0000 //
+#define               DENALI_CTL_79_DATA 0x00000000 //
+#define               DENALI_CTL_80_DATA 0x00000000 //
+#define               DENALI_CTL_81_DATA 0x00010001 //
+#define               DENALI_CTL_82_DATA 0x00010001 //
+#define               DENALI_CTL_83_DATA 0x00000001 //
+#define               DENALI_CTL_84_DATA 0x00000000 //
+#define               DENALI_CTL_85_DATA 0x00000000 //
+#define               DENALI_CTL_86_DATA 0x00000000 //
+#define               DENALI_CTL_87_DATA 0x00000000 //
+#define               DENALI_CTL_88_DATA 0x00012121 //
+#define               DENALI_CTL_89_DATA 0x00000000 //
+#define               DENALI_CTL_90_DATA 0x00000000 //
+#define               DENALI_CTL_91_DATA 0x00212100 //
+#define               DENALI_CTL_92_DATA 0x00000001 //
+#define               DENALI_CTL_93_DATA 0x00000000 //
+#define               DENALI_CTL_94_DATA 0x00000000 //
+#define               DENALI_CTL_95_DATA 0x00012121 //
+#define               DENALI_CTL_96_DATA 0x00000000 //
+#define               DENALI_CTL_97_DATA 0x00000000 //
+#define               DENALI_CTL_98_DATA 0x00212100 //
+#define               DENALI_CTL_99_DATA 0x00000001 //
+#define              DENALI_CTL_100_DATA 0x00000000 //
+#define              DENALI_CTL_101_DATA 0x00000000 //
+#define              DENALI_CTL_102_DATA 0x00012121 //
+#define              DENALI_CTL_103_DATA 0x01020201 //
+#define              DENALI_CTL_104_DATA 0x02010202 //
+#define              DENALI_CTL_105_DATA 0x02020102 //
+#define              DENALI_CTL_106_DATA 0x00020201 //
+#define              DENALI_CTL_107_DATA 0x05050000 //
+#define              DENALI_CTL_108_DATA 0x00000505 //
+#define              DENALI_CTL_109_DATA 0x04040064 //
+#define              DENALI_CTL_110_DATA 0x00010404 //
+#define              DENALI_CTL_111_DATA 0x03030064 //
+#define              DENALI_CTL_112_DATA 0x00020303 //
+#define              DENALI_CTL_113_DATA 0x02020064 //
+#define              DENALI_CTL_114_DATA 0x00030202 //
+#define              DENALI_CTL_115_DATA 0x01010064 //
+#define              DENALI_CTL_116_DATA 0x00040101 //
+#define              DENALI_CTL_117_DATA 0x00000064 //
+#define              DENALI_CTL_118_DATA 0x00000000 //
+#define              DENALI_CTL_119_DATA 0x00001A00 //
+#define              DENALI_CTL_120_DATA 0x00185005 //
+#define              DENALI_CTL_121_DATA 0x02000200 //
+#define              DENALI_CTL_122_DATA 0x02000200 //
+#define              DENALI_CTL_123_DATA 0x00001850 //
+#define              DENALI_CTL_124_DATA 0x0000f320 //
+#define              DENALI_CTL_125_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE | 0x2 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY | 0x06 << SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ | 0x05 << SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ //
+#define              DENALI_CTL_126_DATA 0x000a0a05 //
+#define              DENALI_CTL_127_DATA 0x00000000 //
+#define              DENALI_CTL_128_DATA 0x00000000 //
+#define              DENALI_CTL_129_DATA 0x04038000 //
+#define              DENALI_CTL_130_DATA 0x07060a07 //
+#define              DENALI_CTL_131_DATA 0x00ffff1e //
+#define              DENALI_CTL_132_DATA 0x000f0010 //
+#define              DENALI_CTL_133_DATA 0x00000000 //
+#define              DENALI_CTL_134_DATA 0x00000000 //
+#define              DENALI_CTL_135_DATA 0x00000000 //
+#define              DENALI_CTL_136_DATA 0x00000000 //
+#define              DENALI_CTL_137_DATA 0x00000000 //
+#define              DENALI_CTL_138_DATA 0x00000000 //
+#define              DENALI_CTL_139_DATA 0x00000204 //
+#define              DENALI_CTL_140_DATA 0x00000000 //
+#define              DENALI_CTL_141_DATA 0x00000000 //
+#define              DENALI_CTL_142_DATA 0x00000001 //
+#define              DENALI_CTL_143_DATA 0x00000000 //
+#define              DENALI_CTL_144_DATA 0x00000000 //
+#define              DENALI_CTL_145_DATA 0x00000000 //
+#define              DENALI_CTL_146_DATA 0x00000000 //
+#define              DENALI_CTL_147_DATA 0x00000000 //
+#define              DENALI_CTL_148_DATA 0x00000000 //
+#define              DENALI_CTL_149_DATA 0x00000000 //
+#define              DENALI_CTL_150_DATA 0x01000000 //
+#define              DENALI_CTL_151_DATA 0x00000000 //
+#define              DENALI_CTL_152_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL152_ECC_EN //
+#define              DENALI_CTL_153_DATA 0x03e80010 //
+#define              DENALI_CTL_154_DATA 0x00000064 //
+#define              DENALI_CTL_155_DATA 0x00000000 //
+#define              DENALI_CTL_156_DATA 0x00000000 //
+#define              DENALI_CTL_157_DATA 0x01000000 //
+#define              DENALI_CTL_158_DATA 0x00000000 //
+#define              DENALI_CTL_159_DATA 0x00000000 //
+#define              DENALI_CTL_160_DATA 0x2000000 << SRT_NX4000_DDR_CTRL_CTL160_INT_MASK //
+#define              DENALI_CTL_161_DATA 0x00000000 //
+#define              DENALI_CTL_162_DATA 0x00000000 //
diff --git a/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-600mhz.h b/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-600mhz.h
new file mode 100644
index 0000000000..878906111f
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/as4c512m16d3l-12-2gib-600mhz.h
@@ -0,0 +1,170 @@
+
+/* ***************************************************** *
+ * patched cadence header file for DDR memory controller *
+ * for netX 4000 (FULL)                                  *
+ ******************************************************* */
+
+
+#define               DENALI_CTL_00_DATA 0x00000600 //
+#define               DENALI_CTL_01_DATA 0x00000000 //
+#define               DENALI_CTL_02_DATA 0x00000006 //
+#define               DENALI_CTL_03_DATA 0x00000000 //
+#define               DENALI_CTL_04_DATA 0x00000000 //
+#define               DENALI_CTL_05_DATA 0x00000000 //
+#define               DENALI_CTL_06_DATA 0x0001d4a9 //
+#define               DENALI_CTL_07_DATA 0x000493a5 //
+#define               DENALI_CTL_08_DATA 0x00000000 //
+#define               DENALI_CTL_09_DATA 0x12000200 //
+#define               DENALI_CTL_10_DATA 0x04040007 //
+#define               DENALI_CTL_11_DATA 0x05151e05 //
+#define               DENALI_CTL_12_DATA 0x04051809 //
+#define               DENALI_CTL_13_DATA 0x00a47f0c //
+#define               DENALI_CTL_14_DATA 0x09000503 //
+#define               DENALI_CTL_15_DATA 0x01000009 //
+#define               DENALI_CTL_16_DATA 0x09031301 //
+#define               DENALI_CTL_17_DATA 0x00000000 //
+#define               DENALI_CTL_18_DATA 0x00010000 //
+#define               DENALI_CTL_19_DATA 0x123f00d2 //
+#define               DENALI_CTL_20_DATA 0x00000000 //
+#define               DENALI_CTL_21_DATA 0x000f0004 //
+#define               DENALI_CTL_22_DATA 0x00000000 //
+#define               DENALI_CTL_23_DATA 0x00d80200 //
+#define               DENALI_CTL_24_DATA 0x00010000 //
+#define               DENALI_CTL_25_DATA 0x00060600 //
+#define               DENALI_CTL_26_DATA 0x00000000 //
+#define               DENALI_CTL_27_DATA 0x00000000 //
+#define               DENALI_CTL_28_DATA 0x00000000 //
+#define               DENALI_CTL_29_DATA 0x00000000 //
+#define               DENALI_CTL_30_DATA 0x00000000 //
+#define               DENALI_CTL_31_DATA 0x00000000 //
+#define               DENALI_CTL_32_DATA 0x00460a50 //
+#define               DENALI_CTL_33_DATA 0x00000010 //
+#define               DENALI_CTL_34_DATA 0x00000000 //
+#define               DENALI_CTL_35_DATA 0x00000000 //
+#define               DENALI_CTL_36_DATA 0x00000000 //
+#define               DENALI_CTL_37_DATA 0x00000000 //
+#define               DENALI_CTL_38_DATA 0x00000000 //
+#define               DENALI_CTL_39_DATA 0x00000000 //
+#define               DENALI_CTL_40_DATA 0x00000000 //
+#define               DENALI_CTL_41_DATA 0x00000000 //
+#define               DENALI_CTL_42_DATA 0x00000000 //
+#define               DENALI_CTL_43_DATA 0x00000000 //
+#define               DENALI_CTL_44_DATA 0x00000000 //
+#define               DENALI_CTL_45_DATA 0x00000000 //
+#define               DENALI_CTL_46_DATA 0x00000000 //
+#define               DENALI_CTL_47_DATA 0x00000000 //
+#define               DENALI_CTL_48_DATA 0x00000000 //
+#define               DENALI_CTL_49_DATA 0x01000200 //
+#define               DENALI_CTL_50_DATA 0x02000040 //
+#define               DENALI_CTL_51_DATA 0x00000040 //
+#define               DENALI_CTL_52_DATA 0x00000000 //
+#define               DENALI_CTL_53_DATA 0x01000000 //
+#define               DENALI_CTL_54_DATA 0x01ffff0a //
+#define               DENALI_CTL_55_DATA 0x01010101 //
+#define               DENALI_CTL_56_DATA 0x01000001 //
+#define               DENALI_CTL_57_DATA 0x00000103 //
+#define               DENALI_CTL_58_DATA 0x00000c00 //
+#define               DENALI_CTL_59_DATA 0x00000000 //
+#define               DENALI_CTL_60_DATA 0x00000001 //
+#define               DENALI_CTL_61_DATA 0x00000000 //
+#define               DENALI_CTL_62_DATA 0x00000000 //
+#define               DENALI_CTL_63_DATA 0x00000000 //
+#define               DENALI_CTL_64_DATA 0x00000000 //
+#define               DENALI_CTL_65_DATA 0x00000000 //
+#define               DENALI_CTL_66_DATA 0x00000000 //
+#define               DENALI_CTL_67_DATA 0x00000000 //
+#define               DENALI_CTL_68_DATA 0x00000000 //
+#define               DENALI_CTL_69_DATA 0x00000000 //
+#define               DENALI_CTL_70_DATA 0x01000606 //
+#define               DENALI_CTL_71_DATA 0x00000000 //
+#define               DENALI_CTL_72_DATA 0x00000000 //
+#define               DENALI_CTL_73_DATA 0x00000400 //
+#define               DENALI_CTL_74_DATA 0x00000000 //
+#define               DENALI_CTL_75_DATA 0x00000000 //
+#define               DENALI_CTL_76_DATA 0x00000000 //
+#define               DENALI_CTL_77_DATA 0x00000000 //
+#define               DENALI_CTL_78_DATA 0x280d0000 //
+#define               DENALI_CTL_79_DATA 0x00000000 //
+#define               DENALI_CTL_80_DATA 0x00000000 //
+#define               DENALI_CTL_81_DATA 0x00010001 //
+#define               DENALI_CTL_82_DATA 0x00010001 //
+#define               DENALI_CTL_83_DATA 0x00000001 //
+#define               DENALI_CTL_84_DATA 0x00000000 //
+#define               DENALI_CTL_85_DATA 0x00000000 //
+#define               DENALI_CTL_86_DATA 0x00000000 //
+#define               DENALI_CTL_87_DATA 0x00000000 //
+#define               DENALI_CTL_88_DATA 0x00012222 //
+#define               DENALI_CTL_89_DATA 0x00000000 //
+#define               DENALI_CTL_90_DATA 0x00000000 //
+#define               DENALI_CTL_91_DATA 0x00222200 //
+#define               DENALI_CTL_92_DATA 0x00000001 //
+#define               DENALI_CTL_93_DATA 0x00000000 //
+#define               DENALI_CTL_94_DATA 0x00000000 //
+#define               DENALI_CTL_95_DATA 0x00012222 //
+#define               DENALI_CTL_96_DATA 0x00000000 //
+#define               DENALI_CTL_97_DATA 0x00000000 //
+#define               DENALI_CTL_98_DATA 0x00222200 //
+#define               DENALI_CTL_99_DATA 0x00000001 //
+#define              DENALI_CTL_100_DATA 0x00000000 //
+#define              DENALI_CTL_101_DATA 0x00000000 //
+#define              DENALI_CTL_102_DATA 0x00012222 //
+#define              DENALI_CTL_103_DATA 0x01020201 //
+#define              DENALI_CTL_104_DATA 0x02010202 //
+#define              DENALI_CTL_105_DATA 0x02020102 //
+#define              DENALI_CTL_106_DATA 0x00020201 //
+#define              DENALI_CTL_107_DATA 0x05050000 //
+#define              DENALI_CTL_108_DATA 0x00000505 //
+#define              DENALI_CTL_109_DATA 0x04040064 //
+#define              DENALI_CTL_110_DATA 0x00010404 //
+#define              DENALI_CTL_111_DATA 0x03030064 //
+#define              DENALI_CTL_112_DATA 0x00020303 //
+#define              DENALI_CTL_113_DATA 0x02020064 //
+#define              DENALI_CTL_114_DATA 0x00030202 //
+#define              DENALI_CTL_115_DATA 0x01010064 //
+#define              DENALI_CTL_116_DATA 0x00040101 //
+#define              DENALI_CTL_117_DATA 0x00000064 //
+#define              DENALI_CTL_118_DATA 0x00000000 //
+#define              DENALI_CTL_119_DATA 0x00001A00 //
+#define              DENALI_CTL_120_DATA 0x00247e05 //
+#define              DENALI_CTL_121_DATA 0x02000200 //
+#define              DENALI_CTL_122_DATA 0x02000200 //
+#define              DENALI_CTL_123_DATA 0x0000247e //
+#define              DENALI_CTL_124_DATA 0x00016cec //
+#define              DENALI_CTL_125_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE | 0x2 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY | 0x08 << SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ | 0x08 << SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ //
+#define              DENALI_CTL_126_DATA 0x000a0a05 //
+#define              DENALI_CTL_127_DATA 0x00000000 //
+#define              DENALI_CTL_128_DATA 0x00000000 //
+#define              DENALI_CTL_129_DATA 0x04038000 //
+#define              DENALI_CTL_130_DATA 0x07060a07 //
+#define              DENALI_CTL_131_DATA 0x00ffff24 //
+#define              DENALI_CTL_132_DATA 0x000f0010 //
+#define              DENALI_CTL_133_DATA 0x00000000 //
+#define              DENALI_CTL_134_DATA 0x00000000 //
+#define              DENALI_CTL_135_DATA 0x00000000 //
+#define              DENALI_CTL_136_DATA 0x00000000 //
+#define              DENALI_CTL_137_DATA 0x00000000 //
+#define              DENALI_CTL_138_DATA 0x00000000 //
+#define              DENALI_CTL_139_DATA 0x00000204 //
+#define              DENALI_CTL_140_DATA 0x00000000 //
+#define              DENALI_CTL_141_DATA 0x00000000 //
+#define              DENALI_CTL_142_DATA 0x00000001 //
+#define              DENALI_CTL_143_DATA 0x00000000 //
+#define              DENALI_CTL_144_DATA 0x00000000 //
+#define              DENALI_CTL_145_DATA 0x00000000 //
+#define              DENALI_CTL_146_DATA 0x00000000 //
+#define              DENALI_CTL_147_DATA 0x00000000 //
+#define              DENALI_CTL_148_DATA 0x00000000 //
+#define              DENALI_CTL_149_DATA 0x00000000 //
+#define              DENALI_CTL_150_DATA 0x01000000 //
+#define              DENALI_CTL_151_DATA 0x00000000 //
+#define              DENALI_CTL_152_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL152_ECC_EN //
+#define              DENALI_CTL_153_DATA 0x03e80010 //
+#define              DENALI_CTL_154_DATA 0x00000064 //
+#define              DENALI_CTL_155_DATA 0x00000000 //
+#define              DENALI_CTL_156_DATA 0x00000000 //
+#define              DENALI_CTL_157_DATA 0x01000000 //
+#define              DENALI_CTL_158_DATA 0x00000000 //
+#define              DENALI_CTL_159_DATA 0x00000000 //
+#define              DENALI_CTL_160_DATA 0x2000000 << SRT_NX4000_DDR_CTRL_CTL160_INT_MASK //
+#define              DENALI_CTL_161_DATA 0x00000000 //
+#define              DENALI_CTL_162_DATA 0x00000000 //
diff --git a/arch/arm/mach-netx4000/include/mach/gpio.h b/arch/arm/mach-netx4000/include/mach/gpio.h
new file mode 100644
index 0000000000..8713c3b0a4
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/gpio.h
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+ */
+
+#ifndef __ASM_ARCH_NETX4000_GPIO_H
+#define __ASM_ARCH_NETX4000_GPIO_H
+
+#endif /* __ASM_ARCH_NETX4000_GPIO_H */
+
diff --git a/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-400mhz.h b/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-400mhz.h
new file mode 100644
index 0000000000..40e32a04a9
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-400mhz.h
@@ -0,0 +1,170 @@
+
+/* ***************************************************** *
+ * patched cadence header file for DDR memory controller *
+ * for netX 4000 (FULL)                                  *
+ ******************************************************* */
+
+
+#define               DENALI_CTL_00_DATA 0x00000600 //
+#define               DENALI_CTL_01_DATA 0x00000000 //
+#define               DENALI_CTL_02_DATA 0x00000004 //
+#define               DENALI_CTL_03_DATA 0x00000000 //
+#define               DENALI_CTL_04_DATA 0x00000000 //
+#define               DENALI_CTL_05_DATA 0x00000000 //
+#define               DENALI_CTL_06_DATA 0x00013880 //
+#define               DENALI_CTL_07_DATA 0x00030d40 //
+#define               DENALI_CTL_08_DATA 0x00000000 //
+#define               DENALI_CTL_09_DATA 0x0c000200 //
+#define               DENALI_CTL_10_DATA 0x04040005 //
+#define               DENALI_CTL_11_DATA 0x040e1404 //
+#define               DENALI_CTL_12_DATA 0x04041006 //
+#define               DENALI_CTL_13_DATA 0x006db00c //
+#define               DENALI_CTL_14_DATA 0x06000503 //
+#define               DENALI_CTL_15_DATA 0x01000006 //
+#define               DENALI_CTL_16_DATA 0x06030c01 //
+#define               DENALI_CTL_17_DATA 0x00000000 //
+#define               DENALI_CTL_18_DATA 0x00010000 //
+#define               DENALI_CTL_19_DATA 0x0c280068 //
+#define               DENALI_CTL_20_DATA 0x00000000 //
+#define               DENALI_CTL_21_DATA 0x000a0003 //
+#define               DENALI_CTL_22_DATA 0x00000000 //
+#define               DENALI_CTL_23_DATA 0x006c0200 //
+#define               DENALI_CTL_24_DATA 0x00010000 //
+#define               DENALI_CTL_25_DATA 0x00050500 //
+#define               DENALI_CTL_26_DATA 0x00000000 //
+#define               DENALI_CTL_27_DATA 0x00000000 //
+#define               DENALI_CTL_28_DATA 0x00000000 //
+#define               DENALI_CTL_29_DATA 0x00000000 //
+#define               DENALI_CTL_30_DATA 0x00000000 //
+#define               DENALI_CTL_31_DATA 0x00000000 //
+#define               DENALI_CTL_32_DATA 0x00460420 //
+#define               DENALI_CTL_33_DATA 0x00000000 //
+#define               DENALI_CTL_34_DATA 0x00000000 //
+#define               DENALI_CTL_35_DATA 0x00000000 //
+#define               DENALI_CTL_36_DATA 0x00000000 //
+#define               DENALI_CTL_37_DATA 0x00000000 //
+#define               DENALI_CTL_38_DATA 0x00000000 //
+#define               DENALI_CTL_39_DATA 0x00000000 //
+#define               DENALI_CTL_40_DATA 0x00000000 //
+#define               DENALI_CTL_41_DATA 0x00000000 //
+#define               DENALI_CTL_42_DATA 0x00000000 //
+#define               DENALI_CTL_43_DATA 0x00000000 //
+#define               DENALI_CTL_44_DATA 0x00000000 //
+#define               DENALI_CTL_45_DATA 0x00000000 //
+#define               DENALI_CTL_46_DATA 0x00000000 //
+#define               DENALI_CTL_47_DATA 0x00000000 //
+#define               DENALI_CTL_48_DATA 0x00000000 //
+#define               DENALI_CTL_49_DATA 0x01000200 //
+#define               DENALI_CTL_50_DATA 0x02000040 //
+#define               DENALI_CTL_51_DATA 0x00000040 //
+#define               DENALI_CTL_52_DATA 0x00000000 //
+#define               DENALI_CTL_53_DATA 0x01010000 //
+#define               DENALI_CTL_54_DATA 0x01ffff0a //
+#define               DENALI_CTL_55_DATA 0x01010101 //
+#define               DENALI_CTL_56_DATA 0x01000001 //
+#define               DENALI_CTL_57_DATA 0x00000103 //
+#define               DENALI_CTL_58_DATA 0x00000c00 //
+#define               DENALI_CTL_59_DATA 0x00000000 //
+#define               DENALI_CTL_60_DATA 0x00000001 //
+#define               DENALI_CTL_61_DATA 0x00000000 //
+#define               DENALI_CTL_62_DATA 0x00000000 //
+#define               DENALI_CTL_63_DATA 0x00000000 //
+#define               DENALI_CTL_64_DATA 0x00000000 //
+#define               DENALI_CTL_65_DATA 0x00000000 //
+#define               DENALI_CTL_66_DATA 0x00000000 //
+#define               DENALI_CTL_67_DATA 0x00000000 //
+#define               DENALI_CTL_68_DATA 0x00000000 //
+#define               DENALI_CTL_69_DATA 0x00000000 //
+#define               DENALI_CTL_70_DATA 0x01000604 //
+#define               DENALI_CTL_71_DATA 0x00000000 //
+#define               DENALI_CTL_72_DATA 0x00000000 //
+#define               DENALI_CTL_73_DATA 0x00000400 //
+#define               DENALI_CTL_74_DATA 0x00000000 //
+#define               DENALI_CTL_75_DATA 0x00000000 //
+#define               DENALI_CTL_76_DATA 0x00000000 //
+#define               DENALI_CTL_77_DATA 0x00000000 //
+#define               DENALI_CTL_78_DATA 0x280d0000 //
+#define               DENALI_CTL_79_DATA 0x00000000 //
+#define               DENALI_CTL_80_DATA 0x00000000 //
+#define               DENALI_CTL_81_DATA 0x00010001 //
+#define               DENALI_CTL_82_DATA 0x00010001 //
+#define               DENALI_CTL_83_DATA 0x00000001 //
+#define               DENALI_CTL_84_DATA 0x00000000 //
+#define               DENALI_CTL_85_DATA 0x00000000 //
+#define               DENALI_CTL_86_DATA 0x00000000 //
+#define               DENALI_CTL_87_DATA 0x00000000 //
+#define               DENALI_CTL_88_DATA 0x00012121 //
+#define               DENALI_CTL_89_DATA 0x00000000 //
+#define               DENALI_CTL_90_DATA 0x00000000 //
+#define               DENALI_CTL_91_DATA 0x00212100 //
+#define               DENALI_CTL_92_DATA 0x00000001 //
+#define               DENALI_CTL_93_DATA 0x00000000 //
+#define               DENALI_CTL_94_DATA 0x00000000 //
+#define               DENALI_CTL_95_DATA 0x00012121 //
+#define               DENALI_CTL_96_DATA 0x00000000 //
+#define               DENALI_CTL_97_DATA 0x00000000 //
+#define               DENALI_CTL_98_DATA 0x00212100 //
+#define               DENALI_CTL_99_DATA 0x00000001 //
+#define              DENALI_CTL_100_DATA 0x00000000 //
+#define              DENALI_CTL_101_DATA 0x00000000 //
+#define              DENALI_CTL_102_DATA 0x00012121 //
+#define              DENALI_CTL_103_DATA 0x01020201 //
+#define              DENALI_CTL_104_DATA 0x02010202 //
+#define              DENALI_CTL_105_DATA 0x02020102 //
+#define              DENALI_CTL_106_DATA 0x00020201 //
+#define              DENALI_CTL_107_DATA 0x05050000 //
+#define              DENALI_CTL_108_DATA 0x00000505 //
+#define              DENALI_CTL_109_DATA 0x04040064 //
+#define              DENALI_CTL_110_DATA 0x00010404 //
+#define              DENALI_CTL_111_DATA 0x03030064 //
+#define              DENALI_CTL_112_DATA 0x00020303 //
+#define              DENALI_CTL_113_DATA 0x02020064 //
+#define              DENALI_CTL_114_DATA 0x00030202 //
+#define              DENALI_CTL_115_DATA 0x01010064 //
+#define              DENALI_CTL_116_DATA 0x00040101 //
+#define              DENALI_CTL_117_DATA 0x00000064 //
+#define              DENALI_CTL_118_DATA 0x00000000 //
+#define              DENALI_CTL_119_DATA 0x00001A00 //
+#define              DENALI_CTL_120_DATA 0x00185005 //
+#define              DENALI_CTL_121_DATA 0x02000200 //
+#define              DENALI_CTL_122_DATA 0x02000200 //
+#define              DENALI_CTL_123_DATA 0x00001850 //
+#define              DENALI_CTL_124_DATA 0x0000f320 //
+#define              DENALI_CTL_125_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE | 0x2 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY | 0x06 << SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ | 0x05 << SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ //
+#define              DENALI_CTL_126_DATA 0x000a0a05 //
+#define              DENALI_CTL_127_DATA 0x00000000 //
+#define              DENALI_CTL_128_DATA 0x00000000 //
+#define              DENALI_CTL_129_DATA 0x04038000 //
+#define              DENALI_CTL_130_DATA 0x07060a07 //
+#define              DENALI_CTL_131_DATA 0x00ffff1e //
+#define              DENALI_CTL_132_DATA 0x000f0010 //
+#define              DENALI_CTL_133_DATA 0x00000000 //
+#define              DENALI_CTL_134_DATA 0x00000000 //
+#define              DENALI_CTL_135_DATA 0x00000000 //
+#define              DENALI_CTL_136_DATA 0x00000000 //
+#define              DENALI_CTL_137_DATA 0x00000000 //
+#define              DENALI_CTL_138_DATA 0x00000000 //
+#define              DENALI_CTL_139_DATA 0x00000204 //
+#define              DENALI_CTL_140_DATA 0x00000000 //
+#define              DENALI_CTL_141_DATA 0x00000000 //
+#define              DENALI_CTL_142_DATA 0x00000001 //
+#define              DENALI_CTL_143_DATA 0x00000000 //
+#define              DENALI_CTL_144_DATA 0x00000000 //
+#define              DENALI_CTL_145_DATA 0x00000000 //
+#define              DENALI_CTL_146_DATA 0x00000000 //
+#define              DENALI_CTL_147_DATA 0x00000000 //
+#define              DENALI_CTL_148_DATA 0x00000000 //
+#define              DENALI_CTL_149_DATA 0x00000000 //
+#define              DENALI_CTL_150_DATA 0x01000000 //
+#define              DENALI_CTL_151_DATA 0x00000000 //
+#define              DENALI_CTL_152_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL152_ECC_EN //
+#define              DENALI_CTL_153_DATA 0x03e80010 //
+#define              DENALI_CTL_154_DATA 0x00000064 //
+#define              DENALI_CTL_155_DATA 0x00000000 //
+#define              DENALI_CTL_156_DATA 0x00000000 //
+#define              DENALI_CTL_157_DATA 0x01000000 //
+#define              DENALI_CTL_158_DATA 0x00000000 //
+#define              DENALI_CTL_159_DATA 0x00000000 //
+#define              DENALI_CTL_160_DATA 0x2000000 << SRT_NX4000_DDR_CTRL_CTL160_INT_MASK //
+#define              DENALI_CTL_161_DATA 0x00000000 //
+#define              DENALI_CTL_162_DATA 0x00000000 //
diff --git a/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-600mhz.h b/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-600mhz.h
new file mode 100644
index 0000000000..2692114007
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/is43tr16256al-1gib-600mhz.h
@@ -0,0 +1,170 @@
+
+/* ***************************************************** *
+ * patched cadence header file for DDR memory controller *
+ * for netX 4000 (FULL)                                  *
+ ******************************************************* */
+
+
+#define               DENALI_CTL_00_DATA 0x00000600 //
+#define               DENALI_CTL_01_DATA 0x00000000 //
+#define               DENALI_CTL_02_DATA 0x00000006 //
+#define               DENALI_CTL_03_DATA 0x00000000 //
+#define               DENALI_CTL_04_DATA 0x00000000 //
+#define               DENALI_CTL_05_DATA 0x00000000 //
+#define               DENALI_CTL_06_DATA 0x0001d4a9 //
+#define               DENALI_CTL_07_DATA 0x000493a5 //
+#define               DENALI_CTL_08_DATA 0x00000000 //
+#define               DENALI_CTL_09_DATA 0x12000200 //
+#define               DENALI_CTL_10_DATA 0x04040007 //
+#define               DENALI_CTL_11_DATA 0x05151e05 //
+#define               DENALI_CTL_12_DATA 0x04051809 //
+#define               DENALI_CTL_13_DATA 0x00a47f0c //
+#define               DENALI_CTL_14_DATA 0x09000503 //
+#define               DENALI_CTL_15_DATA 0x01000009 //
+#define               DENALI_CTL_16_DATA 0x09031301 //
+#define               DENALI_CTL_17_DATA 0x00000000 //
+#define               DENALI_CTL_18_DATA 0x00010000 //
+#define               DENALI_CTL_19_DATA 0x123f009c //
+#define               DENALI_CTL_20_DATA 0x00000000 //
+#define               DENALI_CTL_21_DATA 0x000f0004 //
+#define               DENALI_CTL_22_DATA 0x00000000 //
+#define               DENALI_CTL_23_DATA 0x00a20200 //
+#define               DENALI_CTL_24_DATA 0x00010000 //
+#define               DENALI_CTL_25_DATA 0x00060600 //
+#define               DENALI_CTL_26_DATA 0x00000000 //
+#define               DENALI_CTL_27_DATA 0x00000000 //
+#define               DENALI_CTL_28_DATA 0x00000000 //
+#define               DENALI_CTL_29_DATA 0x00000000 //
+#define               DENALI_CTL_30_DATA 0x00000000 //
+#define               DENALI_CTL_31_DATA 0x00000000 //
+#define               DENALI_CTL_32_DATA 0x00460a50 //
+#define               DENALI_CTL_33_DATA 0x00000010 //
+#define               DENALI_CTL_34_DATA 0x00000000 //
+#define               DENALI_CTL_35_DATA 0x00000000 //
+#define               DENALI_CTL_36_DATA 0x00000000 //
+#define               DENALI_CTL_37_DATA 0x00000000 //
+#define               DENALI_CTL_38_DATA 0x00000000 //
+#define               DENALI_CTL_39_DATA 0x00000000 //
+#define               DENALI_CTL_40_DATA 0x00000000 //
+#define               DENALI_CTL_41_DATA 0x00000000 //
+#define               DENALI_CTL_42_DATA 0x00000000 //
+#define               DENALI_CTL_43_DATA 0x00000000 //
+#define               DENALI_CTL_44_DATA 0x00000000 //
+#define               DENALI_CTL_45_DATA 0x00000000 //
+#define               DENALI_CTL_46_DATA 0x00000000 //
+#define               DENALI_CTL_47_DATA 0x00000000 //
+#define               DENALI_CTL_48_DATA 0x00000000 //
+#define               DENALI_CTL_49_DATA 0x01000200 //
+#define               DENALI_CTL_50_DATA 0x02000040 //
+#define               DENALI_CTL_51_DATA 0x00000040 //
+#define               DENALI_CTL_52_DATA 0x00000000 //
+#define               DENALI_CTL_53_DATA 0x01010000 //
+#define               DENALI_CTL_54_DATA 0x01ffff0a //
+#define               DENALI_CTL_55_DATA 0x01010101 //
+#define               DENALI_CTL_56_DATA 0x01000001 //
+#define               DENALI_CTL_57_DATA 0x00000103 //
+#define               DENALI_CTL_58_DATA 0x00000c00 //
+#define               DENALI_CTL_59_DATA 0x00000000 //
+#define               DENALI_CTL_60_DATA 0x00000001 //
+#define               DENALI_CTL_61_DATA 0x00000000 //
+#define               DENALI_CTL_62_DATA 0x00000000 //
+#define               DENALI_CTL_63_DATA 0x00000000 //
+#define               DENALI_CTL_64_DATA 0x00000000 //
+#define               DENALI_CTL_65_DATA 0x00000000 //
+#define               DENALI_CTL_66_DATA 0x00000000 //
+#define               DENALI_CTL_67_DATA 0x00000000 //
+#define               DENALI_CTL_68_DATA 0x00000000 //
+#define               DENALI_CTL_69_DATA 0x00000000 //
+#define               DENALI_CTL_70_DATA 0x01000606 //
+#define               DENALI_CTL_71_DATA 0x00000000 //
+#define               DENALI_CTL_72_DATA 0x00000000 //
+#define               DENALI_CTL_73_DATA 0x00000400 //
+#define               DENALI_CTL_74_DATA 0x00000000 //
+#define               DENALI_CTL_75_DATA 0x00000000 //
+#define               DENALI_CTL_76_DATA 0x00000000 //
+#define               DENALI_CTL_77_DATA 0x00000000 //
+#define               DENALI_CTL_78_DATA 0x280d0000 //
+#define               DENALI_CTL_79_DATA 0x00000000 //
+#define               DENALI_CTL_80_DATA 0x00000000 //
+#define               DENALI_CTL_81_DATA 0x00010001 //
+#define               DENALI_CTL_82_DATA 0x00010001 //
+#define               DENALI_CTL_83_DATA 0x00000001 //
+#define               DENALI_CTL_84_DATA 0x00000000 //
+#define               DENALI_CTL_85_DATA 0x00000000 //
+#define               DENALI_CTL_86_DATA 0x00000000 //
+#define               DENALI_CTL_87_DATA 0x00000000 //
+#define               DENALI_CTL_88_DATA 0x00012222 //
+#define               DENALI_CTL_89_DATA 0x00000000 //
+#define               DENALI_CTL_90_DATA 0x00000000 //
+#define               DENALI_CTL_91_DATA 0x00222200 //
+#define               DENALI_CTL_92_DATA 0x00000001 //
+#define               DENALI_CTL_93_DATA 0x00000000 //
+#define               DENALI_CTL_94_DATA 0x00000000 //
+#define               DENALI_CTL_95_DATA 0x00012222 //
+#define               DENALI_CTL_96_DATA 0x00000000 //
+#define               DENALI_CTL_97_DATA 0x00000000 //
+#define               DENALI_CTL_98_DATA 0x00222200 //
+#define               DENALI_CTL_99_DATA 0x00000001 //
+#define              DENALI_CTL_100_DATA 0x00000000 //
+#define              DENALI_CTL_101_DATA 0x00000000 //
+#define              DENALI_CTL_102_DATA 0x00012222 //
+#define              DENALI_CTL_103_DATA 0x01020201 //
+#define              DENALI_CTL_104_DATA 0x02010202 //
+#define              DENALI_CTL_105_DATA 0x02020102 //
+#define              DENALI_CTL_106_DATA 0x00020201 //
+#define              DENALI_CTL_107_DATA 0x05050000 //
+#define              DENALI_CTL_108_DATA 0x00000505 //
+#define              DENALI_CTL_109_DATA 0x04040064 //
+#define              DENALI_CTL_110_DATA 0x00010404 //
+#define              DENALI_CTL_111_DATA 0x03030064 //
+#define              DENALI_CTL_112_DATA 0x00020303 //
+#define              DENALI_CTL_113_DATA 0x02020064 //
+#define              DENALI_CTL_114_DATA 0x00030202 //
+#define              DENALI_CTL_115_DATA 0x01010064 //
+#define              DENALI_CTL_116_DATA 0x00040101 //
+#define              DENALI_CTL_117_DATA 0x00000064 //
+#define              DENALI_CTL_118_DATA 0x00000000 //
+#define              DENALI_CTL_119_DATA 0x00001A00 //
+#define              DENALI_CTL_120_DATA 0x00247e05 //
+#define              DENALI_CTL_121_DATA 0x02000200 //
+#define              DENALI_CTL_122_DATA 0x02000200 //
+#define              DENALI_CTL_123_DATA 0x0000247e //
+#define              DENALI_CTL_124_DATA 0x00016cec //
+#define              DENALI_CTL_125_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE | 0x2 << SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY | 0x08 << SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ | 0x08 << SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ //
+#define              DENALI_CTL_126_DATA 0x000a0a05 //
+#define              DENALI_CTL_127_DATA 0x00000000 //
+#define              DENALI_CTL_128_DATA 0x00000000 //
+#define              DENALI_CTL_129_DATA 0x04038000 //
+#define              DENALI_CTL_130_DATA 0x07060a07 //
+#define              DENALI_CTL_131_DATA 0x00ffff24 //
+#define              DENALI_CTL_132_DATA 0x000f0010 //
+#define              DENALI_CTL_133_DATA 0x00000000 //
+#define              DENALI_CTL_134_DATA 0x00000000 //
+#define              DENALI_CTL_135_DATA 0x00000000 //
+#define              DENALI_CTL_136_DATA 0x00000000 //
+#define              DENALI_CTL_137_DATA 0x00000000 //
+#define              DENALI_CTL_138_DATA 0x00000000 //
+#define              DENALI_CTL_139_DATA 0x00000204 //
+#define              DENALI_CTL_140_DATA 0x00000000 //
+#define              DENALI_CTL_141_DATA 0x00000000 //
+#define              DENALI_CTL_142_DATA 0x00000001 //
+#define              DENALI_CTL_143_DATA 0x00000000 //
+#define              DENALI_CTL_144_DATA 0x00000000 //
+#define              DENALI_CTL_145_DATA 0x00000000 //
+#define              DENALI_CTL_146_DATA 0x00000000 //
+#define              DENALI_CTL_147_DATA 0x00000000 //
+#define              DENALI_CTL_148_DATA 0x00000000 //
+#define              DENALI_CTL_149_DATA 0x00000000 //
+#define              DENALI_CTL_150_DATA 0x01000000 //
+#define              DENALI_CTL_151_DATA 0x00000000 //
+#define              DENALI_CTL_152_DATA 0x0 << SRT_NX4000_DDR_CTRL_CTL152_ECC_EN //
+#define              DENALI_CTL_153_DATA 0x03e80010 //
+#define              DENALI_CTL_154_DATA 0x00000064 //
+#define              DENALI_CTL_155_DATA 0x00000000 //
+#define              DENALI_CTL_156_DATA 0x00000000 //
+#define              DENALI_CTL_157_DATA 0x01000000 //
+#define              DENALI_CTL_158_DATA 0x00000000 //
+#define              DENALI_CTL_159_DATA 0x00000000 //
+#define              DENALI_CTL_160_DATA 0x2000000 << SRT_NX4000_DDR_CTRL_CTL160_INT_MASK //
+#define              DENALI_CTL_161_DATA 0x00000000 //
+#define              DENALI_CTL_162_DATA 0x00000000 //
diff --git a/arch/arm/mach-netx4000/include/mach/netx4000_ddr.h b/arch/arm/mach-netx4000/include/mach/netx4000_ddr.h
new file mode 100644
index 0000000000..23c9845a6d
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/netx4000_ddr.h
@@ -0,0 +1,608 @@
+/*
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+#ifndef _NETX4000_DDR_H_
+#define _NETX4000_DDR_H_
+
+#include <mach/netx4000_regs.h>
+
+/* DDR Phy registers */
+#define DDRPHY_FUNCCTRL				(NETX4000_DDRPHY_BASE + 0x00)
+#define Adr_NX4000_DDR_PHY_DDR_PHY_FUNCCTRL	DDRPHY_FUNCCTRL
+#define DDRPHY_DLLCTRL				(NETX4000_DDRPHY_BASE + 0x04)
+#define DDRPHY_ZQCALCTRL			(NETX4000_DDRPHY_BASE + 0x08)
+#define DDRPHY_ZQODTCTRL			(NETX4000_DDRPHY_BASE + 0x0C)
+#define DDRPHY_RDCTRL				(NETX4000_DDRPHY_BASE + 0x10)
+#define DDRPHY_RDTMG				(NETX4000_DDRPHY_BASE + 0x14)
+#define DDRPHY_FIFOINIT				(NETX4000_DDRPHY_BASE + 0x18)
+#define DDRPHY_OUTCTRL				(NETX4000_DDRPHY_BASE + 0x1C)
+
+#define DDRPHY_FUNCCTRL_IFSEL_SHIFT		(8)
+#define SRT_NX4000_DDR_PHY_FUNCCTRL_IFSEL	DDRPHY_FUNCCTRL_IFSEL_SHIFT
+#define DDRPHY_FUNCCTRL_IFSEL_MASK		(3 << DDRPHY_FUNCCTRL_IFSEL_SHIFT)
+#define DDRPHY_FUNCCTRL_FUNCRSTB_SHIFT		(0)
+#define DDRPHY_FUNCCTRL_FUNCRSTB_MASK		(1 << DDRPHY_FUNCCTRL_FUNCRSTB_SHIFT)
+#define MSK_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB	DDRPHY_FUNCCTRL_FUNCRSTB_MASK
+
+#define DDRPHY_DLLCTRL_MDLLOCK_SHIFT		(25)
+#define DDRPHY_DLLCTRL_MDLLOCK_MASK		(1 << DDRPHY_DLLCTRL_MDLLOCK_SHIFT)
+#define DDRPHY_DLLCTRL_MSATFG_SHIFT		(24)
+#define DDRPHY_DLLCTRL_MSATFG_MASK		(1 << DDRPHY_DLLCTRL_MSATFG_SHIFT)
+#define DDRPHY_DLLCTRL_MDACNTM_SHIFT		(22)
+#define DDRPHY_DLLCTRL_MDACNTM_MASK		(1 << DDRPHY_DLLCTRL_MDACNTM_SHIFT)
+#define DDRPHY_DLLCTRL_SDLYCTRL_SHIFT		(21)
+#define DDRPHY_DLLCTRL_SDLYCTRL_MASK		(1 << DDRPHY_DLLCTRL_SDLYCTRL_SHIFT)
+#define DDRPHY_DLLCTRL_DACNTUPD_SHIFT		(20)
+#define DDRPHY_DLLCTRL_DACNTUPD_MASK		(1 << DDRPHY_DLLCTRL_DACNTUPD_SHIFT)
+#define DDRPHY_DLLCTRL_MDACNT_SHIFT		(8)
+#define DDRPHY_DLLCTRL_MDACNT_MASK		(0x3FF << DDRPHY_DLLCTRL_MDACNT_SHIFT)
+#define DDRPHY_DLLCTRL_HSLMODE_SHIFT		(5)
+#define DDRPHY_DLLCTRL_HSLMODE_MASK		(1 << DDRPHY_DLLCTRL_HSLMODE_SHIFT)
+#define DDRPHY_DLLCTRL_MSATMODE_SHIFT		(4)
+#define DDRPHY_DLLCTRL_MSATMODE_MASK		(1 << DDRPHY_DLLCTRL_MSATMODE_SHIFT)
+#define DDRPHY_DLLCTRL_DDMODE_SHIFT		(3)
+#define DDRPHY_DLLCTRL_DDMODE_MASK		(1 << DDRPHY_DLLCTRL_DDMODE_SHIFT)
+#define DDRPHY_DLLCTRL_MFSL_SHIFT		(1)
+#define SRT_NX4000_DDR_PHY_DLLCTRL_MFSL		DDRPHY_DLLCTRL_MFSL_SHIFT
+#define DDRPHY_DLLCTRL_MFSL_MASK		(3 << DDRPHY_DLLCTRL_MFSL_SHIFT)
+#define DDRPHY_DLLCTRL_MDLLSTBY_SHIFT		(0)
+#define DDRPHY_DLLCTRL_MDLLSTBY_MASK		(1 << DDRPHY_DLLCTRL_MDLLSTBY_SHIFT)
+
+#define DDRPHY_ZQCALCTRL_ZQCALRUN_SHIFT		(31)
+#define DDRPHY_ZQCALCTRL_ZQCALRUN_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALRUN_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALEND_SHIFT		(30)
+#define DDRPHY_ZQCALCTRL_ZQCALEND_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALEND_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND	DDRPHY_ZQCALCTRL_ZQCALEND_MASK
+#define DDRPHY_ZQCALCTRL_ZQCALGAP_SHIFT		(29)
+#define DDRPHY_ZQCALCTRL_ZQCALGAP_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALGAP_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALPC_SHIFT		(26)
+#define DDRPHY_ZQCALCTRL_ZQCALPC_MASK		(0x7 << DDRPHY_ZQCALCTRL_ZQCALPC_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALPF_SHIFT		(22)
+#define DDRPHY_ZQCALCTRL_ZQCALPF_MASK		(0xF << DDRPHY_ZQCALCTRL_ZQCALPF_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALNC_SHIFT		(19)
+#define DDRPHY_ZQCALCTRL_ZQCALNC_MASK		(7 << DDRPHY_ZQCALCTRL_ZQCALNC_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALNF_SHIFT		(15)
+#define DDRPHY_ZQCALCTRL_ZQCALNF_MASK		(0xF << DDRPHY_ZQCALCTRL_ZQCALNF_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALINIT_SHIFT	(14)
+#define DDRPHY_ZQCALCTRL_ZQCALINIT_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALINIT_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALUPD_SHIFT		(10)
+#define SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD	DDRPHY_ZQCALCTRL_ZQCALUPD_SHIFT
+#define DDRPHY_ZQCALCTRL_ZQCALUPD_MASK		(3 << DDRPHY_ZQCALCTRL_ZQCALUPD_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALFREQ_SHIFT	(8)
+#define SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ	DDRPHY_ZQCALCTRL_ZQCALFREQ_SHIFT
+#define DDRPHY_ZQCALCTRL_ZQCALFREQ_MASK		(3 << DDRPHY_ZQCALCTRL_ZQCALFREQ_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALITVL_SHIFT	(4)
+#define SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL	DDRPHY_ZQCALCTRL_ZQCALITVL_SHIFT
+#define DDRPHY_ZQCALCTRL_ZQCALITVL_MASK		(0xF << DDRPHY_ZQCALCTRL_ZQCALITVL_SHIFT)
+#define DDRPHY_ZQCALCTRL_ZQCALMODE_SHIFT	(2)
+#define DDRPHY_ZQCALCTRL_ZQCALMODE_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALMODE_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE	DDRPHY_ZQCALCTRL_ZQCALMODE_MASK
+#define DDRPHY_ZQCALCTRL_ZQCALSTRV_SHIFT	(1)
+#define DDRPHY_ZQCALCTRL_ZQCALSTRV_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALSTRV_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV	DDRPHY_ZQCALCTRL_ZQCALSTRV_MASK
+#define DDRPHY_ZQCALCTRL_ZQCALRSTB_SHIFT	(0)
+#define DDRPHY_ZQCALCTRL_ZQCALRSTB_MASK		(1 << DDRPHY_ZQCALCTRL_ZQCALRSTB_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB	DDRPHY_ZQCALCTRL_ZQCALRSTB_MASK
+
+#define DDRPHY_ZQODTCTRL_CAPHASE_SHIFT		(30)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE	DDRPHY_ZQODTCTRL_CAPHASE_SHIFT
+#define DDRPHY_ZQODTCTRL_CAPHASE_MASK		(3 << DDRPHY_ZQODTCTRL_CAPHASE_SHIFT)
+#define DDRPHY_ZQODTCTRL_WRFIFOEN_SHIFT		(29)
+#define DDRPHY_ZQODTCTRL_WRFIFOEN_MASK		(1 << DDRPHY_ZQODTCTRL_WRFIFOEN_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN	DDRPHY_ZQODTCTRL_WRFIFOEN_MASK
+#define DDRPHY_ZQODTCTRL_FIFORPINIT_SHIFT	(27)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT	DDRPHY_ZQODTCTRL_FIFORPINIT_SHIFT
+#define DDRPHY_ZQODTCTRL_FIFORPINIT_MASK	(3 << DDRPHY_ZQODTCTRL_FIFORPINIT_SHIFT)
+#define DDRPHY_ZQODTCTRL_ZQDATA_SHIFT		(23)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA	DDRPHY_ZQODTCTRL_ZQDATA_SHIFT
+#define DDRPHY_ZQODTCTRL_ZQDATA_MASK		(0xF << DDRPHY_ZQODTCTRL_ZQDATA_SHIFT)
+#define DDRPHY_ZQODTCTRL_ZQCK_SHIFT		(19)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCK	DDRPHY_ZQODTCTRL_ZQCK_SHIFT
+#define DDRPHY_ZQODTCTRL_ZQCK_MASK		(0xF << DDRPHY_ZQODTCTRL_ZQCK_SHIFT)
+#define DDRPHY_ZQODTCTRL_ZQCMDAD_SHIFT		(15)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD	DDRPHY_ZQODTCTRL_ZQCMDAD_SHIFT
+#define DDRPHY_ZQODTCTRL_ZQCMDAD_MASK		(0xF << DDRPHY_ZQODTCTRL_ZQCMDAD_SHIFT)
+#define DDRPHY_ZQODTCTRL_SRDQ_SHIFT		(12)
+#define DDRPHY_ZQODTCTRL_SRDQ_MASK		(3 << DDRPHY_ZQODTCTRL_SRDQ_SHIFT)
+#define DDRPHY_ZQODTCTRL_SRCK_SHIFT		(10)
+#define DDRPHY_ZQODTCTRL_SRCK_MASK		(3 << DDRPHY_ZQODTCTRL_SRCK_SHIFT)
+#define DDRPHY_ZQODTCTRL_SRCMDAD_SHIFT		(8)
+#define DDRPHY_ZQODTCTRL_SRCMDAD_MASK		(3 << DDRPHY_ZQODTCTRL_SRCMDAD_SHIFT)
+#define DDRPHY_ZQODTCTRL_PHYODT_SHIFT		(5)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_PHYODT	DDRPHY_ZQODTCTRL_PHYODT_SHIFT
+#define DDRPHY_ZQODTCTRL_PHYODT_MASK		(3 << DDRPHY_ZQODTCTRL_PHYODT_SHIFT)
+#define DDRPHY_ZQODTCTRL_PHYODTEN_SHIFT		(4)
+#define DDRPHY_ZQODTCTRL_PHYODTEN_MASK		(1 << DDRPHY_ZQODTCTRL_PHYODTEN_SHIFT)
+#define MSK_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN	DDRPHY_ZQODTCTRL_PHYODTEN_MASK
+#define DDRPHY_ZQODTCTRL_DNVEN_SHIFT		(3)
+#define DDRPHY_ZQODTCTRL_DNVEN_MASK		(1 << DDRPHY_ZQODTCTRL_DNVEN_SHIFT)
+#define DDRPHY_ZQODTCTRL_DRAMIF_SHIFT		(0)
+#define SRT_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF	DDRPHY_ZQODTCTRL_DRAMIF_SHIFT
+#define DDRPHY_ZQODTCTRL_DRAMIF_MASK		(3 << DDRPHY_ZQODTCTRL_DRAMIF_SHIFT)
+
+#define DDRPHY_RDCTRL_PHYODTONT_SHIFT		(28)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYODTONT	DDRPHY_RDCTRL_PHYODTONT_SHIFT
+#define DDRPHY_RDCTRL_PHYODTONT_MASK		(0xF << DDRPHY_RDCTRL_PHYODTONT_SHIFT)
+#define DDRPHY_RDCTRL_PHYODTOFT_SHIFT		(24)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYODTOFT	(DDRPHY_RDCTRL_PHYODTOFT_SHIFT)
+#define DDRPHY_RDCTRL_PHYODTOFT_MASK		(0xF << DDRPHY_RDCTRL_PHYODTOFT_SHIFT)
+#define DDRPHY_RDCTRL_PDQODTONT_SHIFT		(20)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PDQODTONT	DDRPHY_RDCTRL_PDQODTONT_SHIFT
+#define DDRPHY_RDCTRL_PDQODTONT_MASK		(0xF << DDRPHY_RDCTRL_PDQODTONT_SHIFT)
+#define DDRPHY_RDCTRL_PDQODTOFT_SHIFT		(16)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PDQODTOFT	DDRPHY_RDCTRL_PDQODTOFT_SHIFT
+#define DDRPHY_RDCTRL_PDQODTOFT_MASK		(0xF << DDRPHY_RDCTRL_PDQODTOFT_SHIFT)
+#define DDRPHY_RDCTRL_PHYBENONT_SHIFT		(12)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYBENONT	DDRPHY_RDCTRL_PHYBENONT_SHIFT
+#define DDRPHY_RDCTRL_PHYBENONT_MASK		(0xF << DDRPHY_RDCTRL_PHYBENONT_SHIFT)
+#define DDRPHY_RDCTRL_PHYBENOFT_SHIFT		(8)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYBENOFT	DDRPHY_RDCTRL_PHYBENOFT_SHIFT
+#define DDRPHY_RDCTRL_PHYBENOFT_MASK		(0xF << DDRPHY_RDCTRL_PHYBENOFT_SHIFT)
+#define DDRPHY_RDCTRL_PHYIENONT_SHIFT		(4)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYIENONT	DDRPHY_RDCTRL_PHYIENONT_SHIFT
+#define DDRPHY_RDCTRL_PHYIENONT_MASK		(0xF << DDRPHY_RDCTRL_PHYIENONT_SHIFT)
+#define DDRPHY_RDCTRL_PHYIENOFT_SHIFT		(0)
+#define SRT_NX4000_DDR_PHY_RDCTRL_PHYIENOFT	DDRPHY_RDCTRL_PHYIENOFT_SHIFT
+#define DDRPHY_RDCTRL_PHYIENOFT_MASK		(0xF << DDRPHY_RDCTRL_PHYIENOFT_SHIFT)
+
+#define DDRPHY_RDTMG_MASKSFT_SHIFT		(9)
+#define DDRPHY_RDTMG_MASKSFT_MASK		(1 << DDRPHY_RDTMG_MASKSFT_SHIFT)
+#define DDRPHY_RDTMG_RDMODE_SHIFT		(8)
+#define DDRPHY_RDTMG_RDMODE_MASK		(1 << DDRPHY_RDTMG_RDMODE_SHIFT)
+#define MSK_NX4000_DDR_PHY_RDTMG_RDMODE		DDRPHY_RDTMG_RDMODE_MASK
+#define DDRPHY_RDTMG_RDENVALID_SHIFT		(4)
+#define SRT_NX4000_DDR_PHY_RDTMG_RDENVALID	DDRPHY_RDTMG_RDENVALID_SHIFT
+#define DDRPHY_RDTMG_RDENVALID_MASK		(0xF << DDRPHY_RDTMG_RDENVALID_SHIFT)
+#define DDRPHY_RDTMG_WDOMODE_SHIFT		(0)
+#define SRT_NX4000_DDR_PHY_RDTMG_WDOMODE	DDRPHY_RDTMG_WDOMODE_SHIFT
+#define DDRPHY_RDTMG_WDOMODE_MASK		(3 << DDRPHY_RDTMG_WDOMODE_SHIFT)
+
+#define DDRPHY_FIFOINIT_RDPTINITEXE_SHIFT	(8)
+#define DDRPHY_FIFOINIT_RDPTINITEXE_MASK	(1 << DDRPHY_FIFOINIT_RDPTINITEXE_SHIFT)
+#define MSK_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE	DDRPHY_FIFOINIT_RDPTINITEXE_MASK
+#define DDRPHY_FIFOINIT_WRPTINITEXE_SHIFT	(0)
+#define DDRPHY_FIFOINIT_WRPTINITEXE_MASK	(1 << DDRPHY_FIFOINIT_WRPTINITEXE_SHIFT)
+#define MSK_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE	DDRPHY_FIFOINIT_WRPTINITEXE_MASK
+
+#define DDRPHY_OUTCTRL_CKOBUFEN_SHIFT		(26)
+#define SRT_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN	DDRPHY_OUTCTRL_CKOBUFEN_SHIFT
+#define DDRPHY_OUTCTRL_CKOBUFEN_MASK		(7 << DDRPHY_OUTCTRL_CKOBUFEN_SHIFT)
+#define DDRPHY_OUTCTRL_MBL_SHIFT		(24)
+#define SRT_NX4000_DDR_PHY_OUTCTRL_MBL		DDRPHY_OUTCTRL_MBL_SHIFT
+#define DDRPHY_OUTCTRL_MBL_MASK			(3 << DDRPHY_OUTCTRL_MBL_SHIFT)
+#define DDRPHY_OUTCTRL_MRL_SHIFT		(16)
+#define SRT_NX4000_DDR_PHY_OUTCTRL_MRL		DDRPHY_OUTCTRL_MRL_SHIFT
+#define DDRPHY_OUTCTRL_MRL_MASK			(0x1F << DDRPHY_OUTCTRL_MRL_SHIFT)
+#define DDRPHY_OUTCTRL_MWL_SHIFT		(8)
+#define SRT_NX4000_DDR_PHY_OUTCTRL_MWL		DDRPHY_OUTCTRL_MWL_SHIFT
+#define DDRPHY_OUTCTRL_MWL_MASK			(0x1F << DDRPHY_OUTCTRL_MWL_SHIFT)
+#define DDRPHY_OUTCTRL_RESETBOE_SHIFT		(2)
+#define DDRPHY_OUTCTRL_RESETBOE_MASK		(1 << DDRPHY_OUTCTRL_RESETBOE_SHIFT)
+#define MSK_NX4000_DDR_PHY_OUTCTRL_RESETBOE	DDRPHY_OUTCTRL_RESETBOE_MASK
+#define DDRPHY_OUTCTRL_CKEODTOE_SHIFT		(1)
+#define DDRPHY_OUTCTRL_CKEODTOE_MASK		(1 << DDRPHY_OUTCTRL_CKEODTOE_SHIFT)
+#define MSK_NX4000_DDR_PHY_OUTCTRL_CKEODTOE	DDRPHY_OUTCTRL_CKEODTOE_MASK
+#define DDRPHY_OUTCTRL_ADCMODE_SHIFT		(0)
+#define DDRPHY_OUTCTRL_ADCMODE_MASK		(1 << DDRPHY_OUTCTRL_ADCMODE_SHIFT)
+#define MSK_NX4000_DDR_PHY_OUTCTRL_ADCMDOE	DDRPHY_OUTCTRL_ADCMODE_MASK
+
+/* DDR memory controller registers */
+#define DENALI_CTL(n)			(NETX4000_DDRREGS_BASE + (n) * 4)
+
+#define DENALI_CTL0_VERSION_SHIFT	(16)
+#define DENALI_CTL0_VERSION_MASK	(0xFFFF << DENALI_CTL0_VERSION_SHIFT)
+#define DENALI_CTL0_DRAM_CLASS_SHIFT	(8)
+#define DENALI_CTL0_DRAM_CLASS_MASK	(0xF << DENALI_CTL0_DRAM_CLASS_SHIFT)
+#define DENALI_CTL0_START_SHIFT		(0)
+#define DENALI_CTL0_START_MASK		(1 << DENALI_CTL0_START_SHIFT)
+
+#define DENALI_CTL1_MAXCS_SHIFT		(16)
+#define DENALI_CTL1_MAXCS_MASK		(0x1 << DENALI_CTL1_MAXCS_SHIFT)
+#define DENALI_CTL1_MAXCOL_SHIFT	(8)
+#define DENALI_CTL1_MAXCOL_MASK		(0xF << DENALI_CTL1_MAXCOL_SHIFT)
+#define DENALI_CTL1_MAXROW_SHIFT	(0)
+#define DENALI_CTL1_MAXROW_MASK		(0x1F << DENALI_CTL1_MAXROW_SHIFT)
+
+#define DENALI_CTL2_TINIT_SHIFT		(0)
+#define DENALI_CTL2_TINIT_MASK		(0xFFFFFF << DENALI_CTL2_TINIT_SHIFT)
+
+#define DENALI_CTL6_TRSTPWRON_SHIFT	(0)
+#define DENALI_CTL6_TRSTPWRON_MASK	(0xFFFFFFFF << DENALI_CTL6_TRSTPWRON_SHIFT)
+
+#define DENALI_CTL7_CKEINACTIVE_SHIFT	(0)
+#define DENALI_CTL7_CKEINACTIVE_MASK	(0xFFFFFFFF << DENALI_CTL7_CKEINACTIVE_SHIFT)
+
+#define DENALI_CTL8_TCPD_SHIFT		(8)
+#define DENALI_CTL8_TCPD_MASK		(0xFFFF << DENALI_CTL8_TCPD_SHIFT)
+#define DENALI_CTL8_INITAREF_SHIFT	(0)
+#define DENALI_CTL8_INITAREF_MASK	(0xF << DENALI_CTL8_INITAREF_SHIFT)
+
+#define DENALI_CTL9_CASLAT_LIN_SHIFT	(24)
+#define DENALI_CTL9_CASLAT_LIN_MASK	(0x3F << DENALI_CTL9_CASLAT_LIN_SHIFT)
+#define DENALI_CTL9_NO_CMD_INIT_SHIFT	(16)
+#define DENALI_CTL9_NO_CMD_INIT_MASK	(1 << DENALI_CTL9_NO_CMD_INIT_SHIFT)
+#define DENALI_CTL9_TDLL_SHIFT		(0)
+#define DENALI_CTL9_TDLL_MASK		(0xFFFF << DENALI_CTL9_TDLL_SHIFT)
+
+#define DENALI_CTL10_TCCD_SHIFT		(24)
+#define DENALI_CTL10_TCCD_MASK		(0x1F << DENALI_CTL10_TCCD_SHIFT)
+#define DENALI_CTL10_TBSTINT_SHIFT	(16)
+#define DENALI_CTL10_TBSTINT_MASK	(0x07 << DENALI_CTL10_TBSTINT_SHIFT)
+#define DENALI_CTL10_ADDITIVE_LAT_SHIFT	(8)
+#define DENALI_CTL10_ADDITIVE_LAT_MASK	(0x1F << DENALI_CTL10_ADDITIVE_LAT_SHIFT)
+#define DENALI_CTL10_WRLAT_SHIFT	(0)
+#define DENALI_CTL10_WRLAT_MASK		(0x1F << DENALI_CTL10_WRLAT_SHIFT)
+
+#define DENALI_CTL11_TWTR_SHIFT		(24)
+#define DENALI_CTL11_TWTR_MASK		(0xF << DENALI_CTL11_TWTR_SHIFT)
+#define DENALI_CTL11_TRAS_MIN_SHIFT	(16)
+#define DENALI_CTL11_TRAS_MIN_MASK	(0xFF << DENALI_CTL11_TRAS_MIN_SHIFT)
+#define DENALI_CTL11_TRC_SHIFT		(8)
+#define DENALI_CTL11_TRC_MASK		(0xFF << DENALI_CTL11_TRC_SHIFT)
+#define DENALI_CTL11_TRRD_SHIFT		(0)
+#define DENALI_CTL11_TRRD_MASK		(0xFF << DENALI_CTL11_TRRD_SHIFT)
+
+#define DENALI_CTL12_TMRD_SHIFT		(24)
+#define DENALI_CTL12_TMRD_MASK		(0x1F << DENALI_CTL12_TMRD_SHIFT)
+#define DENALI_CTL12_TRTP_SHIFT		(16)
+#define DENALI_CTL12_TRTP_MASK		(0xF << DENALI_CTL12_TRTP_SHIFT)
+#define DENALI_CTL12_TFAW_SHIFT		(8)
+#define DENALI_CTL12_TFAW_MASK		(0x3F << DENALI_CTL12_TFAW_SHIFT)
+#define DENALI_CTL12_TRP_SHIFT		(0)
+#define DENALI_CTL12_TRP_MASK		(0x1F << DENALI_CTL12_TRP_SHIFT)
+
+#define DENALI_CTL13_TRAS_MAX_SHIFT	(8)
+#define DENALI_CTL13_TRAS_MAX_MASK	(0x1FFFF << DENALI_CTL13_TRAS_MAX_SHIFT)
+#define DENALI_CTL13_TMOD_SHIFT		(0)
+#define DENALI_CTL13_TMOD_MASK		(0xFF << DENALI_CTL13_TMOD_SHIFT)
+
+#define DENALI_CTL14_TRCD_SHIFT		(24)
+#define DENALI_CTL14_TRCD_MASK		(0xFF << DENALI_CTL14_TRCD_SHIFT)
+#define DENALI_CTL14_WRITEINTERP_SHIFT	(16)
+#define DENALI_CTL14_WRITEINTERP_MASK	(1 << DENALI_CTL14_WRITEINTERP_SHIFT)
+#define DENALI_CTL14_TCKESR_SHIFT	(8)
+#define DENALI_CTL14_TCKESR_MASK	(0x1F << DENALI_CTL14_TCKESR_SHIFT)
+#define DENALI_CTL14_TCKE_SHIFT		(0)
+#define DENALI_CTL14_TCKE_MASK		(0x7 << DENALI_CTL14_TCKE_SHIFT)
+
+#define DENALI_CTL15_CONCURRENTAP_SHIFT	(24)
+#define DENALI_CTL15_CONCURRENTAP_MASK	(1 << DENALI_CTL15_CONCURRENTAP_SHIFT)
+#define DENALI_CTL15_AP_SHIFT		(16)
+#define DENALI_CTL15_AP_MASK		(1 << DENALI_CTL15_AP_SHIFT)
+#define DENALI_CTL15_TWR_SHIFT		(0)
+#define DENALI_CTL15_TWR_MASK		(0x3F << DENALI_CTL15_AP_SHIFT)
+
+#define DENALI_CTL16_TRP_AB_SHIFT	(24)
+#define DENALI_CTL16_TRP_AB_MASK	(0x1F << DENALI_CTL16_TRP_AB_SHIFT)
+#define DENALI_CTL16_BSTLEN_SHIFT	(16)
+#define DENALI_CTL16_BSTLEN_MASK	(0x7 << DENALI_CTL16_BSTLEN_SHIFT)
+#define DENALI_CTL16_TDAL_SHIFT		(8)
+#define DENALI_CTL16_TDAL_MASK		(0x3F << DENALI_CTL16_TDAL_SHIFT)
+#define DENALI_CTL16_TRAS_LOCKOUT_SHIFT	(0)
+#define DENALI_CTL16_TRAS_LOCKOUT_MASK	(1 << DENALI_CTL16_TRAS_LOCKOUT_SHIFT)
+
+#define DENALI_CTL17_OPTIMAL_RMODW_EN_SHIFT	(16)
+#define DENALI_CTL17_OPTIMAL_RMODW_EN_MASK	(1 << DENALI_CTL17_OPTIMAL_RMODW_EN_SHIFT)
+#define DENALI_CTL17_REG_DIMM_ENABLE_SHIFT	(0)
+#define DENALI_CTL17_REG_DIMM_ENABLE_MASK	(1 << DENALI_CTL17_REG_DIMM_ENABLE_SHIFT)
+
+#define DENALI_CTL18_TREF_ENABLE_SHIFT	(16)
+#define DENALI_CTL18_TREF_ENABLE_MASK	(1 << DENALI_CTL18_TREF_ENABLE_SHIFT)
+#define DENALI_CTL18_AREFRESH_SHIFT	(0)
+#define DENALI_CTL18_AREFRESH_MASK	(1 << DENALI_CTL18_AREFRESH_SHIFT)
+
+#define DENALI_CTL19_TREF_SHIFT		(16)
+#define DENALI_CTL19_TREF_MASK		(0x3FFF << DENALI_CTL19_TREF_SHIFT)
+#define DENALI_CTL19_TRFC_SHIFT		(0)
+#define DENALI_CTL19_TRFC_MASK		(0x3FF << DENALI_CTL19_TRFC_SHIFT)
+
+#define DENALI_CTL21_TXPDLL_SHIFT	(16)
+#define DENALI_CTL21_TXPDLL_MASK	(0xFFFF << DENALI_CTL21_TXPDLL_SHIFT)
+#define DENALI_CTL21_TPDEX_SHIFT	(0)
+#define DENALI_CTL21_TPDEX_MASK		(0xFFFF << DENALI_CTL21_TPDEX_SHIFT)
+
+#define DENALI_CTL22_TXARDS_SHIFT	(16)
+#define DENALI_CTL22_TXARDS_MASK	(0xFFFF << DENALI_CTL22_TXARDS_SHIFT)
+#define DENALI_CTL22_TXARD_SHIFT	(0)
+#define DENALI_CTL22_TXARD_MASK		(0xFFFF << DENALI_CTL22_TXARD_SHIFT)
+
+#define DENALI_CTL23_TXSNR_SHIFT	(16)
+#define DENALI_CTL23_TXSNR_MASK		(0xFFFF << DENALI_CTL23_TXSNR_SHIFT)
+#define DENALI_CTL23_TXSR_SHIFT		(0)
+#define DENALI_CTL23_TXSR_MASK		(0xFFFF << DENALI_CTL23_TXSR_SHIFT)
+
+#define DENALI_CTL24_ENABLE_QUICK_SREFRESH_SHIFT	(16)
+#define DENALI_CTL24_ENABLE_QUICK_SREFRESH_MASK		(1 << DENALI_CTL24_ENABLE_QUICK_SREFRESH_SHIFT)
+
+#define DENALI_CTL25_CKSRX_SHIFT	(16)
+#define DENALI_CTL25_CKSRX_MASK		(0xF << DENALI_CTL25_CKSRX_SHIFT)
+#define DENALI_CTL25_CKSRE_SHIFT	(8)
+#define DENALI_CTL25_CKSRE_MASK		(0xF << DENALI_CTL25_CKSRE_SHIFT)
+
+#define DENALI_CTL32_MR1_DATA_0_SHIFT		(16)
+#define DENALI_CTL32_MR1_DATA_0_MASK		(0x7FFF << DENALI_CTL32_MR1_DATA_0_SHIFT)
+#define DENALI_CTL32_MR0_DATA_0_SHIFT		(0)
+#define DENALI_CTL32_MR0_DATA_0_MASK		(0x7FFF << DENALI_CTL32_MR0_DATA_0_SHIFT)
+
+#define DENALI_CTL33_MRSINGLE_DATA_0_SHIFT	(16)
+#define DENALI_CTL33_MRSINGLE_DATA_0_MASK	(0x7FFF << DENALI_CTL33_MRSINGLE_DATA_0_SHIFT)
+#define DENALI_CTL33_MR2_DATA_0_SHIFT		(0)
+#define DENALI_CTL33_MR2_DATA_0_MASK		(0x7FFF << DENALI_CTL33_MR2_DATA_0_SHIFT)
+
+#define DENALI_CTL38_CTRL_RAW_SHIFT		(24)
+#define DENALI_CTL38_CTRL_RAW_MASK		(3 << DENALI_CTL38_CTRL_RAW_SHIFT)
+
+#define DENALI_CTL49_ZQCL_SHIFT			(16)
+#define DENALI_CTL49_ZQCL_MASK			(0xFFF << DENALI_CTL49_ZQCL_SHIFT)
+#define DENALI_CTL49_ZQINIT_SHIFT		(0)
+#define DENALI_CTL49_ZQINIT_MASK		(0xFFF << DENALI_CTL49_ZQINIT_SHIFT)
+
+#define DENALI_CTL50_ZQ_ON_SREF_EXIT_SHIFT	(24)
+#define DENALI_CTL50_ZQ_ON_SREF_EXIT_MASK	(3 << DENALI_CTL50_ZQ_ON_SREF_EXIT_SHIFT)
+#define DENALI_CTL50_ZQCS_SHIFT			(0)
+#define DENALI_CTL50_ZQCS_MASK			(0xFFF << DENALI_CTL50_ZQCS_SHIFT)
+
+#define DENALI_CTL51_ZQ_INTERVAL_SHIFT		(0)
+#define DENALI_CTL51_ZQ_INTERVAL_MASK		(0xFFFFFFFF)
+
+#define DENALI_CTL53_COL_DIFF_SHIFT		(24)
+#define DENALI_CTL53_COL_DIFF_MASK		(0xF << DENALI_CTL53_COL_DIFF_SHIFT)
+#define DENALI_CTL53_ROW_DIFF_SHIFT		(16)
+#define DENALI_CTL53_ROW_DIFF_MASK		(0x7 << DENALI_CTL53_ROW_DIFF_SHIFT)
+#define DENALI_CTL53_BANK_DIFF_SHIFT		(8)
+#define DENALI_CTL53_BANK_DIFF_MASK		(0x3 << DENALI_CTL53_BANK_DIFF_SHIFT)
+
+#define DENALI_CTL54_ADDR_CMP_EN_SHIFT		(24)
+#define DENALI_CTL54_ADDR_CMP_EN_MASK		(1 << DENALI_CTL54_ADDR_CMP_EN_SHIFT)
+#define DENALI_CTL54_COMMAND_AGE_COUNT_SHIFT	(16)
+#define DENALI_CTL54_COMMAND_AGE_COUNT_MASK	(0xFF << DENALI_CTL54_COMMAND_AGE_COUNT_SHIFT)
+#define DENALI_CTL54_AGE_COUNT_SHIFT		(8)
+#define DENALI_CTL54_AGE_COUNT_MASK		(0xFF << DENALI_CTL54_AGE_COUNT_SHIFT)
+#define DENALI_CTL54_APREBIT_SHIFT		(0)
+#define DENALI_CTL54_APREBIT_MASK		(0xF << DENALI_CTL54_APREBIT_SHIFT)
+
+#define DENALI_CTL55_RW_SAME_EN_SHIFT		(24)
+#define DENALI_CTL55_RW_SAME_EN_MASK 		(1 << DENALI_CTL55_RW_SAME_EN_SHIFT)
+#define DENALI_CTL55_PRIORITY_EN_SHIFT		(16)
+#define DENALI_CTL55_PRIORITY_EN_MASK 		(1 << DENALI_CTL55_PRIORITY_EN_SHIFT)
+#define DENALI_CTL55_PLACEMENT_EN_SHIFT		(8)
+#define DENALI_CTL55_PLACEMENT_EN_MASK 		(1 << DENALI_CTL55_PLACEMENT_EN_SHIFT)
+#define DENALI_CTL55_BANK_SPLIT_EN_SHIFT	(0)
+#define DENALI_CTL55_BANK_SPLIT_EN_MASK		(1 << DENALI_CTL55_BANK_SPLIT_EN_SHIFT)
+
+#define DENALI_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT_SHIFT	(24)
+#define DENALI_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT_MASK	(3 << DENALI_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT_SHIFT)
+#define DENALI_CTL56_RW_SAME_PAGE_EN_SHIFT			(0)
+#define DENALI_CTL56_RW_SAME_PAGE_EN_MASK			(1 << DENALI_CTL56_RW_SAME_PAGE_EN_SHIFT)
+
+#define DENALI_CTL57_INHIBIT_DRAM_CMD_SHIFT		(24)
+#define DENALI_CTL57_INHIBIT_DRAM_CMD_MASK		(1 << DENALI_CTL57_INHIBIT_DRAM_CMD_SHIFT)
+#define DENALI_CTL57_DISABLE_RD_INTERLEAVE_SHIFT	(16)
+#define DENALI_CTL57_DISABLE_RD_INTERLEAVE_MASK		(1 << DENALI_CTL57_DISABLE_RD_INTERLEAVE_SHIFT)
+#define DENALI_CTL57_SWAP_EN_SHIFT			(8)
+#define DENALI_CTL57_SWAP_EN_MASK			(1 << DENALI_CTL57_SWAP_EN_SHIFT)
+#define DENALI_CTL57_NUM_Q_ENTRIES_ACT_DISABLE_SHIFT	(0)
+#define DENALI_CTL57_NUM_Q_ENTRIES_ACT_DISABLE_MASK	(0x7 << DENALI_CTL57_NUM_Q_ENTRIES_ACT_DISABLE_SHIFT)
+
+#define DENALI_CTL58_REDUC_SHIFT			(16)
+#define DENALI_CTL58_REDUC_MASK				(1 << DENALI_CTL58_REDUC_SHIFT)
+
+#define DENALI_CTL59_CTRLUPD_REQ_SHIFT			(24)
+#define DENALI_CTL59_CTRLUPD_REQ_MASK			(1 << DENALI_CTL59_CTRLUPD_REQ_SHIFT)
+#define DENALI_CTL59_CONTROLLER_BUSY_SHIFT		(16)
+#define DENALI_CTL59_CONTROLLER_BUSY_MASK		(1 << DENALI_CTL59_CONTROLLER_BUSY_SHIFT)
+#define DENALI_CTL59_IN_ORDER_ACCEPT_SHIFT		(8)
+#define DENALI_CTL59_IN_ORDER_ACCEPT_MASK		(1 << DENALI_CTL59_IN_ORDER_ACCEPT_SHIFT)
+#define DENALI_CTL59_Q_FULLNESS_SHIFT			(0)
+#define DENALI_CTL59_Q_FULLNESS_MASK			(0x7 << DENALI_CTL59_Q_FULLNESS_SHIFT)
+
+#define DENALI_CTL60_CTRLUPD_REQ_PER_AREF_EN_SHIFT	(0)
+#define DENALI_CTL60_CTRLUPD_REQ_PER_AREF_EN_MASK	(1 << DENALI_CTL60_CTRLUPD_REQ_PER_AREF_EN_SHIFT)
+
+#define DENALI_CTL61_INTSTA_INIT_COMPL_MASK	(1 << 8)
+
+#define DENALI_CTL62_INTACK_INIT_COMPL_MASK	(1 << 8)
+
+#define DENALI_CTL70_ODT_EN_SHIFT		(24)
+#define DENALI_CTL70_ODT_EN_MASK		(1 << DENALI_CTL70_ODT_EN_SHIFT)
+#define DENALI_CTL70_TODTH_WR_SHIFT		(8)
+#define DENALI_CTL70_TODTH_WR_MASK		(0xF << DENALI_CTL70_TODTH_WR_SHIFT)
+#define DENALI_CTL70_TODTL_2CMD_SHIFT		(0)
+#define DENALI_CTL70_TODTL_2CMD_MASK		(0x1F << DENALI_CTL70_TODTL_2CMD_SHIFT)
+
+#define DENALI_CTL73_W2W_SAMECS_DLY_SHIFT	(24)
+#define DENALI_CTL73_W2W_SAMECS_DLY_MASK	(0x7 << DENALI_CTL73_W2W_SAMECS_DLY_SHIFT)
+#define DENALI_CTL73_W2R_SAMECS_DLY_SHIFT	(16)
+#define DENALI_CTL73_W2R_SAMECS_DLY_MASK	(0x7 << DENALI_CTL73_W2R_SAMECS_DLY_SHIFT)
+#define DENALI_CTL73_R2W_SAMECS_DLY_SHIFT	(8)
+#define DENALI_CTL73_R2W_SAMECS_DLY_MASK	(0x7 << DENALI_CTL73_R2W_SAMECS_DLY_SHIFT)
+#define DENALI_CTL73_R2R_SAMECS_DLY_SHIFT	(0)
+#define DENALI_CTL73_R2R_SAMECS_DLY_MASK	(0x7 << DENALI_CTL73_R2R_SAMECS_DLY_SHIFT)
+
+#define DENALI_CTL78_WLMRD_SHIFT		(24)
+#define DENALI_CTL78_WLMRD_MASK			(0x3F << DENALI_CTL78_WLMRD_SHIFT)
+#define DENALI_CTL78_WLDQSEN_SHIFT		(16)
+#define DENALI_CTL78_WLDQSEN_MASK		(0x3F << DENALI_CTL78_WLDQSEN_SHIFT)
+
+#define DENALI_CTL81_WRLVL_DELAY_1_SHIFT	(16)
+#define DENALI_CTL81_WRLVL_DELAY_1_MASK		(0xFFFF << DENALI_CTL81_WRLVL_DELAY_1_SHIFT)
+#define DENALI_CTL81_WRLVL_DELAY_0_SHIFT	(0)
+#define DENALI_CTL81_WRLVL_DELAY_0_MASK		(0xFFFF << DENALI_CTL81_WRLVL_DELAY_0_SHIFT)
+
+#define DENALI_CTL82_WRLVL_DELAY_3_SHIFT	(16)
+#define DENALI_CTL82_WRLVL_DELAY_3_MASK		(0xFFFF << DENALI_CTL82_WRLVL_DELAY_3_SHIFT)
+#define DENALI_CTL82_WRLVL_DELAY_2_SHIFT	(0)
+#define DENALI_CTL82_WRLVL_DELAY_2_MASK		(0xFFFF << DENALI_CTL82_WRLVL_DELAY_2_SHIFT)
+
+#define DENALI_CTL83_RDLVL_GATE_REQ_SHIFT	(24)
+#define DENALI_CTL83_RDLVL_GATE_REQ_MASK	(1 << DENALI_CTL83_RDLVL_GATE_REQ_SHIFT)
+#define DENALI_CTL83_RDLVL_REQ_SHIFT		(16)
+#define DENALI_CTL83_RDLVL_REQ_MASK		(1 << DENALI_CTL83_RDLVL_REQ_SHIFT)
+#define DENALI_CTL83_WRLVL_DELAY_4_SHIFT	(0)
+#define DENALI_CTL83_WRLVL_DELAY_4_MASK		(0xFFFF << DENALI_CTL83_WRLVL_DELAY_4_SHIFT)
+
+#define DENALI_CTL88_RDLVL_GATE_DELAY_0_SHIFT	(16)
+#define DENALI_CTL88_RDLVL_GATE_DELAY_0_MASK	(0xFFFF << DENALI_CTL88_RDLVL_GATE_DELAY_0_SHIFT)
+#define DENALI_CTL88_RDLVL_DELAY_0_SHIFT	(0)
+#define DENALI_CTL88_RDLVL_DELAY_0_MASK		(0xFFFF << DENALI_CTL88_RDLVL_DELAY_0_SHIFT)
+
+#define DENALI_CTL91_RDLVL_DELAY_1_SHIFT	(8)
+#define DENALI_CTL91_RDLVL_DELAY_1_MASK		(0xFFFF << DENALI_CTL91_RDLVL_DELAY_1_SHIFT)
+#define DENALI_CTL91_RDLVL_OFFSET_DIR_1_SHIFT	(0)
+#define DENALI_CTL91_RDLVL_OFFSET_DIR_1_MASK	(1 << DENALI_CTL91_RDLVL_OFFSET_DIR_1_SHIFT)
+
+#define DENALI_CTL95_RDLVL_GATE_DELAY_2_SHIFT	(16)
+#define DENALI_CTL95_RDLVL_GATE_DELAY_2_MASK	(0xFFFF << DENALI_CTL95_RDLVL_GATE_DELAY_2_SHIFT)
+#define DENALI_CTL95_RDLVL_DELAY_2_SHIFT	(0)
+#define DENALI_CTL95_RDLVL_DELAY_2_MASK		(0xFFFF << DENALI_CTL95_RDLVL_DELAY_2_SHIFT)
+
+#define DENALI_CTL98_RDLVL_DELAY_3_SHIFT	(8)
+#define DENALI_CTL98_RDLVL_DELAY_3_MASK		(0xFFFF << DENALI_CTL98_RDLVL_DELAY_3_SHIFT)
+#define DENALI_CTL98_RDLVL_OFFSET_DIR_3_SHIFT	(0)
+#define DENALI_CTL98_RDLVL_OFFSET_DIR_3_MASK	(1 << DENALI_CTL98_RDLVL_OFFSET_DIR_3_SHIFT)
+
+#define DENALI_CTL99_RDLVL_BEGIN_DELAY_4_SHIFT	(16)
+#define DENALI_CTL99_RDLVL_BEGIN_DELAY_4_MASK	(0xFFFF << DENALI_CTL99_RDLVL_BEGIN_DELAY_4_SHIFT)
+#define DENALI_CTL99_RDLVL_GATE_DELAY_3_SHIFT	(0)
+#define DENALI_CTL99_RDLVL_GATE_DELAY_3_MASK	(0xFFFF << DENALI_CTL99_RDLVL_GATE_DELAY_3_SHIFT)
+
+#define DENALI_CTL102_RDLVL_GATE_DELAY_4_SHIFT	(16)
+#define DENALI_CTL102_RDLVL_DELAY_4_SHIFT	(0)
+
+#define DENALI_CTL103_AXI1_ALL_STROBES_USED_ENABLE_SHIFT	(24)
+#define DENALI_CTL103_AXI0_W_PRIORITY_SHIFT			(16)
+#define DENALI_CTL103_AXI0_R_PRIORITY_SHIFT			(8)
+#define DENALI_CTL103_AXI0_ALL_STROBES_USED_ENABLE_SHIFT	(0)
+
+#define DENALI_CTL104_AXI2_R_PRIORITY_SHIFT			(24)
+#define DENALI_CTL104_AXI2_ALL_STROBES_USED_ENABLE_SHIFT	(16)
+#define DENALI_CTL104_AXI1_W_PRIORITY_SHIFT			(8)
+#define DENALI_CTL104_AXI1_R_PRIORITY_SHIFT			(0)
+
+#define DENALI_CTL105_AXI3_W_PRIORITY_SHIFT			(24)
+#define DENALI_CTL105_AXI3_R_PRIORITY_SHIFT			(16)
+#define DENALI_CTL105_AXI3_ALL_STROBES_USED_ENABLE_SHIFT	(8)
+#define DENALI_CTL105_AXI2_W_PRIORITY_SHIFT			(0)
+
+#define DENALI_CTL106_WEIGHTED_ROUND_ROBIN_LATENCY_CONTROL_SHIFT	(24)
+#define DENALI_CTL106_AXI4_W_PRIORITY_SHIFT				(16)
+#define DENALI_CTL106_AXI4_R_PRIORITY_SHIFT				(8)
+#define DENALI_CTL106_AXI4_ALL_STROBES_USED_ENABLE_SHIFT		(0)
+
+#define DENALI_CTL107_AXI0_PRIORITY1_RELATIVE_PRIORITY_SHIFT	(24)
+#define DENALI_CTL107_AXI0_PRIORITY0_RELATIVE_PRIORITY_SHIFT	(16)
+#define DENALI_CTL107_WRR_PARAM_VALUE_ERR_SHIFT			(8)
+#define DENALI_CTL107_WEIGHTED_ROUND_ROBIN_WEIGHT_SHARING_SHIFT	(0)
+
+#define DENALI_CTL108_AXI0_PORT_ORDERING_SHIFT			(16)
+#define DENALI_CTL108_AXI0_PRIORITY3_RELATIVE_PRIORITY_SHIFT	(8)
+#define DENALI_CTL108_AXI0_PRIORITY2_RELATIVE_PRIORITY_SHIFT	(0)
+
+#define DENALI_CTL109_AXI1_PRIORITY1_RELATIVE_PRIORITY_SHIFT	(24)
+#define DENALI_CTL109_AXI1_PRIORITY0_RELATIVE_PRIORITY_SHIFT	(16)
+#define DENALI_CTL109_AXI0_PRIORITY_RELAX_SHIFT			(0)
+
+#define DENALI_CTL110_AXI1_PORT_ORDERING_SHIFT			(16)
+#define DENALI_CTL110_AXI1_PRIORITY3_RELATIVE_PRIORITY_SHIFT	(8)
+#define DENALI_CTL110_AXI1_PRIORITY2_RELATIVE_PRIORITY_SHIFT	(0)
+
+#define DENALI_CTL111_AXI2_PRIORITY1_RELATIVE_PRIORITY_SHIFT	(24)
+#define DENALI_CTL111_AXI2_PRIORITY0_RELATIVE_PRIORITY_SHIFT	(16)
+#define DENALI_CTL111_AXI1_PRIORITY_RELAX_SHIFT			(0)
+
+#define DENALI_CTL112_AXI2_PORT_ORDERING_SHIFT			(16)
+#define DENALI_CTL112_AXI2_PRIORITY3_RELATIVE_PRIORITY_SHIFT	(8)
+#define DENALI_CTL112_AXI2_PRIORITY2_RELATIVE_PRIORITY_SHIFT	(0)
+
+#define DENALI_CTL113_AXI3_PRIORITY1_RELATIVE_PRIORITY_SHIFT	(24)
+#define DENALI_CTL113_AXI3_PRIORITY0_RELATIVE_PRIORITY_SHIFT	(16)
+#define DENALI_CTL113_AXI2_PRIORITY_RELAX_SHIFT			(0)
+
+#define DENALI_CTL114_AXI3_PORT_ORDERING_SHIFT			(16)
+#define DENALI_CTL114_AXI3_PRIORITY3_RELATIVE_PRIORITY_SHIFT	(8)
+#define DENALI_CTL114_AXI3_PRIORITY2_RELATIVE_PRIORITY_SHIFT	(0)
+
+#define DENALI_CTL115_AXI4_PRIORITY1_RELATIVE_PRIORITY_SHIFT	(24)
+#define DENALI_CTL115_AXI4_PRIORITY0_RELATIVE_PRIORITY_SHIFT	(16)
+#define DENALI_CTL115_AXI3_PRIORITY_RELAX_SHIFT			(0)
+
+#define DENALI_CTL116_AXI4_PORT_ORDERING_SHIFT			(16)
+#define DENALI_CTL116_AXI4_PRIORITY3_RELATIVE_PRIORITY_SHIFT	(8)
+#define DENALI_CTL116_AXI4_PRIORITY2_RELATIVE_PRIORITY_SHIFT	(0)
+
+#define DENALI_CTL117_MEM_RST_VALID_SHIFT			(24)
+#define DENALI_CTL117_CKE_STATUS_SHIFT				(16)
+#define DENALI_CTL117_AXI4_PRIORITY_RELAX_SHIFT			(0)
+
+#define DENALI_CTL119_DRAM_CLK_DISABLE_SHIFT			(24)
+#define DENALI_CTL119_TDFI_RDDATA_EN_SHIFT			(16)
+#define DENALI_CTL119_TDFI_PHY_RDLAT_SHIFT			(8)
+#define DENALI_CTL119_UPDATE_ERROR_STATUS_SHIFT			(0)
+
+#define DENALI_CTL120_TDFI_CTRLUPD_MAX_SHIFT			(8)
+#define DENALI_CTL120_TDFI_CTRLUPD_MIN_SHIFT			(0)
+
+#define DENALI_CTL121_TDFI_PHYUPD_TYPE1_SHIFT			(16)
+#define DENALI_CTL121_TDFI_PHYUPD_TYPE0_SHIFT			(0)
+
+#define DENALI_CTL122_TDFI_PHYUPD_TYPE3_SHIFT			(16)
+#define DENALI_CTL122_TDFI_PHYUPD_TYPE2_SHIFT			(0)
+
+#define DENALI_CTL123_TDFI_PHYUPD_RESP_SHIFT			(0)
+
+#define DENALI_CTL124_TDFI_CTRLUPD_INTERVAL_SHIFT		(0)
+
+#define DENALI_CTL125_TDFI_DRAM_CLK_DISABLE_SHIFT		(24)
+#define DENALI_CTL125_TDFI_CTRL_DELAY_SHIFT			(16)
+#define DENALI_CTL125_WRLAT_ADJ_SHIFT				(8)
+#define DENALI_CTL125_RDLAT_ADJ_SHIFT				(0)
+#define SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE	DENALI_CTL125_TDFI_DRAM_CLK_DISABLE_SHIFT
+#define SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY		DENALI_CTL125_TDFI_CTRL_DELAY_SHIFT
+#define SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ			DENALI_CTL125_WRLAT_ADJ_SHIFT
+#define SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ			DENALI_CTL125_RDLAT_ADJ_SHIFT
+
+#define DENALI_CTL126_TDFI_WRLVL_WW_SHIFT			(16)
+#define DENALI_CTL126_TDFI_WRLVL_EN_SHIFT			(8)
+#define DENALI_CTL126_TDFI_DRAM_CLK_ENABLE_SHIFT		(0)
+
+#define DENALI_CTL129_TDFI_WRLVL_RESPLAT_SHIFT			(24)
+#define DENALI_CTL129_TDFI_WRLVL_DLL_SHIFT			(16)
+#define DENALI_CTL129_DFI_WRLVL_MAX_DELAY_SHIFT			(0)
+
+#define DENALI_CTL130_TDFI_RDLVL_LOAD_SHIFT			(24)
+#define DENALI_CTL130_TDFI_RDLVL_DLL_SHIFT			(16)
+#define DENALI_CTL130_TDFI_RDLVL_EN_SHIFT			(8)
+#define DENALI_CTL130_TDFI_WRLVL_LOAD_SHIFT			(0)
+
+#define DENALI_CTL131_RDLVL_MAX_DELAY_SHIFT			(8)
+#define DENALI_CTL131_TDFI_RDLVL_RESPLAT_SHIFT			(0)
+
+#define DENALI_CTL132_TDFI_RDLVL_RR_SHIFT			(16)
+#define DENALI_CTL132_RDLVL_GATE_MAX_DELAY_SHIFT		(0)
+
+#define DENALI_CTL133_TDFI_RDLVL_RESP_SHIFT			(0)
+
+#define DENALI_CTL142_TDFI_PHY_WRDATA_SHIFT			(0)
+
+#define DENALI_CTL150_RESERVED3_SHIFT				(24)
+#define DENALI_CTL150_AXI4_WRCMD_PROC_FIFO_LOG2_DEPTH_SHIFT	(16)
+#define DENALI_CTL150_AXI4_WRFIFO_LOG2_DEPTH_SHIFT		(8)
+#define DENALI_CTL150_AXI4_RDFIFO_LOG2_DEPTH_SHIFT		(0)
+
+#define DENALI_CTRL152_ECC_EN_SHIFT				(0)
+#define SRT_NX4000_DDR_CTRL_CTL152_ECC_EN			DENALI_CTRL152_ECC_EN_SHIFT
+
+#define DENALI_CTL160_INT_MASK_SHIFT				(0)
+#define SRT_NX4000_DDR_CTRL_CTL160_INT_MASK			DENALI_CTL160_INT_MASK_SHIFT
+
+#endif /* _NETX4000_DDR_H_ */
diff --git a/arch/arm/mach-netx4000/include/mach/netx4000_dma.h b/arch/arm/mach-netx4000/include/mach/netx4000_dma.h
new file mode 100644
index 0000000000..a0833406f9
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/netx4000_dma.h
@@ -0,0 +1,39 @@
+/*
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+#ifndef _NETX4000_DMA_H_
+#define _NETX4000_DMA_H_
+
+#include <mach/netx4000_regs.h>
+
+#define RAP_DMAC_REG_DST_END	0x00000018
+
+#define RAP_DMAC_CH_0_SA	0x00000000
+#define RAP_DMAC_CH_0_DA	0x00000004
+#define RAP_DMAC_CH_0_TB	0x00000008
+#define RAP_DMAC_CH_CHCTRL	0x00000028
+#define RAP_DMAC_CH_CHCFG	0x0000002C
+
+#define MSK_NX4000_RAP_DMAC_CH_CHCTRL_SETEN	0x00000001
+#define MSK_NX4000_RAP_DMAC_CH_CHCTRL_CLREN	0x00000002
+#define MSK_NX4000_RAP_DMAC_CH_CHCTRL_STG	0x00000004
+#define MSK_NX4000_RAP_DMAC_CH_CHCTRL_SWRST	0x00000008
+#define MSK_NX4000_RAP_DMAC_CH_CHCTRL_CLRSUS	0x00000200
+
+#define MSK_NX4000_RAP_DMAC_CH_CHCFG_SAD	0x00100000
+#define MSK_NX4000_RAP_DMAC_CH_CHCFG_TM		0x00400000
+#define SRT_NX4000_RAP_DMAC_CH_CHCFG_DDS	16
+#define SRT_NX4000_RAP_DMAC_CH_CHCFG_SDS	12
+#define DFLT_VAL_NX4000_RAP_DMAC_CH_CHCFG	0x00000000
+
+#endif /* _NETX4000_DMA_H_ */
diff --git a/arch/arm/mach-netx4000/include/mach/netx4000_regs.h b/arch/arm/mach-netx4000/include/mach/netx4000_regs.h
new file mode 100644
index 0000000000..fb6aaf02ea
--- /dev/null
+++ b/arch/arm/mach-netx4000/include/mach/netx4000_regs.h
@@ -0,0 +1,54 @@
+/*
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+#ifndef _NETX4000_REGS_H_
+#define _NETX4000_REGS_H_
+
+#define NETX4000_SYSTEMCTRL_VIRT_BASE   (0xF8000000)
+
+#define Adr_NX4000_DDR_CTRL_CTL_00	0xF8001000U
+
+#define NETX4000_RAP_UART_BASE(n)	(0xF8036000 + (n) * 0x1000)
+
+#define NETX4000_AXI_RAM_SPACE_START	(0x05000000)
+
+#define NETX4000_DDR_ADDR_SPACE_START	(0x40000000)
+
+#define NETX4000_DDRREGS_BASE		Adr_NX4000_DDR_CTRL_CTL_00
+#define NETX4000_DDRPHY_BASE		(0xF8002000)
+
+#define NETX4000_A9_PERIPHBASE_START (0xFAF00000)
+#define NETX4000_A9_SCUREGS_BASE (NETX4000_A9_PERIPHBASE_START)
+#define NETX4000_A9_IRQCTRL_BASE (NETX4000_A9_PERIPHBASE_START + 0x0100)
+#define NETX4000_A9_GLOBALTIMER_BASE (NETX4000_A9_PERIPHBASE_START + 0x0200)
+#define NETX4000_A9_PRIVATETIMER_BASE  (NETX4000_A9_PERIPHBASE_START + 0x0600)
+
+#define NETX4000_A9_PERIPHBASE_START  (0xFAF00000)
+#define NETX4000_A9_SCUREGS_BASE (NETX4000_A9_PERIPHBASE_START)
+#define NETX4000_A9_IRQCTRL_BASE (NETX4000_A9_PERIPHBASE_START + 0x0100)
+#define NETX4000_A9_GLOBALTIMER_BASE (NETX4000_A9_PERIPHBASE_START + 0x0200)
+#define NETX4000_A9_PRIVATETIMER_BASE  (NETX4000_A9_PERIPHBASE_START + 0x0600)
+#define NETX4000_A9_PL310_BASE (NETX4000_A9_PERIPHBASE_START + 0x10000)
+
+#define NETX4000_USB2CFG		(0xF8000010)
+/* USB interface Port setting signal 0 = Port1 Function, Port2 Host; */
+/*                                   1 = Port1 Host, Port2 Host */
+#define NETX4000_USB2CFG_H2MODE_MASK	(0x00000002)
+/* Direct power down control */
+#define NETX4000_USB2CFG_DIRPD_MASK	(0x00000001)
+
+/* DMA controller definitions */
+#define NETX4000_DMAC0			(0xF8019000)
+#define NETX4000_DMAC0_REG		(0xF8019300)
+
+#endif /* _NETX4000_REGS_H_ */
diff --git a/arch/arm/mach-netx4000/reset.c b/arch/arm/mach-netx4000/reset.c
new file mode 100644
index 0000000000..cef9502e34
--- /dev/null
+++ b/arch/arm/mach-netx4000/reset.c
@@ -0,0 +1,19 @@
+#include <common.h>
+#include <linux/io.h>
+
+#define RAP_SYSCTRL_RSTCTRL 0xf8000050
+#define RAP_SYSCTRL_RSTMASK 0xf8000054
+
+void reset_cpu(unsigned long ignored)
+{
+	uint32_t reset_mask = 0;
+
+	/* Clear RAM that the ROM code uses to remember booting alternate firmware */
+	memset((void*)0x05100000, 0, 256);
+	dmb();
+
+	reset_mask = readl(RAP_SYSCTRL_RSTMASK);
+	writel((reset_mask | 1), RAP_SYSCTRL_RSTMASK);
+	writel(1, RAP_SYSCTRL_RSTCTRL);
+	while (1) ;
+}
diff --git a/arch/arm/mach-netx4000/timer.c b/arch/arm/mach-netx4000/timer.c
new file mode 100644
index 0000000000..4fcf3adf1a
--- /dev/null
+++ b/arch/arm/mach-netx4000/timer.c
@@ -0,0 +1,54 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+ */
+
+#include <common.h>
+#include <linux/io.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+extern uint32_t get_netx4000_cpu_rate(void);
+
+/* Global Timer */
+#define GLOBAL_TIMER_OFFSET	0x200
+
+/* Global Timer Counter Registers */
+#define GTIMER_CNT_L		0x00
+#define GTIMER_CNT_H		0x04
+
+/* Global Timer Control Register */
+#define GTIMER_CTRL		0x08
+
+static void *get_global_timer_base(void)
+{
+	void *val;
+
+	asm("mrc p15, 4, %0, c15, c0, 0" : "=r" (val) : : "memory");
+
+	return val + GLOBAL_TIMER_OFFSET;
+}
+
+unsigned long timer_read_counter(void)
+{
+	/*
+	 * ARM 64bit Global Timer is too much for our purpose.
+	 * We use only lower 32 bit of the timer counter.
+	 */
+	return readl(get_global_timer_base() + GTIMER_CNT_L);
+}
+
+int timer_init(void)
+{
+	gd->arch.timer_rate_hz = get_netx4000_cpu_rate() / 2;
+
+	/* enable timer */
+	writel(1, get_global_timer_base() + GTIMER_CTRL);
+
+	return 0;
+}
+
+ulong get_tbclk(void)
+{
+        return gd->arch.timer_rate_hz;
+}
diff --git a/board/hilscher/netx4000/Makefile b/board/hilscher/netx4000/Makefile
new file mode 100644
index 0000000000..ef37063bd9
--- /dev/null
+++ b/board/hilscher/netx4000/Makefile
@@ -0,0 +1,5 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+
+obj-y	+= board.o device-label.o
diff --git a/board/hilscher/netx4000/board.c b/board/hilscher/netx4000/board.c
new file mode 100644
index 0000000000..6a1e3e2e90
--- /dev/null
+++ b/board/hilscher/netx4000/board.c
@@ -0,0 +1,51 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <config.h>
+#include "device-label.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/*
+ * board_init - early hardware init
+ */
+int board_init(void)
+{
+	/*
+	 * Address of boot parameters passed to kernel
+	 * Use default offset 0x100
+	 */
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x100;
+
+	return 0;
+}
+
+int misc_init_r(void)
+{
+	read_flash_device_label();
+
+	return 0;
+}
+
+uint32_t netx4000_ddr_init(void);
+/*
+ * dram_init - sets u-boot's idea of sdram size
+ */
+int dram_init(void)
+{
+	gd->ram_size = netx4000_ddr_init();
+
+	return 0;
+}
+
+int dram_init_banksize(void)
+{
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
+	gd->bd->bi_dram[0].size = gd->ram_size;
+
+	return 0;
+}
diff --git a/board/hilscher/netx4000/device-label.c b/board/hilscher/netx4000/device-label.c
new file mode 100644
index 0000000000..711bd17427
--- /dev/null
+++ b/board/hilscher/netx4000/device-label.c
@@ -0,0 +1,123 @@
+#include <common.h>
+#include <net.h>
+#include <linux/ctype.h>
+#include <asm/io.h>
+#include <u-boot/crc.h>
+#include <u-boot/sha256.h>
+#include "device-label.h"
+
+static struct fdl_content const* netx4000_check_fdl(u32 fdl_addr)
+{
+	struct fdl_header const *header = (struct fdl_header const*)fdl_addr;
+	struct fdl_content const *content = (void*)header + sizeof(*header);
+	struct fdl_footer const *footer = (void*)content + header->usContentSize;
+
+	pr_info("FDL: Searching for FDL at 0x%p ...", header);
+
+	while (1) {
+		u32 crc;
+
+		/* Verify header, footer, checksum */
+		if (strncmp(header->abStartToken, "ProductData>", sizeof(header->abStartToken)) != 0) {
+			u8 buf[sizeof(header->abStartToken)], i;
+
+			for(i = 0; i < sizeof(header->abStartToken); i++) {
+				buf[i] = (isprint(header->abStartToken[i])) ? header->abStartToken[i] : '.';
+			}
+			pr_err("FDL: Start token mismatch ('%.*s' instead of '%s')\n", sizeof(header->abStartToken), buf, "ProductData>");
+			break;
+		}
+		if (header->usLabelSize > 4096 ) {
+			pr_err("FDL:  Length exceeds 4KiB range (%d)\n", header->usLabelSize);
+			break;
+		}
+		if (header->usContentSize > (4096 - sizeof(*header) - sizeof(*footer))) {
+			pr_err("FDL:  Length exceeds 4KiB-32B range (%d)\n", header->usContentSize);
+			break;
+		}
+		if (strncmp(footer->abEndToken, "<ProductData", sizeof(footer->abEndToken)) != 0) {
+			u8 buf[sizeof(header->abStartToken)], i;
+
+			for(i = 0; i < sizeof(header->abStartToken); i++) {
+				buf[i] = (isprint(header->abStartToken[i])) ? header->abStartToken[i] : '.';
+			}
+			pr_err("FDL:  End token mismatch ('%.*s' instead of '%s')\n", sizeof(footer->abEndToken), buf, "<ProductData");
+			break;
+		}
+		crc = crc32(0, (void*)content, header->usContentSize);
+		if (footer->ulCRC != crc) {
+			pr_err("FDL: CRC mismatch (0x%08x instead of 0x%08x)\n", footer->ulCRC, crc);
+			break;
+		}
+
+		pr_info(" ... found\n");
+		return content;
+	}
+
+	return NULL;
+}
+
+static void set_eth_mac(int eth_idx, u8 const* mac)
+{
+	char eth_if[9];
+	char eth_mac[18];
+
+	if(eth_idx == 0)
+		sprintf(eth_if, "ethaddr");
+	else
+		sprintf(eth_if, "eth%daddr", eth_idx);
+
+	sprintf(eth_mac, "%02X:%02X:%02X:%02X:%02X:%02X",
+		mac[0], mac[1], mac[2],
+		mac[3], mac[4], mac[5]);
+	if(!env_get(eth_if))
+		env_set(eth_if, eth_mac);
+}
+
+static void netx4000_create_local_mac_address(int eth_idx)
+{
+	u32 chipid[4];
+	sha256_context ctx;
+	u8 hash[SHA256_SUM_LEN];
+
+	chipid[0] = readl(0xf80000b0);
+	chipid[1] = readl(0xf80000b4);
+	chipid[2] = readl(0xf80000b8);
+	chipid[3] = readl(0xf80000bc);
+	pr_debug("chipid: %08x-%08x-%08x-%08x\n", chipid[0], chipid[1], chipid[2], chipid[3]);
+
+	sha256_starts(&ctx);
+	sha256_update(&ctx, (void*)&chipid[0], sizeof(chipid[0]) * 4);
+	sha256_finish(&ctx, hash);
+
+	hash[5] += eth_idx;
+
+	hash[0] &= ~0x1; /* mark it as individual mac address */
+	hash[0] |= 0x2;  /* mark it as local mac address */
+
+	set_eth_mac(eth_idx, hash);
+}
+
+void read_flash_device_label(void)
+{
+	struct fdl_content const* fdl;
+	int i;
+
+	/* Parse flash-device-label stored in SDRAM and initialize device label. */
+	fdl = netx4000_check_fdl(CONFIG_FDL_ADDRESS);
+	if (!fdl) {
+		pr_err("FDL: !! Invalid or missing Flash-Device-Label @0x%08X !!!\n", CONFIG_FDL_ADDRESS);
+
+		for(i=0;i<4;i++)
+			netx4000_create_local_mac_address(i);
+
+	} else {
+		for(i=0;i<4;i++) {
+			/* Check for valid MAC addresses */
+			if (!is_valid_ethaddr(fdl->mac_app.mac[i].macaddr))
+				netx4000_create_local_mac_address(i);
+			else
+				set_eth_mac(i, fdl->mac_app.mac[i].macaddr);
+		}
+	}
+}
diff --git a/board/hilscher/netx4000/device-label.h b/board/hilscher/netx4000/device-label.h
new file mode 100644
index 0000000000..fbb3a1665b
--- /dev/null
+++ b/board/hilscher/netx4000/device-label.h
@@ -0,0 +1,77 @@
+#ifndef __DEVICE_LABEL__H
+#define __DEVICE_LABEL__H
+
+extern void read_flash_device_label(void);
+
+struct fdl_header {
+	char abStartToken[12];  // Fixed String to detect the begin of the device production data 'ProductData>'
+	u16 usLabelSize;      // Size of the complete Label incl. this header and the footer
+	u16 usContentSize;
+};
+
+struct fdl_basic_device_data {
+	u16 manufacturer;
+	u16 deviceclass;
+	u32 devicenumber;
+	u32 serialnumber;
+	u8  hwcompat;
+	u8  hwrevision;
+	u16 productiondate;
+	u8  reserved[16];
+};
+
+struct fdl_mac_address_entry {
+	u8 macaddr[6];
+	u8 reserved[2];
+};
+
+struct fdl_mac_addresses_communication_side {
+	struct fdl_mac_address_entry mac[8];
+};
+
+struct fdl_mac_addresses_application_side {
+	struct fdl_mac_address_entry mac[4];
+};
+
+struct fdl_product_identification_information {
+	u16 usb_vid;
+	u16 usb_pid;
+	u8 usb_vendor_name[16];
+	u8 usb_product_name[16];
+	u8 reserved[76];
+};
+
+#define OEM_IDENTIFICATION_FLAG_SERIALNR	0x00000001
+#define OEM_IDENTIFICATION_FLAG_ORDERNR		0x00000002
+#define OEM_IDENTIFICATION_FLAG_HWREV		0x00000004
+#define OEM_IDENTIFICATION_FLAG_PRODDATA	0x00000008
+
+struct fdl_oem_identification {
+	u32 oem_option_flags;
+	char serialnr[28];
+	char ordernr[32];
+	char hwrevision[16];
+	char production_date[32];
+	u8 reserved[12];
+	u8 vendor_data[112];
+};
+
+struct fdl_flash_layout {
+	u8 dummy[488];
+};
+
+struct fdl_footer {
+	u32 ulCRC;          // CRC-32 (IEEE 802.3) of Content
+	char abEndToken[12];  //Fixed String to detect the end of the device production data: '<ProductData'
+};
+
+struct fdl_content{
+	struct fdl_basic_device_data bdd;
+	struct fdl_mac_addresses_communication_side mac_com;
+	struct fdl_mac_addresses_application_side  mac_app;
+	struct fdl_product_identification_information pii;
+	struct fdl_oem_identification oi;
+	struct fdl_flash_layout fl;
+};
+
+#endif /* __DEVICE_LABEL__H */
diff --git a/configs/netx4000_defconfig b/configs/netx4000_defconfig
new file mode 100644
index 0000000000..f29face800
--- /dev/null
+++ b/configs/netx4000_defconfig
@@ -0,0 +1,59 @@
+CONFIG_ARM=y
+CONFIG_ARCH_NETX4000=y
+CONFIG_MISC_INIT_R=y
+CONFIG_SYS_THUMB_BUILD=y
+CONFIG_SYS_TEXT_BASE=0x05000000
+CONFIG_SYS_MALLOC_F_LEN=0x2000
+CONFIG_FIT=y
+CONFIG_FIT_SIGNATURE=y
+CONFIG_FIT_VERBOSE=y
+CONFIG_IMAGE_FORMAT_LEGACY=y
+CONFIG_HUSH_PARSER=y
+CONFIG_DOS_PARTITION=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_MMC=y
+CONFIG_OF_CONTROL=y
+CONFIG_OF_SEPARATE=y
+CONFIG_DEFAULT_DEVICE_TREE="netx4000-nxhx4000-jtag-plus-rev4"
+CONFIG_DM_MMC=y
+CONFIG_DM_ETH=y
+CONFIG_DM_ETH_PHY=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_DWC_ETH_QOS_NETX4000=y
+CONFIG_PHY_GIGE=y
+CONFIG_DM_GPIO=y
+CONFIG_MDIO_GPIO_BITBANG=y
+CONFIG_PINCTRL=y
+CONFIG_FS_FAT=y
+
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_NETX4000=y
+CONFIG_USB_STORAGE=y
+CONFIG_CMD_USB=y
+
+CONFIG_CMD_SF=y
+CONFIG_CMD_SPI=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_WINBOND=y
+CONFIG_SPI_FLASH_USE_4K_SECTORS=y
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_NETX4000_QSPI=y
+CONFIG_PL022_SPI=y
+
+# CONFIG_CMD_BOOTEFI is not set
+# CONFIG_CMD_BOOTEFI_HELLO_COMPILE is not set
+# CONFIG_EFI_LOADER is not set
+# CONFIG_EFI_UNICODE_CAPITALIZATION is not set
+
+CONFIG_MENU=y
+CONFIG_CMD_BOOTMENU=y
diff --git a/drivers/clk/Makefile b/drivers/clk/Makefile
index d1e295ac7c..f582a0e048 100644
--- a/drivers/clk/Makefile
+++ b/drivers/clk/Makefile
@@ -29,6 +29,7 @@ obj-$(CONFIG_$(SPL_TPL_)CLK_INTEL) += intel/
 obj-$(CONFIG_CLK_HSDK) += clk-hsdk-cgu.o
 obj-$(CONFIG_CLK_K210) += kendryte/
 obj-$(CONFIG_CLK_MPC83XX) += mpc83xx_clk.o
+obj-$(CONFIG_ARCH_NETX4000) += clk-netx4000.o
 obj-$(CONFIG_CLK_OCTEON) += clk_octeon.o
 obj-$(CONFIG_CLK_OWL) += owl/
 obj-$(CONFIG_CLK_RENESAS) += renesas/
diff --git a/drivers/clk/clk-netx4000.c b/drivers/clk/clk-netx4000.c
new file mode 100644
index 0000000000..f5db7c878b
--- /dev/null
+++ b/drivers/clk/clk-netx4000.c
@@ -0,0 +1,169 @@
+/*
+* Clock driver for Hilscher netx4000 based platforms
+*
+* drivers/clk/clk-netx4000.c
+*
+* (C) Copyright 2015 Hilscher Gesellschaft fuer Systemautomation mbH
+* http://www.hilscher.com
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; version 2 of
+* the License.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+*/
+
+#include <clk-uclass.h>
+#include <common.h>
+#include <dm.h>
+#include <linux/io.h>
+
+#include <mach/netx4000_regs.h>
+
+
+/***********************************************
+ * netX4000 Peripheral Clock
+ **********************************************/
+
+/* *************************/
+/* Gated peripheral clocks */
+/* *************************/
+#define NOCPWRCTRL_OFS          (0x40)
+#define NOCPWRMASK_OFS          (0x44)
+#define NOCPWRSTAT_OFS          (0x48)
+#define CLKCFG_OFS              (0x4C)
+
+struct netx4000_periph_clk {
+	u32 rate;
+	u32 portctrl_mask;
+};
+
+static ulong netx4000_periph_get_rate(struct clk *clk)
+{
+	struct netx4000_periph_clk *priv = dev_get_priv(clk->dev);
+
+	return priv->rate;
+}
+
+static int netx4000_periph_enable(struct clk *clk)
+{
+	struct netx4000_periph_clk *priv = dev_get_priv(clk->dev);
+	u32 mask = priv->portctrl_mask;
+	void __iomem *base = (void __iomem*)(NETX4000_SYSTEMCTRL_VIRT_BASE);
+	uint32_t val;
+
+	/* Check if this clock is allowed to be disabled/enabled by hardware */
+	if((readl(base + NOCPWRMASK_OFS) & mask) != mask)
+		return -EPERM;
+
+	/* Enable clock and power */
+	while( (readl(base + NOCPWRSTAT_OFS) & mask) != mask) {
+		val = readl(base + CLKCFG_OFS);
+		writel(val | mask, base + CLKCFG_OFS);
+		val = readl(base + NOCPWRCTRL_OFS);
+		writel(val | mask, base + NOCPWRCTRL_OFS);
+	}
+
+	return 0;
+}
+
+static int netx4000_periph_disable(struct clk *clk)
+{
+	struct netx4000_periph_clk *priv = dev_get_priv(clk->dev);
+	u32 mask = priv->portctrl_mask;
+	void __iomem *base = (void __iomem*)(NETX4000_SYSTEMCTRL_VIRT_BASE);
+	uint32_t val;
+
+	/* Check if this clock is allowed to be disabled/enabled by hardware */
+	if((readl(base + NOCPWRMASK_OFS) & mask) != mask)
+		return 0;
+
+	/* Disable clock and power */
+	val = readl(base + NOCPWRCTRL_OFS);
+	writel(val & ~mask, base + NOCPWRCTRL_OFS);
+	while( (readl(base + NOCPWRSTAT_OFS) & mask) == mask) ;
+	val = readl(base + CLKCFG_OFS);
+	writel(val & ~mask, base + CLKCFG_OFS);
+
+	return 0;
+}
+
+static const struct clk_ops netx4000_periph_ops = {
+	.get_rate = netx4000_periph_get_rate,
+	.enable = netx4000_periph_enable,
+	.disable = netx4000_periph_disable,
+};
+
+static int netx4000_periph_clk_probe(struct udevice *dev)
+{
+	struct netx4000_periph_clk *priv = dev_get_priv(dev);
+
+	ofnode_read_u32(dev_ofnode(dev), "clock-frequency", &priv->rate);
+	ofnode_read_u32(dev_ofnode(dev), "clock-mask", &priv->portctrl_mask);
+
+	return 0;
+}
+
+static const struct udevice_id netx4000_periph_clk_id[] = {
+        { .compatible = "hilscher,netx4000-periph-clock" },
+        { }
+};
+
+U_BOOT_DRIVER(netx4000_periph_clk) = {
+	.name = "netx4000-periph-clk",
+	.id = UCLASS_CLK,
+	.of_match = netx4000_periph_clk_id,
+	.probe = netx4000_periph_clk_probe,
+	.priv_auto_alloc_size = sizeof(struct netx4000_periph_clk),
+	.ops = &netx4000_periph_ops,
+	.flags = DM_FLAG_PRE_RELOC,
+};
+
+
+/***********************************************
+ * netX4000 CPU Clock
+ **********************************************/
+struct netx4000_cpu_clk {
+	u32 rate;
+};
+
+static ulong netx4000_cpu_get_rate(struct clk *clk)
+{
+	struct netx4000_cpu_clk *priv = dev_get_priv(clk->dev);
+
+	return priv->rate;
+}
+
+static const struct clk_ops netx4000_cpu_ops = {
+        .get_rate = netx4000_cpu_get_rate,
+};
+
+extern uint32_t get_netx4000_cpu_rate(void);
+static int netx4000_cpu_clk_probe(struct udevice *dev)
+{
+	struct netx4000_cpu_clk *priv = dev_get_priv(dev);
+
+	priv->rate = get_netx4000_cpu_rate();
+
+	return 0;
+}
+
+static const struct udevice_id netx4000_cpu_clk_id[] = {
+	{ .compatible = "hilscher,netx4000-cpu-clock" },
+	{ }
+};
+
+U_BOOT_DRIVER(netx4000_cpu_clk) = {
+	.name = "netx4000-cpu-clk",
+	.id = UCLASS_CLK,
+	.of_match = netx4000_cpu_clk_id,
+	.probe = netx4000_cpu_clk_probe,
+	.priv_auto_alloc_size = sizeof(struct netx4000_cpu_clk),
+	.ops = &netx4000_cpu_ops,
+	.flags = DM_FLAG_PRE_RELOC,
+};
diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index 3a5e036880..cf04df77df 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -165,6 +165,14 @@ config DWC_ETH_QOS_IMX
 	  The Synopsys Designware Ethernet QOS IP block with the specific
 	  configuration used in IMX soc.
 
+config DWC_ETH_QOS_NETX4000
+	bool "Synopsys DWC Ethernet QOS device support for netX4000"
+	depends on DWC_ETH_QOS
+	default y if ARCH_NETX4000P
+	help
+	  The Synopsys Designware Ethernet QOS IP block with the specific
+	  configuration used in Hilscher netX4000 soc.
+
 config DWC_ETH_QOS_STM32
 	bool "Synopsys DWC Ethernet QOS device support for STM32"
 	depends on DWC_ETH_QOS
diff --git a/drivers/net/dwc_eth_qos.c b/drivers/net/dwc_eth_qos.c
index db1102562f..3583a75d86 100644
--- a/drivers/net/dwc_eth_qos.c
+++ b/drivers/net/dwc_eth_qos.c
@@ -654,6 +654,31 @@ err:
 #endif
 }
 
+static int eqos_start_clks_netx4000(struct udevice *dev)
+{
+#ifdef CONFIG_CLK
+	struct eqos_priv *eqos = dev_get_priv(dev);
+	int ret;
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	ret = clk_enable(&eqos->clk_master_bus);
+	if (ret < 0) {
+		pr_err("clk_enable(clk_master_bus) failed: %d", ret);
+		goto err;
+	}
+#endif
+
+	debug("%s: OK\n", __func__);
+	return 0;
+
+#ifdef CONFIG_CLK
+err:
+	debug("%s: FAILED: %d\n", __func__, ret);
+	return ret;
+#endif
+}
+
 static int eqos_start_clks_imx(struct udevice *dev)
 {
 	return 0;
@@ -693,6 +718,19 @@ static void eqos_stop_clks_stm32(struct udevice *dev)
 	debug("%s: OK\n", __func__);
 }
 
+static void eqos_stop_clks_netx4000(struct udevice *dev)
+{
+#ifdef CONFIG_CLK
+	struct eqos_priv *eqos = dev_get_priv(dev);
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	clk_disable(&eqos->clk_master_bus);
+#endif
+
+	debug("%s: OK\n", __func__);
+}
+
 static void eqos_stop_clks_imx(struct udevice *dev)
 {
 	/* empty */
@@ -765,6 +803,11 @@ static int eqos_start_resets_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_start_resets_netx4000(struct udevice *dev)
+{
+	return 0;
+}
+
 static int eqos_start_resets_imx(struct udevice *dev)
 {
 	return 0;
@@ -797,6 +840,11 @@ static int eqos_stop_resets_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_stop_resets_netx4000(struct udevice *dev)
+{
+	return 0;
+}
+
 static int eqos_stop_resets_imx(struct udevice *dev)
 {
 	return 0;
@@ -876,6 +924,17 @@ static ulong eqos_get_tick_clk_rate_stm32(struct udevice *dev)
 #endif
 }
 
+static ulong eqos_get_tick_clk_rate_netx4000(struct udevice *dev)
+{
+#ifdef CONFIG_CLK
+	struct eqos_priv *eqos = dev_get_priv(dev);
+
+	return clk_get_rate(&eqos->clk_master_bus);
+#else
+	return 0;
+#endif
+}
+
 __weak u32 imx_get_eqos_csr_clk(void)
 {
 	return 100 * 1000000;
@@ -895,6 +954,11 @@ static int eqos_calibrate_pads_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_calibrate_pads_netx4000(struct udevice *dev)
+{
+	return 0;
+}
+
 static int eqos_calibrate_pads_imx(struct udevice *dev)
 {
 	return 0;
@@ -905,6 +969,11 @@ static int eqos_disable_calibration_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_disable_calibration_netx4000(struct udevice *dev)
+{
+	return 0;
+}
+
 static int eqos_disable_calibration_imx(struct udevice *dev)
 {
 	return 0;
@@ -1011,6 +1080,11 @@ static int eqos_set_tx_clk_speed_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_set_tx_clk_speed_netx4000(struct udevice *dev)
+{
+	return 0;
+}
+
 static int eqos_set_tx_clk_speed_imx(struct udevice *dev)
 {
 	struct eqos_priv *eqos = dev_get_priv(dev);
@@ -1887,6 +1961,61 @@ err_probe:
 	return ret;
 }
 
+static int eqos_probe_resources_netx4000(struct udevice *dev)
+{
+	struct eqos_priv *eqos = dev_get_priv(dev);
+	int ret;
+	phy_interface_t interface;
+	struct ofnode_phandle_args phandle_args;
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	interface = eqos->config->interface(dev);
+
+	if (interface == PHY_INTERFACE_MODE_NONE) {
+		pr_err("Invalid PHY interface\n");
+		return -EINVAL;
+	}
+
+	ret = board_interface_eth_init(dev, interface);
+	if (ret)
+		return -EINVAL;
+
+	eqos->max_speed = dev_read_u32_default(dev, "max-speed", 0);
+
+	ret = clk_get_by_name(dev, "stmmaceth", &eqos->clk_master_bus);
+	if (ret) {
+		pr_err("clk_get_by_name(master_bus) failed: %d", ret);
+		goto err_probe;
+	}
+
+	eqos->phyaddr = -1;
+	ret = dev_read_phandle_with_args(dev, "phy-handle", NULL, 0, 0,
+					 &phandle_args);
+	if (!ret) {
+		/* search "reset-gpios" in phy node */
+		ret = gpio_request_by_name_nodev(phandle_args.node,
+						 "reset-gpios", 0,
+						 &eqos->phy_reset_gpio,
+						 GPIOD_IS_OUT |
+						 GPIOD_IS_OUT_ACTIVE);
+		if (ret)
+			pr_warn("gpio_request_by_name(phy reset) not provided %d",
+				ret);
+
+		eqos->phyaddr = ofnode_read_u32_default(phandle_args.node,
+							"reg", -1);
+	}
+
+	debug("%s: OK\n", __func__);
+	return 0;
+
+err_probe:
+
+	debug("%s: returns %d\n", __func__, ret);
+	return ret;
+}
+
 static phy_interface_t eqos_get_interface_stm32(struct udevice *dev)
 {
 	const char *phy_mode;
@@ -1901,6 +2030,20 @@ static phy_interface_t eqos_get_interface_stm32(struct udevice *dev)
 	return interface;
 }
 
+static phy_interface_t eqos_get_interface_netx4000(struct udevice *dev)
+{
+	const char *phy_mode;
+	phy_interface_t interface = PHY_INTERFACE_MODE_RGMII_ID;
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	phy_mode = dev_read_prop(dev, "phy-mode", NULL);
+	if (phy_mode)
+		interface = phy_get_interface_by_name(phy_mode);
+
+	return interface;
+}
+
 static phy_interface_t eqos_get_interface_tegra186(struct udevice *dev)
 {
 	return PHY_INTERFACE_MODE_MII;
@@ -1979,6 +2122,23 @@ static int eqos_remove_resources_stm32(struct udevice *dev)
 	return 0;
 }
 
+static int eqos_remove_resources_netx4000(struct udevice *dev)
+{
+#ifdef CONFIG_CLK
+	struct eqos_priv *eqos = dev_get_priv(dev);
+
+	debug("%s(dev=%p):\n", __func__, dev);
+
+	clk_free(&eqos->clk_master_bus);
+#endif
+
+	if (dm_gpio_is_valid(&eqos->phy_reset_gpio))
+		dm_gpio_free(dev, &eqos->phy_reset_gpio);
+
+	debug("%s: OK\n", __func__);
+	return 0;
+}
+
 static int eqos_remove_resources_imx(struct udevice *dev)
 {
 	return 0;
@@ -2163,6 +2323,33 @@ struct eqos_config __maybe_unused eqos_imx_config = {
 	.ops = &eqos_imx_ops
 };
 
+static struct eqos_ops eqos_netx4000_ops = {
+	.eqos_inval_desc = eqos_inval_desc_generic,
+	.eqos_flush_desc = eqos_flush_desc_generic,
+	.eqos_inval_buffer = eqos_inval_buffer_generic,
+	.eqos_flush_buffer = eqos_flush_buffer_generic,
+	.eqos_probe_resources = eqos_probe_resources_netx4000,
+	.eqos_remove_resources = eqos_remove_resources_netx4000,
+	.eqos_stop_resets = eqos_stop_resets_netx4000,
+	.eqos_start_resets = eqos_start_resets_netx4000,
+	.eqos_stop_clks = eqos_stop_clks_netx4000,
+	.eqos_start_clks = eqos_start_clks_netx4000,
+	.eqos_calibrate_pads = eqos_calibrate_pads_netx4000,
+	.eqos_disable_calibration = eqos_disable_calibration_netx4000,
+	.eqos_set_tx_clk_speed = eqos_set_tx_clk_speed_netx4000,
+	.eqos_get_tick_clk_rate = eqos_get_tick_clk_rate_netx4000
+};
+
+struct eqos_config __maybe_unused eqos_netx4000_config = {
+	.reg_access_always_ok = false,
+	.mdio_wait = 10000,
+	.swr_wait = 50,
+	.config_mac = EQOS_MAC_RXQ_CTRL0_RXQ0EN_ENABLED_DCB,
+	.config_mac_mdio = EQOS_MAC_MDIO_ADDRESS_CR_250_300,
+	.interface = eqos_get_interface_netx4000,
+	.ops = &eqos_netx4000_ops
+};
+
 static const struct udevice_id eqos_ids[] = {
 #if IS_ENABLED(CONFIG_DWC_ETH_QOS_TEGRA186)
 	{
@@ -2182,6 +2369,12 @@ static const struct udevice_id eqos_ids[] = {
 		.data = (ulong)&eqos_imx_config
 	},
 #endif
+#if IS_ENABLED(CONFIG_DWC_ETH_QOS_NETX4000)
+	{
+		.compatible = "hilscher,netx4000-gmac",
+		.data = (ulong)&eqos_netx4000_config
+	},
+#endif
 
 	{ }
 };
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 51733dd123..fd7b7b0db0 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -2,6 +2,12 @@
 config BITBANGMII
 	bool "Bit-banged ethernet MII management channel support"
 
+config MDIO_GPIO_BITBANG
+	bool "GPIO based bit-banged MDIO interface"
+	default n
+	help
+	  Enable support for a GPIO based bit-banged MDIO interface.
+
 config MV88E6352_SWITCH
 	bool "Marvell 88E6352 switch support"
 
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index 6e722331f1..fb4efde832 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -33,3 +33,5 @@ obj-$(CONFIG_PHY_VITESSE) += vitesse.o
 obj-$(CONFIG_PHY_MSCC) += mscc.o
 obj-$(CONFIG_PHY_FIXED) += fixed.o
 obj-$(CONFIG_PHY_NCSI) += ncsi.o
+
+obj-$(CONFIG_MDIO_GPIO_BITBANG) += mdio-gpio-bb.o
diff --git a/drivers/net/phy/mdio-gpio-bb.c b/drivers/net/phy/mdio-gpio-bb.c
new file mode 100644
index 0000000000..222f7f9185
--- /dev/null
+++ b/drivers/net/phy/mdio-gpio-bb.c
@@ -0,0 +1,291 @@
+/*
+* MDIO-GPIO-Bitbang driver
+*
+* drivers/net/phy/mdio-gpio-bb.c
+*
+* (C) Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+* http://www.hilscher.com
+*
+* This program is free software; you can redistribute it and/or
+* modify it under the terms of the GNU General Public License as
+* published by the Free Software Foundation; version 2 of
+* the License.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.test
+*
+*/
+
+#include <common.h>
+#include <miiphy.h>
+#include <asm/gpio.h>
+#include <dm/device_compat.h>
+#include <linux/delay.h>
+
+struct priv_data {
+	struct udevice *dev;
+	struct gpio_desc mdc_gpio;
+	struct gpio_desc mdio_gpio;
+};
+
+#define mdio_gpio_bb_active(pd)       { dm_gpio_set_dir_flags(&pd->mdio_gpio, GPIOD_IS_OUT); }
+#define mdio_gpio_bb_tristate(pd)     { dm_gpio_set_dir_flags(&pd->mdio_gpio, GPIOD_IS_IN); }
+#define mdio_gpio_bb_set_mdio(pd, v)  { dm_gpio_set_value(&pd->mdio_gpio, v); }
+#define mdio_gpio_bb_get_mdio(pd, v)  { *v = dm_gpio_get_value(&pd->mdio_gpio); }
+#define mdio_gpio_bb_set_mdc(pd, v)   { dm_gpio_set_value(&pd->mdc_gpio, v); }
+#define mdio_gpio_bb_delay(pd)        { udelay(1); }
+
+/*****************************************************************************
+ *
+ * Utility to send the preamble, address, and register (common to read
+ * and write).
+ */
+static void mdio_gpio_bb_pre(struct priv_data *pd, char read, unsigned char addr, unsigned char reg)
+{
+	int j;
+
+	/*
+	 * Send a 32 bit preamble ('1's) with an extra '1' bit for good measure.
+	 * The IEEE spec says this is a PHY optional requirement.  The AMD
+	 * 79C874 requires one after power up and one after a MII communications
+	 * error.  This means that we are doing more preambles than we need,
+	 * but it is safer and will be much more ropdt.
+	 */
+
+	mdio_gpio_bb_active(pd);
+	mdio_gpio_bb_set_mdio(pd, 1);
+	for (j = 0; j < 32; j++) {
+		mdio_gpio_bb_set_mdc(pd, 0);
+		mdio_gpio_bb_delay(pd);
+		mdio_gpio_bb_set_mdc(pd, 1);
+		mdio_gpio_bb_delay(pd);
+	}
+
+	/* send the start bit (01) and the read opcode (10) or write (10) */
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, 0);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, read);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, !read);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+
+	/* send the PHY address */
+	for (j = 0; j < 5; j++) {
+		mdio_gpio_bb_set_mdc(pd, 0);
+		if ((addr & 0x10) == 0) {
+			mdio_gpio_bb_set_mdio(pd, 0);
+		} else {
+			mdio_gpio_bb_set_mdio(pd, 1);
+		}
+		mdio_gpio_bb_delay(pd);
+		mdio_gpio_bb_set_mdc(pd, 1);
+		mdio_gpio_bb_delay(pd);
+		addr <<= 1;
+	}
+
+	/* send the register address */
+	for (j = 0; j < 5; j++) {
+		mdio_gpio_bb_set_mdc(pd, 0);
+		if ((reg & 0x10) == 0) {
+			mdio_gpio_bb_set_mdio(pd, 0);
+		} else {
+			mdio_gpio_bb_set_mdio(pd, 1);
+		}
+		mdio_gpio_bb_delay(pd);
+		mdio_gpio_bb_set_mdc(pd, 1);
+		mdio_gpio_bb_delay(pd);
+		reg <<= 1;
+	}
+}
+
+/*****************************************************************************
+ *
+ * Read a MII PHY register.
+ *
+ * Returns:
+ *   0 on success
+ */
+static int mdio_gpio_bb_read(struct mii_dev *mdiodev, int addr, int devad, int reg)
+{
+	struct priv_data *pd = mdiodev->priv;
+	unsigned short rdreg; /* register working value */
+	int v;
+	int j; /* counter */
+
+	mdio_gpio_bb_pre (pd, 1, addr, reg);
+
+	/* tri-state our MDIO I/O pin so we can read */
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_tristate(pd);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+
+	/* check the turnaround bit: the PHY should be driving it to zero */
+	mdio_gpio_bb_get_mdio(pd, &v);
+	if (v != 0) {
+		/* puts ("PHY didn't drive TA low\n"); */
+		for (j = 0; j < 32; j++) {
+			mdio_gpio_bb_set_mdc(pd, 0);
+			mdio_gpio_bb_delay(pd);
+			mdio_gpio_bb_set_mdc(pd, 1);
+			mdio_gpio_bb_delay(pd);
+		}
+		/* There is no PHY, return */
+		return -1;
+	}
+
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_delay(pd);
+
+	/* read 16 bits of register data, MSB first */
+	rdreg = 0;
+	for (j = 0; j < 16; j++) {
+		mdio_gpio_bb_set_mdc(pd, 1);
+		mdio_gpio_bb_delay(pd);
+		rdreg <<= 1;
+		mdio_gpio_bb_get_mdio(pd, &v);
+		rdreg |= (v & 0x1);
+		mdio_gpio_bb_set_mdc(pd, 0);
+		mdio_gpio_bb_delay(pd);
+	}
+
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+
+#ifdef DEBUG
+	printf("miiphy_read(0x%x) @ 0x%x = 0x%04x\n", reg, addr, rdreg);
+#endif
+
+	return rdreg;
+}
+
+
+/*****************************************************************************
+ *
+ * Write a MII PHY register.
+ *
+ * Returns:
+ *   0 on success
+ */
+static int mdio_gpio_bb_write(struct mii_dev *mdiodev, int addr, int devad, int reg, u16 value)
+{
+	struct priv_data *pd = mdiodev->priv;
+	int j; /* counter */
+
+	mdio_gpio_bb_pre (pd, 0, addr, reg);
+
+	/* send the turnaround (10) */
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_set_mdio(pd, 0);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+
+	/* write 16 bits of register data, MSB first */
+	for (j = 0; j < 16; j++) {
+		mdio_gpio_bb_set_mdc(pd, 0);
+		if ((value & 0x00008000) == 0) {
+			mdio_gpio_bb_set_mdio(pd, 0);
+		} else {
+			mdio_gpio_bb_set_mdio(pd, 1);
+		}
+		mdio_gpio_bb_delay(pd);
+		mdio_gpio_bb_set_mdc(pd, 1);
+		mdio_gpio_bb_delay(pd);
+		value <<= 1;
+	}
+
+	/*
+	 * Tri-state the MDIO line.
+	 */
+	mdio_gpio_bb_tristate(pd);
+	mdio_gpio_bb_set_mdc(pd, 0);
+	mdio_gpio_bb_delay(pd);
+	mdio_gpio_bb_set_mdc(pd, 1);
+	mdio_gpio_bb_delay(pd);
+
+	return 0;
+}
+
+/* -------------------------------------------------------------------------- */
+
+static int mdio_gpio_bb_probe(struct udevice *dev)
+{
+	struct priv_data *pd = dev_get_priv(dev);
+	struct mii_dev *mdiodev;
+	int rc;
+
+	pd->dev = dev;
+
+	if (gpio_request_by_name(dev, "mdc-gpio", 0, &pd->mdc_gpio, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE))
+		gpio_request_by_name(dev, "gpios", 0, &pd->mdc_gpio, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+	if (gpio_request_by_name(dev, "mdio-gpio", 0, &pd->mdio_gpio, GPIOD_IS_IN))
+		gpio_request_by_name(dev, "gpios", 1, &pd->mdio_gpio, GPIOD_IS_IN);
+
+	if (!dm_gpio_is_valid(&pd->mdc_gpio))
+		dev_err(dev, "Invalid or missing MDC gpio!\n");
+	if (!dm_gpio_is_valid(&pd->mdio_gpio))
+		dev_err(dev, "Invalid or missing MDIO gpio!\n");
+
+	mdiodev = mdio_alloc();
+	if (!mdiodev) {
+		dev_err(dev, "Allocate MDIO memory failed!\n");
+		return -ENOMEM;
+	}
+
+	strncpy(mdiodev->name, dev->name, MDIO_NAME_LEN);
+	mdiodev->read = mdio_gpio_bb_read;
+	mdiodev->write = mdio_gpio_bb_write;
+	mdiodev->priv = pd;
+
+	rc = mdio_register(mdiodev);
+	if (rc < 0) {
+		dev_err(dev, "Register MDIO interface failed!\n");
+		return rc;
+	}
+
+	dev_dbg(dev, "MDIO interface successfully probed!\n");
+
+	return 0;
+}
+
+/* -------------------------------------------------------------------------- */
+
+static struct udevice_id mdio_gpio_bb_ids[] = {
+	{ .compatible = "virtual,mdio-gpio", },
+	{ /* sentinel */ },
+};
+
+U_BOOT_DRIVER(mdio_gpio) = {
+	.name = "mdio-gpio-bb",
+	.id = UCLASS_SIMPLE_BUS,
+	.of_match = mdio_gpio_bb_ids,
+	.priv_auto_alloc_size = sizeof(struct priv_data),
+	.probe = mdio_gpio_bb_probe,
+};
diff --git a/drivers/pinctrl/pinctrl-single.c b/drivers/pinctrl/pinctrl-single.c
index 738f5bd636..69b901c6c2 100644
--- a/drivers/pinctrl/pinctrl-single.c
+++ b/drivers/pinctrl/pinctrl-single.c
@@ -148,6 +148,48 @@ static int single_set_state(struct udevice *dev,
 	return len;
 }
 
+/* TODO: Implement a mechanism to lock/unlock pins already requested by hardware or a GPIO driver. */
+static int single_gpio_request_enable(struct udevice *dev, unsigned pin_selector)
+{
+	struct single_pdata *pdata = dev->platdata;
+	struct single_fdt_pin_cfg prop[1];
+	struct ofnode_phandle_args args;
+	char *propname = "pinctrl-single,gpio-rangeX";
+	char *cellname = "#pinctrl-single,gpio-range-cells";
+	int idx, range, match = 0;
+
+	/* pinctrl-single,gpio-range */
+	sprintf(propname, "pinctrl-single,gpio-range");
+	for (idx = 0; !dev_read_phandle_with_args(dev, propname, cellname, 0, idx, &args); idx++) {
+		if ((pin_selector >= args.args[0]) && (pin_selector < args.args[0] +  args.args[1])) {
+			prop->val = args.args[2];
+			match = 1;
+		}
+	}
+
+	/* pinctrl-single,gpio-rangeX => X=[0..9] */
+	for (range = 0; range < 10; range ++) {
+		sprintf(propname, "pinctrl-single,gpio-range%d", range);
+		for (idx = 0; !dev_read_phandle_with_args(dev, propname, cellname, 0, idx, &args); idx++) {
+			if ((pin_selector >= args.args[0]) && (pin_selector < args.args[0] +  args.args[1])) {
+				prop->val = args.args[2];
+				match = 1;
+			}
+		}
+	}
+
+	if (!match)
+		return -EINVAL;
+
+	prop->reg = pin_selector * (pdata->width / 8);
+	prop->reg = cpu_to_fdt32(prop->reg);
+	prop->val = cpu_to_fdt32(prop->val);
+
+	single_configure_pins(dev, prop, sizeof(prop));
+
+	return 0;
+}
+
 static int single_ofdata_to_platdata(struct udevice *dev)
 {
 	fdt_addr_t addr;
@@ -179,10 +221,12 @@ static int single_ofdata_to_platdata(struct udevice *dev)
 
 const struct pinctrl_ops single_pinctrl_ops = {
 	.set_state = single_set_state,
+	.gpio_request_enable	= single_gpio_request_enable,
 };
 
 static const struct udevice_id single_pinctrl_match[] = {
 	{ .compatible = "pinctrl-single" },
+	{ .compatible = "pinctrl-single-netx4000" },
 	{ /* sentinel */ }
 };
 
diff --git a/drivers/serial/serial_pl01x.c b/drivers/serial/serial_pl01x.c
index d9e35c6a2b..39ab64bca7 100644
--- a/drivers/serial/serial_pl01x.c
+++ b/drivers/serial/serial_pl01x.c
@@ -35,6 +35,13 @@ static struct pl01x_regs *base_regs __attribute__ ((section(".data")));
 
 #endif
 
+#ifdef CONFIG_ARCH_NETX4000
+#undef readl
+#undef writel
+#define readl readw
+#define writel writew
+#endif
+
 static int pl01x_putc(struct pl01x_regs *regs, char c)
 {
 	/* Wait until there is space in the FIFO */
diff --git a/include/configs/netx4000.h b/include/configs/netx4000.h
new file mode 100644
index 0000000000..9556b50b01
--- /dev/null
+++ b/include/configs/netx4000.h
@@ -0,0 +1,47 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ *  (C) Copyright 2019 Hilscher Gesellschaft fuer Systemautomation mbH
+ *
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <linux/sizes.h>
+
+#define CONFIG_SYS_SDRAM_BASE	0x40000000
+#define CONFIG_SYS_LOAD_ADDR	0x50000000
+#define CONFIG_SYS_INIT_SP_ADDR	0x0507F000
+#define CONFIG_SYS_MALLOC_LEN	(8 * SZ_1M)
+
+/* Kernel/Fitimage Load address in env */
+#define CONFIG_LOADADDR	CONFIG_SYS_LOAD_ADDR
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	"initrd_high=0xffffffff\0"    \
+	"fdt_high=0xffffffff\0"   \
+	"mmcdev=0\0" \
+	"mmcpart=1\0" \
+	"script=boot.scr\0" \
+	"loadbootscript=" \
+		"load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
+	"bootscript=echo Running bootscript from mmc ...; " \
+		"source\0" \
+	"bootargs_legacy=root=/dev/mmcblk0p2 rw rootwait console=ttyAMA0,115200 earlyprintk\0" \
+	"bootcmd_legacy=load mmc 0:1 ${loadaddr} fitImage; setenv bootargs ${bootargs_legacy}; bootm\0"
+
+#define CONFIG_BOOTCOMMAND	"mmc dev ${mmcdev}; if mmc rescan; then " \
+					"if run loadbootscript; then " \
+						"run bootscript; " \
+					"else " \
+						"run bootcmd_legacy; " \
+					"fi; " \
+				"else " \
+					"run bootcmd_legacy;" \
+				"fi"
+
+#endif /* __CONFIG_H */
+
+/* Ethernet need */
+#ifdef CONFIG_DWC_ETH_QOS
+#define CONFIG_SYS_NONCACHED_MEMORY	(1 * SZ_1M) /* 1M */
+#endif
diff --git a/include/dt-bindings/dma/nbpfaxi.h b/include/dt-bindings/dma/nbpfaxi.h
new file mode 100644
index 0000000000..c1a5b9e0d6
--- /dev/null
+++ b/include/dt-bindings/dma/nbpfaxi.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2013-2014 Renesas Electronics Europe Ltd.
+ * Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef DT_BINDINGS_NBPFAXI_H
+#define DT_BINDINGS_NBPFAXI_H
+
+/**
+ * Use "#dma-cells = <2>;" with the second integer defining slave DMA flags:
+ */
+#define NBPF_SLAVE_RQ_HIGH	1
+#define NBPF_SLAVE_RQ_LOW	2
+#define NBPF_SLAVE_RQ_LEVEL	4
+
+#endif
diff --git a/include/dt-bindings/pinctrl/netx4000.h b/include/dt-bindings/pinctrl/netx4000.h
new file mode 100644
index 0000000000..db66676360
--- /dev/null
+++ b/include/dt-bindings/pinctrl/netx4000.h
@@ -0,0 +1,44 @@
+#ifndef _DT_BINDINGS_PINCTRL_NETX4000_H
+#define _DT_BINDINGS_PINCTRL_NETX4000_H
+
+#define REEMUX_0  (0 << SRT_PORTCONTROL_CONFIGURATION_SEL)
+#define REEMUX_1  (1 << SRT_PORTCONTROL_CONFIGURATION_SEL)
+#define REEMUX_2  (2 << SRT_PORTCONTROL_CONFIGURATION_SEL)
+#define REEMUX_3  (3 << SRT_PORTCONTROL_CONFIGURATION_SEL)
+#define REEMUX_4  (4 << SRT_PORTCONTROL_CONFIGURATION_SEL)
+
+#define REEMUX_DRV_04MA  (0 << SRT_PORTCONTROL_CONFIGURATION_DRV)
+#define REEMUX_DRV_06MA  (1 << SRT_PORTCONTROL_CONFIGURATION_DRV)
+#define REEMUX_DRV_08MA  (2 << SRT_PORTCONTROL_CONFIGURATION_DRV)
+#define REEMUX_DRV_12MA  (3 << SRT_PORTCONTROL_CONFIGURATION_DRV)
+
+#define REEMUX_UDC_NONE         (0 << SRT_PORTCONTROL_CONFIGURATION_UDC)
+#define REEMUX_UDC_PULLUP50K    (1 << SRT_PORTCONTROL_CONFIGURATION_UDC)
+#define REEMUX_UDC_NONE2        (2 << SRT_PORTCONTROL_CONFIGURATION_UDC)
+#define REEMUX_UDC_PULLDOWN50K  (3 << SRT_PORTCONTROL_CONFIGURATION_UDC)
+
+#define REEMUX_CTL(a)  ((a) << SRT_PORTCONTROL_CONFIGURATION_CTL)
+
+#define SRT_PORTCONTROL_CONFIGURATION_UDC   0
+#define SRT_PORTCONTROL_CONFIGURATION_DRV   4
+#define SRT_PORTCONTROL_CONFIGURATION_CTL   8
+#define SRT_PORTCONTROL_CONFIGURATION_SEL   12
+
+#define MUX_PIN(major,minor) ((major * 16 + minor) * 4)
+
+/* netX multiplexer */
+
+#define MMIO(a) (a*4)
+
+#define MMIO_IN_INV  (1<<10)
+#define MMIO_OUT_INV (1<<9)
+
+/* mmio select */
+#define PHY0_LED_PHY_CTRL_LNK 0x77
+#define PHY0_LED_PHY_CTRL_ACT 0x78
+
+#define PHY1_LED_PHY_CTRL_LNK 0x7b
+#define PHY1_LED_PHY_CTRL_ACT 0x7c
+
+
+#endif
diff --git a/include/dt-bindings/video/netx4000.h b/include/dt-bindings/video/netx4000.h
new file mode 100644
index 0000000000..40255009e1
--- /dev/null
+++ b/include/dt-bindings/video/netx4000.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+#ifndef _DT_BINDINGS_FB_NETX4000_H
+#define _DT_BINDINGS_FB_NETX4000_H
+
+/* Pixel Mode */
+#define ARGB8888  0
+#define RGBA8888  1
+#define RGB565    2
+#define AL88      3  /* currently not supported */
+#define AL44      4  /* currently not supported */
+#define AL8       5  /* currently not supported */
+#define L8        6  /* currently not supported */
+
+#endif /* _DT_BINDINGS_FB_NETX4000_H */
diff --git a/tools/netx4000/.gitignore b/tools/netx4000/.gitignore
new file mode 100644
index 0000000000..5597aacc53
--- /dev/null
+++ b/tools/netx4000/.gitignore
@@ -0,0 +1 @@
+!*.elf
diff --git a/tools/netx4000/ca9_boot.xml b/tools/netx4000/ca9_boot.xml
new file mode 100644
index 0000000000..e9ba39f428
--- /dev/null
+++ b/tools/netx4000/ca9_boot.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0"?>
+<HBootImage type="REGULAR">
+	<Chunks>
+		<!-- Open firewall to provide extended access permissions for CA9 (e.g. ADC). -->
+		<Data>
+			<File name="@open_fw_elf" />
+		</Data>
+		<Execute>
+			<File name="@open_fw_elf" />
+		</Execute>
+
+		<!-- Load u-boot into CA9 core0 and start afterwards -->
+		<Data>
+			<File name="@uboot_bin" load_address="0x05000000" />
+		</Data>
+		<ExecuteCA9>
+			<Core0>
+				<Address>0x05000000</Address>
+			</Core0>
+		</ExecuteCA9>
+
+		<!-- Set R7 into idle mode -->
+		<Execute>
+			<Address>WFE_Loop</Address>
+		</Execute>
+	</Chunks>
+</HBootImage>
diff --git a/tools/netx4000/hboot_image_compiler/__init__.py b/tools/netx4000/hboot_image_compiler/__init__.py
new file mode 100644
index 0000000000..1afddfd7d8
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/__init__.py
@@ -0,0 +1,3 @@
+# -*- coding: utf-8 -*-
+
+import hboot_image
diff --git a/tools/netx4000/hboot_image_compiler/elf_support.py b/tools/netx4000/hboot_image_compiler/elf_support.py
new file mode 100644
index 0000000000..1b8976f550
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/elf_support.py
@@ -0,0 +1,301 @@
+# -*- coding: utf-8 -*-
+# ----------------------------------------------------------------------- #
+#   Copyright (C) 2010 by Christoph Thelen                                #
+#   doc_bacardi@users.sourceforge.net                                     #
+#                                                                         #
+#   This program is free software; you can redistribute it and/or modify  #
+#   it under the terms of the GNU General Public License as published by  #
+#   the Free Software Foundation; either version 2 of the License, or     #
+#   (at your option) any later version.                                   #
+#                                                                         #
+#   This program is distributed in the hope that it will be useful,       #
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
+#   GNU General Public License for more details.                          #
+#                                                                         #
+#   You should have received a copy of the GNU General Public License     #
+#   along with this program; if not, write to the                         #
+#   Free Software Foundation, Inc.,                                       #
+#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
+# ----------------------------------------------------------------------- #
+
+
+import os
+import re
+import subprocess
+
+# NOTE: this is only for debug.
+import datetime
+
+
+def get_segment_table(env, strFileName, astrSegmentsToConsider=None):
+    atSegments = []
+    aCmd = [env['OBJDUMP'], '-h', '-w', strFileName]
+    proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
+    strOutput = proc.communicate()[0].decode("ascii")
+    for match_obj in re.finditer('[ \t]*([0-9]+)[ \t]+([^ \t]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9*]+)[ \t]+([a-zA-Z ,]+)', strOutput):
+        strName = match_obj.group(2)
+        if (astrSegmentsToConsider is None) or (strName in astrSegmentsToConsider):
+            uiAlign = eval(match_obj.group(7))
+            astrFlags = match_obj.group(8).split(', ')
+            atSegments.append(dict({
+                'idx':      int(match_obj.group(1)),
+                'name':     strName,
+                'size':     int(match_obj.group(3), 16),
+                'vma':      int(match_obj.group(4), 16),
+                'lma':      int(match_obj.group(5), 16),
+                'file_off': int(match_obj.group(6), 16),
+                'align':    uiAlign,
+                'flags':    astrFlags
+            }))
+    return atSegments
+
+
+def get_symbol_table(env, strFileName):
+    aCmd = [env['READELF'], '--symbols', '--wide', strFileName]
+    proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
+    strOutput = proc.communicate()[0].decode("ascii")
+
+    atSymbols = dict({})
+
+    reSymbol = re.compile('\s+\d+:\s([0-9a-fA-F]+)\s+[0-9a-fA-F]+\s+\w+\s+GLOBAL\s+\w+\s+\w+\s+([\S]+)')
+
+    for strLine in strOutput.split(os.linesep):
+        tObj = reSymbol.match(strLine)
+        if tObj is not None:
+            ulValue = int(tObj.group(1), 16)
+            strName = tObj.group(2)
+            atSymbols[strName] = ulValue
+
+    return atSymbols
+
+
+def get_debug_structure(env, strFileName):
+    aCmd = [env['READELF'], '--debug-dump=info', strFileName]
+    proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
+    strOutput = proc.communicate()[0].decode("ascii")
+
+    time_start = datetime.datetime.now()
+
+    # Add all information to an XML file.
+    atDebugInfo = dict({'name': None, 'abbrev': None, 'children': [], 'attributes': dict({})})
+
+    # Prepare the regular expressions for the elements.
+    reElement = re.compile('\s+<([0-9]+)><([0-9a-f]+)>: Abbrev Number: (\d+) \(DW_TAG_(\w+)\)')
+    reAttribute_Str = re.compile('\s+<([0-9a-f]+)>\s+DW_AT_(\w+)\s*:\s+\(indirect string, offset: 0x[0-9a-f]+\):\s+(.+)')
+    reAttribute_Link = re.compile('\s+<([0-9a-f]+)>\s+DW_AT_(\w+)\s*:\s+<0x([0-9a-f]+)>')
+    reAttribute = re.compile('\s+<([0-9a-f]+)>\s+DW_AT_(\w+)\s*:\s+(.+)')
+
+    # This is a list of all parent nodes. It supports a maximum depth of 64.
+    atParentNode = []
+    atParentNode.append(atDebugInfo)
+
+    # Loop over all lines in the ".debug_info" section.
+    for strLine in strOutput.split(os.linesep):
+        # Is this a new element?
+        tObj = reElement.match(strLine)
+        if tObj is not None:
+            uiNodeLevel = int(tObj.group(1))
+            ulNodeId = int(tObj.group(2), 16)
+            ulAbbrev = int(tObj.group(3))
+            strName = tObj.group(4)
+
+            # Get the parent node.
+            if (uiNodeLevel < 0) or (uiNodeLevel >= len(atParentNode)):
+                raise Exception('Invalid node level: %d', uiNodeLevel)
+            tParentNode = atParentNode[uiNodeLevel]
+            if tParentNode is None:
+                raise Exception('Invalid parent!')
+
+            # This is a new element. Clear all parents above the parent.
+            atParentNode = atParentNode[0:uiNodeLevel+1]
+
+            # Create the new element.
+            atNodeData = dict({'name': strName, 'id': ulNodeId, 'attributes': dict({'abbrev': ulAbbrev}), 'children': []})
+            tParentNode['children'].append(atNodeData)
+
+            # Append the new element to the list of parent elements.
+            atParentNode.append(atNodeData)
+        else:
+            tObj = reAttribute_Link.match(strLine)
+            if tObj is not None:
+                ulNodeId = int(tObj.group(1), 16)
+                strName = tObj.group(2)
+                ulValue = int(tObj.group(3), 16)
+                tNode = atParentNode[-1]
+                tNode['attributes'][strName] = ulValue
+            else:
+                tObj = reAttribute_Str.match(strLine)
+                if tObj is None:
+                    tObj = reAttribute.match(strLine)
+
+                if tObj is not None:
+                    ulNodeId = int(tObj.group(1), 16)
+                    strName = tObj.group(2)
+                    strValue = tObj.group(3).strip()
+                    tNode = atParentNode[-1]
+                    tNode['attributes'][strName] = strValue
+
+    time_end = datetime.datetime.now()
+    print('Time used:', str(time_end-time_start))
+
+#    # Write the XML tree to a test file.
+#    astrXml = xml.etree.ElementTree.tostringlist(tXml.getroot(), encoding='UTF-8', method="xml")
+#    tFile = open('/tmp/test.xml', 'wt')
+#    tFile.write('\n'.join(astrXml))
+#    tFile.close()
+
+    return atDebugInfo
+
+
+s_reLocation = re.compile('\d+ byte block: \d+ ([0-9a-f]+)')
+
+
+def __iter_debug_info(tNode, atDebugInfo, atSymbols):
+    strName = tNode['name']
+    tAttr = tNode['attributes']
+
+    # Is this an enumerator type?
+    if strName == 'enumerator':
+        if 'const_value' not in tAttr:
+            raise Exception('Missing const_value')
+        if 'name' not in tAttr:
+            raise Exception('Missing name')
+
+        ulValue = int(tAttr['const_value'])
+        strName = tAttr['name']
+        atSymbols[strName] = ulValue
+    elif strName == 'structure_type':
+        if 'name' in tAttr:
+            strStructureName = tAttr['name']
+            # Generate a symbol with the size of the structure.
+            strMemberName = 'SIZEOF_' + strStructureName
+            if ('declaration' in tAttr) and (tAttr['declaration'] == '1'):
+                # This is just a declaration. Ignore it, there is a complete definition somewhere else.
+                pass
+            else:
+                atSymbols[strMemberName] = tAttr['byte_size']
+
+                # Generate symbols for the offset of each member.
+                for tMember in tNode['children']:
+                    if tMember['name'] == 'member':
+                        tMemberAttr = tMember['attributes']
+                        strLoc = tMemberAttr['data_member_location']
+                        strName = tMemberAttr['name']
+                        if (strLoc is not None) and (strName is not None):
+                            tObj = s_reLocation.match(strLoc)
+                            if tObj is not None:
+                                strMemberName = 'OFFSETOF_' + strStructureName + '_' + strName
+                                ulOffset = int(tObj.group(1), 16)
+                                atSymbols[strMemberName] = ulOffset
+    else:
+        for tChild in tNode['children']:
+            __iter_debug_info(tChild, atDebugInfo, atSymbols)
+
+
+def get_debug_symbols(env, strFileName):
+    atDebugInfo = get_debug_structure(env, strFileName)
+    atAllSymbols = dict({})
+    __iter_debug_info(atDebugInfo, atDebugInfo, atAllSymbols)
+    return atAllSymbols
+
+
+def get_macro_definitions(env, strFileName):
+    aCmd = [env['READELF'], '--debug-dump=macro', strFileName]
+    proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
+    strOutput = proc.communicate()[0].decode("ascii")
+
+    time_start = datetime.datetime.now()
+
+    # All macros are collected in this dict.
+    atMergedMacros = dict({})
+
+    # FIXME: Macro extraction should respect different files.
+    # NOTE: This matches only macros without parameter.
+    areMacro = [
+        re.compile('\s+DW_MACINFO_define - lineno : \d+ macro : (\w+)\s+(.*)'),
+        re.compile('\s+DW_MACRO_GNU_define_indirect - lineno : \d+ macro : (\w+)\s+(.*)')
+    ]
+    # Loop over all lines in the ".debug_macinfo" section.
+    for strLine in strOutput.split(os.linesep):
+        # Is this a new element?
+        for reMacro in areMacro:
+            tObj = reMacro.match(strLine)
+            if tObj is not None:
+                strName = tObj.group(1)
+                strValue = tObj.group(2)
+
+                # Does the macro already exist?
+                if strName in atMergedMacros:
+                    # Yes, it exists already. Is the value the same?
+                    if not(atMergedMacros[strName] is None) and (atMergedMacros[strName] != strValue):
+                        # The macro exists more than one time with different values. Now that's a problem.
+                        atMergedMacros[strName] = None
+                else:
+                    atMergedMacros[strName] = strValue
+
+    time_end = datetime.datetime.now()
+    print('Time used:', str(time_end-time_start))
+
+    return atMergedMacros
+
+
+def get_load_address(atSegments):
+    # Set an invalid lma
+    ulLowestLma = 0x100000000
+
+    # Loop over all segments.
+    for tSegment in atSegments:
+        # Get the segment with the lowest 'lma' entry which has also the flags 'CONTENTS', 'ALLOC' and 'LOAD'.
+        if (tSegment['lma'] < ulLowestLma) and ('CONTENTS' in tSegment['flags']) and ('ALLOC' in tSegment['flags']) and ('LOAD' in tSegment['flags']):
+            ulLowestLma = tSegment['lma']
+
+    if ulLowestLma == 0x100000000:
+        raise Exception("failed to extract load address!")
+
+    return ulLowestLma
+
+
+def get_estimated_bin_size(atSegments):
+    ulLoadAddress = get_load_address(atSegments)
+    ulBiggestOffset = 0
+
+    # Loop over all segments.
+    for tSegment in atSegments:
+        # Get the segment with the biggest offset to ulLoadAddress which has also the flags 'CONTENTS', 'ALLOC' and 'LOAD'.
+        if ('CONTENTS' in tSegment['flags']) and ('ALLOC' in tSegment['flags']) and ('LOAD' in tSegment['flags']):
+            ulOffset = tSegment['lma'] + tSegment['size'] - ulLoadAddress
+            if ulOffset > ulBiggestOffset:
+                ulBiggestOffset = ulOffset
+
+    return ulBiggestOffset
+
+
+def get_exec_address(env, strElfFileName):
+    # Get the start address.
+    # Try the global symbol first, then fall back to the file header.
+    # The global symbol is better, as it holds not only the plain address, but also thumb information.
+    # The address from the file header does not have any thumb information.
+    tResult = None
+    aCmd0 = [env['READELF'], '--syms', strElfFileName]
+    proc = subprocess.Popen(aCmd0, stdout=subprocess.PIPE)
+    strOutput0 = proc.communicate()[0].decode("ascii")
+    match_obj = re.search('\s+\d+:\s+([0-9a-fA-F]+)\s+\d+\s+\w+\s+GLOBAL\s+DEFAULT\s+\d+\s+start', strOutput0)
+    if match_obj is not None:
+        tResult = int(match_obj.group(1), 16)
+    else:
+        aCmd1 = [env['READELF'], '--file-header', strElfFileName]
+        proc = subprocess.Popen(aCmd1, stdout=subprocess.PIPE)
+        strOutput1 = proc.communicate()[0].decode("ascii")
+        match_obj = re.search('Entry point address:\s+0x([0-9a-fA-F]+)', strOutput1)
+        if match_obj is not None:
+            tResult = int(match_obj.group(1), 16)
+        else:
+            print('Failed to extract start address.')
+            print('Command0:', aCmd0)
+            print('Output0:', strOutput0)
+            print('Command1:', aCmd1)
+            print('Output1:', strOutput1)
+            raise Exception('Failed to extract start address.')
+
+    return tResult
diff --git a/tools/netx4000/hboot_image_compiler/hboot_image.py b/tools/netx4000/hboot_image_compiler/hboot_image.py
new file mode 100644
index 0000000000..14a0b0ab78
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/hboot_image.py
@@ -0,0 +1,5348 @@
+# -*- coding: utf-8 -*-
+
+import array
+import ast
+import base64
+import binascii
+import hashlib
+import math
+import os
+import os.path
+import re
+import string
+import subprocess
+import sys
+import tempfile
+import xml.dom.minidom
+import xml.etree.ElementTree
+
+import elf_support
+import option_compiler
+import patch_definitions
+import snippet_library
+
+def py3_array_tobytes(msg):
+    if (sys.version_info >= (3,9)):
+        return msg.tobytes()
+    else:
+        return msg.tostring()
+
+def py3_array_frombytes(msg, data):
+    if (sys.version_info >= (3,9)):
+        return msg.frombytes(data)
+    else:
+        return msg.fromstring(data)
+
+class ResolveDefines(ast.NodeTransformer):
+    __atDefines = None
+
+    def setDefines(self, atDefines):
+        self.__atDefines = atDefines
+
+    def visit_Name(self, node):
+        tNode = None
+        strName = node.id
+        if strName in self.__atDefines:
+            tValue = self.__atDefines[strName]
+            # Check for a set of base types.
+            tValueNode = None
+            if type(tValue) is int:
+                tValueNode = ast.Num(n=tValue)
+            elif type(tValue) is str:
+                tValueNode = ast.Str(s=tValue)
+            else:
+                raise Exception(
+                    'Not implemented type for "%s": %s' % (
+                        strName,
+                        str(type(tValue))
+                    )
+                )
+            tNode = ast.copy_location(tValueNode, node)
+        else:
+            raise Exception('Unknown constant "%s".' % node.id)
+        return tNode
+
+
+class HbootImage:
+    __fVerbose = False
+
+    # This is the list of override items for the header.
+    __atHeaderOverride = None
+
+    # This is a list with all chunks.
+    __atChunkData = None
+
+    # This is the environment.
+    __tEnv = None
+
+    # This is a list of all include paths.
+    __astrIncludePaths = None
+
+    # This is a dictionary of all resolved files.
+    __atKnownFiles = None
+
+    # This is a dictionary of key/value pairs to do replacements with.
+    __atGlobalDefines = None
+
+    __cPatchDefinitions = None
+
+    __cSnippetLibrary = None
+
+    __astrDependencies = None
+
+    __strNetxType = None
+    __tImageType = None
+    __fHasHeader = None
+    __fHasEndMarker = None
+    __astrToImageType = None
+    __IMAGE_TYPE_REGULAR = 0
+    __IMAGE_TYPE_INTRAM = 1
+    __IMAGE_TYPE_SECMEM = 2
+    __IMAGE_TYPE_COM_INFO_PAGE = 3
+    __IMAGE_TYPE_APP_INFO_PAGE = 4
+    __IMAGE_TYPE_ALTERNATIVE = 5
+    __sizHashDw = None
+
+    __XmlKeyromContents = None
+    __cfg_openssl = 'openssl'
+    __cfg_openssloptions = None
+
+    # This is the revision for the netX10, netX51 and netX52 Secmem zone.
+    __SECMEM_ZONE2_REV1_0 = 0x81
+
+    # The magic cookies for the different chips.
+    __MAGIC_COOKIE_NETX56 = 0xf8beaf00
+    __MAGIC_COOKIE_NETX4000 = 0xf3beaf00
+    __MAGIC_COOKIE_NETX4000_ALT = 0xf3ad9e00
+    __MAGIC_COOKIE_NETX90_MPW = 0xf3beaf00
+    __MAGIC_COOKIE_NETX90_MPW_ALT = 0xf3ad9e00
+    __MAGIC_COOKIE_NETX90 = 0xf3beaf00
+    __MAGIC_COOKIE_NETX90_ALT = 0xf3ad9e00
+
+    __resolver = None
+
+    __ulStartOffset = 0
+
+    __strDevice = None
+
+    __fMoreChunksAllowed = None
+
+    __ulPaddingPreSize = None
+    __ucPaddingPreValue = None
+
+    def __init__(self, tEnv, strNetxType, **kwargs):
+        strPatchDefinition = None
+        strKeyromFile = None
+        astrIncludePaths = []
+        astrSnippetSearchPaths = []
+        atKnownFiles = {}
+        atGlobalDefines = {}
+        atOpensslOptions = []
+        fVerbose = False
+
+        # Parse the kwargs.
+        for strKey, tValue in iter(kwargs.items()):
+            if strKey == 'patch_definition':
+                strPatchDefinition = tValue
+
+            elif strKey == 'keyrom':
+                strKeyromFile = tValue
+
+            elif strKey == 'sniplibs':
+                if tValue is None:
+                    pass
+                elif isinstance(tValue, ("".__class__, u"".__class__)):
+                    astrSnippetSearchPaths.append(tValue)
+                else:
+                    astrSnippetSearchPaths.extend(tValue)
+
+            elif strKey == 'includes':
+                if tValue is None:
+                    pass
+                elif isinstance(tValue, ("".__class__, u"".__class__)):
+                    astrIncludePaths.append(tValue)
+                else:
+                    astrIncludePaths.extend(tValue)
+
+            elif strKey == 'known_files':
+                if tValue is None:
+                    pass
+                else:
+                    atKnownFiles.update(tValue)
+
+            elif strKey == 'verbose':
+                fVerbose = bool(tValue)
+
+            elif strKey == 'defines':
+                atGlobalDefines = dict(tValue)
+
+            elif strKey == 'openssloptions':
+                atOpensslOptions = tValue
+
+        # Set the default search path if nothing was specified.
+        if len(astrSnippetSearchPaths) == 0:
+            astrSnippetSearchPaths = ['sniplib']
+
+        self.__fVerbose = fVerbose
+
+        # Do not override anything in the pre-calculated header yet.
+        self.__atHeaderOverride = [None] * 16
+
+        # No chunks yet.
+        self.__atChunkData = None
+
+        # Set the environment.
+        self.__tEnv = tEnv
+
+        # Set the known files.
+        self.__atKnownFiles = atKnownFiles
+
+        # Set the defines.
+        self.__atGlobalDefines = atGlobalDefines
+
+        # Set the OpenSSL options.
+        self.__cfg_openssloptions = atOpensslOptions
+
+        if self.__fVerbose:
+            print('[HBootImage] Configuration: netX type = %s' % strNetxType)
+            print('[HBootImage] Configuration: patch definitions = "%s"' %
+                  strPatchDefinition)
+            print('[HBootImage] Configuration: Keyrom = "%s"' %
+                  str(strKeyromFile))
+
+            if len(astrSnippetSearchPaths) == 0:
+                print('[HBootImage] Configuration: No Sniplibs.')
+            else:
+                for strPath in astrSnippetSearchPaths:
+                    print('[HBootImage] Configuration: Sniplib at "%s"' %
+                          strPath)
+
+            if len(astrIncludePaths) == 0:
+                print('[HBootImage] Configuration: No include paths.')
+            else:
+                for strPath in astrIncludePaths:
+                    print('[HBootImage] Configuration: Include path "%s"' %
+                          strPath)
+
+            if len(atKnownFiles) == 0:
+                print('[HBootImage] Configuration: No known files.')
+            else:
+                for strKey, strPath in atKnownFiles.iteritems():
+                    print(
+                        '[HBootImage] Configuration: '
+                        'Known file "%s" at "%s".' % (
+                            strKey,
+                            strPath
+                        )
+                    )
+
+            if len(atGlobalDefines) == 0:
+                print('[HBootImage] Configuration: No defines.')
+            else:
+                for strKey, strValue in atGlobalDefines.iteritems():
+                    print(
+                        '[HBootImage] Configuration: '
+                        'Define %s=%s' % (
+                            strKey,
+                            strValue
+                        )
+                    )
+
+        if strPatchDefinition is not None:
+            self.__cPatchDefinitions = patch_definitions.PatchDefinitions()
+            self.__cPatchDefinitions.read_patch_definition(strPatchDefinition)
+
+        self.__cSnippetLibrary = snippet_library.SnippetLibrary(
+            '.sniplib.dblite',
+            astrSnippetSearchPaths,
+            debug=self.__fVerbose
+        )
+
+        self.__strNetxType = strNetxType
+        self.__tImageType = None
+        self.__sizHashDw = None
+
+        self.__astrToImageType = dict({
+            'REGULAR': self.__IMAGE_TYPE_REGULAR,
+            'INTRAM': self.__IMAGE_TYPE_INTRAM,
+            'SECMEM': self.__IMAGE_TYPE_SECMEM,
+            'COM_INFO_PAGE': self.__IMAGE_TYPE_COM_INFO_PAGE,
+            'APP_INFO_PAGE': self.__IMAGE_TYPE_APP_INFO_PAGE,
+            'ALTERNATIVE': self.__IMAGE_TYPE_ALTERNATIVE
+        })
+
+        # Initialize the include paths from the environment.
+        self.__astrIncludePaths = astrIncludePaths
+
+        # Read the keyrom file if specified.
+        if strKeyromFile is not None:
+            if self.__fVerbose:
+                print('[HBootImage] Init: Reading key ROM file "%s".' %
+                      strKeyromFile)
+            # Parse the XML file.
+            tFile = open(strKeyromFile, 'rt')
+            strXml = tFile.read()
+            tFile.close()
+            self.__XmlKeyromContents = xml.etree.ElementTree.fromstring(strXml)
+
+        self.__resolver = ResolveDefines()
+
+    def __get_tag_id(self, cId0, cId1, cId2, cId3):
+        # Combine the 4 ID characters to a 32 bit value.
+        ulId = (
+            ord(cId0) |
+            (ord(cId1) << 8) |
+            (ord(cId2) << 16) |
+            (ord(cId3) << 24)
+        )
+        return ulId
+
+    def __xml_get_all_text(self, tNode):
+        astrText = []
+        for tChild in tNode.childNodes:
+            if(
+                (tChild.nodeType == tChild.TEXT_NODE) or
+                (tChild.nodeType == tChild.CDATA_SECTION_NODE)
+            ):
+                astrText.append(str(tChild.data))
+        return ''.join(astrText)
+
+    def __parse_re_match(self, tMatch):
+        strExpression = tMatch.group(1)
+        tAstNode = ast.parse(strExpression, mode='eval')
+        tAstResolved = self.__resolver.visit(tAstNode)
+        tResult = eval(compile(tAstResolved, 'lala', mode='eval'))
+        if tResult is None:
+            raise Exception('Invalid expression: "%s"' % strExpression)
+        return tResult
+
+    def __plaintext_to_xml_with_replace(
+        self,
+        strPlaintext,
+        atReplace,
+        fIsStandalone
+    ):
+        # Set all key/value pairs in the local resolver.
+        self.__resolver.setDefines(atReplace)
+
+        # Replace all parameter in the snippet.
+        strText = re.sub('%%(.+?)%%', self.__parse_re_match, strPlaintext)
+
+        # Parse the text as XML.
+        tResult = None
+        if fIsStandalone is True:
+            tXml = xml.dom.minidom.parseString(strText)
+            tResult = tXml
+        else:
+            tXml = xml.dom.minidom.parseString(
+                '<?xml version="1.0" encoding="utf-8"?><Root>%s</Root>' %
+                strText
+            )
+            tResult = tXml.documentElement
+        return tResult
+
+    def __preprocess_snip(self, tSnipNode):
+        # Get the group, artifact and optional revision.
+        strGroup = tSnipNode.getAttribute('group')
+        if len(strGroup) == 0:
+            raise Exception(
+                'The "group" attribute of a "Snip" node must not be empty.'
+            )
+        strArtifact = tSnipNode.getAttribute('artifact')
+        if len(strArtifact) == 0:
+            raise Exception(
+                'The "artifact" attribute of a "Snip" node must not be empty.'
+            )
+        strVersion = tSnipNode.getAttribute('version')
+        if len(strVersion) == 0:
+            raise Exception(
+                'The "version" attribute of a "Snip" node must not be empty.'
+            )
+
+        # Get the name of the snippets for messages.
+        strSnipName = 'G="%s",A="%s",V="%s"' % (
+            strGroup,
+            strArtifact,
+            strVersion
+        )
+
+        # Get the parameter.
+        atParameter = {}
+        for tChildNode in tSnipNode.childNodes:
+            if tChildNode.nodeType == tChildNode.ELEMENT_NODE:
+                strTag = tChildNode.localName
+                if strTag == 'Parameter':
+                    # Get the "name" attribute.
+                    strName = tChildNode.getAttribute('name')
+                    if len(strName) == 0:
+                        raise Exception(
+                            'Snippet %s instanciation failed: a parameter '
+                            'node is missing the "name" attribute!' %
+                            strSnipName
+                        )
+                    # Get the value.
+                    strValue = self.__xml_get_all_text(tChildNode)
+                    # Was the parameter already defined?
+                    if strName in atParameter:
+                        raise Exception(
+                            'Snippet %s instanciation failed: parameter "%s" '
+                            'is defined more than once!' % (
+                                strSnipName,
+                                strName
+                            )
+                        )
+                    else:
+                        atParameter[strName] = strValue
+                else:
+                    raise Exception(
+                        'Snippet %s instanciation failed: unknown tag "%s" '
+                        'found!' % (
+                            strSnipName,
+                            strTag
+                        )
+                    )
+
+        # Search the snippet.
+        tSnippetAttr = self.__cSnippetLibrary.find(
+            strGroup,
+            strArtifact,
+            strVersion,
+            atParameter
+        )
+        strSnippetText = tSnippetAttr[0]
+        if strSnippetText is None:
+            raise Exception('Snippet not found!')
+
+        # Get the list of key/value pairs for the replacement.
+        atReplace = {}
+        atReplace.update(self.__atGlobalDefines)
+        atReplace.update(tSnippetAttr[1])
+
+        # Replace and convert to XML.
+        tSnippetNode = self.__plaintext_to_xml_with_replace(
+            strSnippetText,
+            atReplace,
+            False
+        )
+
+        # Add the snippet file to the dependencies.
+        strSnippetAbsFile = tSnippetAttr[2]
+        if strSnippetAbsFile not in self.__astrDependencies:
+            self.__astrDependencies.append(strSnippetAbsFile)
+
+        # Get the parent node of the "Snip" node.
+        tParentNode = tSnipNode.parentNode
+
+        # Replace the "Snip" node with the snippet contents.
+        for tNode in tSnippetNode.childNodes:
+            tClonedNode = tNode.cloneNode(True)
+            tParentNode.insertBefore(tClonedNode, tSnipNode)
+
+        # Remove the old "Snip" node.
+        tParentNode.removeChild(tSnipNode)
+
+    def __preprocess_include(self, tIncludeNode):
+        # Get the name.
+        strIncludeName = tIncludeNode.getAttribute('name')
+        if strIncludeName is None:
+            raise Exception('The "Include" node has no "name" attribute.')
+        if len(strIncludeName) == 0:
+            raise Exception('The "name" attribute of an "Include" node must '
+                            'not be empty.')
+
+        # Get the parameter.
+        atParameter = {}
+        for tChildNode in tIncludeNode.childNodes:
+            if tChildNode.nodeType == tChildNode.ELEMENT_NODE:
+                strTag = tChildNode.localName
+                if strTag == 'Parameter':
+                    # Get the "name" attribute.
+                    strName = tChildNode.getAttribute('name')
+                    if len(strName) == 0:
+                        raise Exception('Include failed: a parameter node is '
+                                        'missing the "name" attribute!')
+                    # Get the value.
+                    strValue = self.__xml_get_all_text(tChildNode)
+                    # Was the parameter already defined?
+                    if strName in atParameter:
+                        raise Exception('Include failed: parameter "%s" is '
+                                        'defined more than once!' %
+                                        strIncludeName)
+                    else:
+                        atParameter[strName] = strValue
+                else:
+                    raise Exception('Include failed: unknown tag "%s" '
+                                    'found!' % strTag)
+
+        # Search the file in the current path and all include paths.
+        strAbsIncludeName = self.__find_file(strIncludeName)
+        if strAbsIncludeName is None:
+            raise Exception('Failed to include file "%s": file not found.' %
+                            strIncludeName)
+
+        # Read the complete file as text.
+        tFile = open(strAbsIncludeName, 'rt')
+        strFileContents = tFile.read()
+        tFile.close()
+
+        # Replace and convert to XML.
+        atReplace = {}
+        atReplace.update(self.__atGlobalDefines)
+        atReplace.update(atParameter)
+        tNewNode = self.__plaintext_to_xml_with_replace(
+            strFileContents,
+            atReplace,
+            False
+        )
+
+        # Add the include file to the dependencies.
+        if strAbsIncludeName not in self.__astrDependencies:
+            self.__astrDependencies.append(strAbsIncludeName)
+
+        # Get the parent node of the "Include" node.
+        tParentNode = tIncludeNode.parentNode
+
+        # Replace the "Include" node with the include file contents.
+        for tNode in tNewNode.childNodes:
+            tClonedNode = tNode.cloneNode(True)
+            tParentNode.insertBefore(tClonedNode, tIncludeNode)
+
+        # Remove the old "Include" node.
+        tParentNode.removeChild(tIncludeNode)
+
+    def __preprocess(self, tXmlDocument):
+        if self.__strNetxType == 'NETX90_MPW':
+            # The netX90 MPW does not have a 'StartAPP' function yet.
+            # Replace it with a snippet.
+            atNodes = tXmlDocument.getElementsByTagName('StartAPP')
+            for tReplaceNode in atNodes:
+                strNewText = (
+                    '<Snip artifact="start_app_cpu_netx90_mpw" '
+                    'group="org.muhkuh.hboot.sniplib" '
+                    'version="1.0.0"/>'
+                )
+                tNewXml = xml.dom.minidom.parseString(
+                    '<?xml version="1.0" encoding="utf-8"?><Root>%s</Root>' %
+                    strNewText
+                )
+                tParentNode = tReplaceNode.parentNode
+                for tChildNode in tNewXml.documentElement.childNodes:
+                    tClonedNode = tChildNode.cloneNode(True)
+                    tParentNode.insertBefore(tClonedNode, tReplaceNode)
+                # Remove the old "StartAPP" node.
+                tParentNode.removeChild(tReplaceNode)
+
+        # Look for all 'Snip' nodes repeatedly until the maximum count is
+        # reached or no more 'Snip' nodes are found.
+        uiMaximumDepth = 100
+        uiDepth = 0
+        fFoundPreproc = True
+        while fFoundPreproc is True:
+            atSnipNodes = tXmlDocument.getElementsByTagName('Snip')
+            atIncludeNodes = tXmlDocument.getElementsByTagName('Include')
+            if (len(atSnipNodes) == 0) and (len(atIncludeNodes) == 0):
+                fFoundPreproc = False
+            elif uiDepth >= uiMaximumDepth:
+                raise Exception(
+                    'Too many nested preprocessor directives found! '
+                    'The maximum nesting depth is %d.' % uiMaximumDepth
+                )
+            else:
+                uiDepth += 1
+                for tNode in atSnipNodes:
+                    self.__preprocess_snip(tNode)
+                for tNode in atIncludeNodes:
+                    self.__preprocess_include(tNode)
+
+    def __build_standard_header(self, atChunks):
+
+        ulMagicCookie = None
+        ulSignature = None
+        if self.__strNetxType == 'NETX56':
+            ulMagicCookie = self.__MAGIC_COOKIE_NETX56
+            ulSignature = self.__get_tag_id('M', 'O', 'O', 'H')
+        elif(
+            (self.__strNetxType == 'NETX4000_RELAXED') or
+            (self.__strNetxType == 'NETX4000') or
+            (self.__strNetxType == 'NETX4100')
+        ):
+            if self.__tImageType == self.__IMAGE_TYPE_ALTERNATIVE:
+                ulMagicCookie = self.__MAGIC_COOKIE_NETX4000_ALT
+            else:
+                ulMagicCookie = self.__MAGIC_COOKIE_NETX4000
+            ulSignature = self.__get_tag_id('M', 'O', 'O', 'H')
+        elif self.__strNetxType == 'NETX90_MPW':
+            ulMagicCookie = self.__MAGIC_COOKIE_NETX90_MPW
+            ulSignature = self.__get_tag_id('M', 'O', 'O', 'H')
+        elif self.__strNetxType == 'NETX90':
+            if self.__tImageType == self.__IMAGE_TYPE_ALTERNATIVE:
+                ulMagicCookie = self.__MAGIC_COOKIE_NETX90_ALT
+            else:
+                ulMagicCookie = self.__MAGIC_COOKIE_NETX90
+            ulSignature = self.__get_tag_id('M', 'O', 'O', 'H')
+        else:
+            raise Exception(
+                'Missing platform configuration: no standard header '
+                'configured, please update the HBOOT image compiler.'
+            )
+
+        # Get the hash for the image.
+        tHash = hashlib.sha224()
+        tHash.update(py3_array_tobytes(atChunks))
+        aulHash = array.array('I', tHash.digest())
+
+        # Get the parameter0 value.
+        # For now only the lower 4 bits are defined. They set the number of
+        # hash DWORDs minus 1.
+        ulParameter0 = self.__sizHashDw - 1
+
+        # Build the boot block.
+        aBootBlock = array.array('I', [0] * 16)
+        aBootBlock[0x00] = ulMagicCookie        # Magic cookie.
+        aBootBlock[0x01] = 0                    # reserved
+        aBootBlock[0x02] = 0                    # reserved
+        aBootBlock[0x03] = 0                    # reserved
+        aBootBlock[0x04] = len(atChunks)        # chunks dword size
+        aBootBlock[0x05] = 0                    # reserved
+        aBootBlock[0x06] = ulSignature          # The image signature.
+        aBootBlock[0x07] = ulParameter0         # Image parameters.
+        aBootBlock[0x08] = aulHash[0]           # chunks hash
+        aBootBlock[0x09] = aulHash[1]           # chunks hash
+        aBootBlock[0x0a] = aulHash[2]           # chunks hash
+        aBootBlock[0x0b] = aulHash[3]           # chunks hash
+        aBootBlock[0x0c] = aulHash[4]           # chunks hash
+        aBootBlock[0x0d] = aulHash[5]           # chunks hash
+        aBootBlock[0x0e] = aulHash[6]           # chunks hash
+        aBootBlock[0x0f] = 0x00000000           # simple header checksum
+
+        return aBootBlock
+
+    def __combine_headers(self, atHeaderStandard):
+        """ Combine the override elements with the standard header """
+        aCombinedHeader = array.array('I', [0] * 16)
+
+        ulBootblockChecksum = 0
+        for iCnt in range(0, 15):
+            if self.__atHeaderOverride[iCnt] is None:
+                ulData = atHeaderStandard[iCnt]
+            else:
+                ulData = self.__atHeaderOverride[iCnt]
+            aCombinedHeader[iCnt] = ulData
+            ulBootblockChecksum += ulData
+            ulBootblockChecksum &= 0xffffffff
+        ulBootblockChecksum = (ulBootblockChecksum - 1) ^ 0xffffffff
+
+        # Does an override element exist for the checksum?
+        if self.__atHeaderOverride[0x0f] is None:
+            ulData = ulBootblockChecksum
+        else:
+            # Override the checksum.
+            ulData = self.__atHeaderOverride[0x0f]
+        aCombinedHeader[0x0f] = ulData
+
+        return aCombinedHeader
+
+    def __find_file(self, strFilePath):
+        strAbsFilePath = None
+
+        # Is this a file reference?
+        if strFilePath[0] == '@':
+            strFileId = strFilePath[1:]
+            if strFileId in self.__atKnownFiles:
+                strAbsFilePath = self.__atKnownFiles[strFileId]
+        else:
+            # Try the current working directory first.
+            if os.access(strFilePath, os.R_OK) is True:
+                strAbsFilePath = os.path.abspath(strFilePath)
+            else:
+                # Loop over all include folders.
+                for strIncludePath in self.__astrIncludePaths:
+                    strPath = os.path.abspath(
+                        os.path.join(strIncludePath, strFilePath)
+                    )
+                    if os.access(strPath, os.R_OK) is True:
+                        strAbsFilePath = strPath
+                        break
+
+        return strAbsFilePath
+
+    def __add_array_with_fillup(self, aucBuffer, aucNewData, sizMinimum):
+        aucBuffer.extend(aucNewData)
+        sizNewData = len(aucNewData)
+        if sizNewData < sizMinimum:
+            aucBuffer.extend([0] * (sizMinimum - sizNewData))
+
+    def __parse_numeric_expression(self, strExpression):
+        tAstNode = ast.parse(strExpression, mode='eval')
+        tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+        ulResult = eval(compile(tAstResolved, 'lala', mode='eval'))
+        # TODO: is this really necessary? Maybe ast.literal_eval throws
+        # something already.
+        if ulResult is None:
+            raise Exception('Invalid number: "%s"' % strExpression)
+        return ulResult
+
+    def __parse_header_options(self, tOptionsNode):
+        # Loop over all child nodes.
+        for tValueNode in tOptionsNode.childNodes:
+            if tValueNode.nodeType == tValueNode.ELEMENT_NODE:
+                if tValueNode.localName == 'Value':
+                    # Found a value node. It must have an index attribute which
+                    # evaluates to a number between 0 and 15.
+                    strIndex = tValueNode.getAttribute('index')
+                    if len(strIndex) == 0:
+                        raise Exception(
+                            'The Value node has no index attribute!'
+                        )
+                    ulIndex = self.__parse_numeric_expression(strIndex)
+
+                    # The index must be >=0 and <16.
+                    if (ulIndex < 0) or (ulIndex > 15):
+                        raise Exception(
+                            'The index exceeds the valid range '
+                            'of [0..15]: %d' % ulIndex
+                        )
+
+                    # Get the data.
+                    strData = self.__xml_get_all_text(tValueNode)
+                    if len(strData) == 0:
+                        raise Exception('The Value node has no content!')
+
+                    ulData = self.__parse_numeric_expression(strData)
+                    # The data must be an unsigned 32bit number.
+                    if (ulData < 0) or (ulIndex > 0xffffffff):
+                        raise Exception(
+                            'The data exceeds the valid range of an '
+                            'unsigned 32bit number: %d' % ulData
+                        )
+
+                    # Is the index already modified?
+                    if not self.__atHeaderOverride[ulIndex] is None:
+                        raise Exception(
+                            'The value at index %d is already '
+                            'set to 0x%08x!' % (ulIndex, ulData)
+                        )
+
+                    # Set the value.
+                    self.__atHeaderOverride[ulIndex] = ulData
+                else:
+                    raise Exception('Unexpected node: %s' %
+                                    tValueNode.localName)
+
+    def __append_32bit(self, atData, ulValue):
+        atData.append(ulValue & 0xff)
+        atData.append((ulValue >> 8) & 0xff)
+        atData.append((ulValue >> 16) & 0xff)
+        atData.append((ulValue >> 24) & 0xff)
+
+    def __crc16(self, strData):
+        usCrc = 0
+        for uiCnt in range(0, len(strData)):
+            ucByte = ord(strData[uiCnt])
+            usCrc = (usCrc >> 8) | ((usCrc & 0xff) << 8)
+            usCrc ^= ucByte
+            usCrc ^= (usCrc & 0xff) >> 4
+            usCrc ^= (usCrc & 0x0f) << 12
+            usCrc ^= ((usCrc & 0xff) << 4) << 1
+        return usCrc
+
+    def __build_chunk_options(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        atChunk = None
+
+        # Compile the options definition to a string of bytes.
+        tOptionCompiler = option_compiler.OptionCompiler(
+            self.__cPatchDefinitions
+        )
+        tOptionCompiler.process(tChunkNode)
+        strData = tOptionCompiler.tostring()
+
+        # Return the plain option chunk for SECMEM images.
+        # Add a header otherwise.
+        if self.__tImageType == self.__IMAGE_TYPE_SECMEM:
+            atChunk = array.array('B')
+            atChunk.fromstring(strData)
+        else:
+            if self.__strNetxType == 'NETX56':
+                # Pad the option chunk plus a CRC16 to 32 bit size.
+                strPadding = chr(0x00) * ((4 - ((len(strData) + 2) % 4)) & 3)
+                strChunk = strData + strPadding
+
+                # Get the CRC16 for the chunk.
+                usCrc = self.__crc16(strChunk)
+                strChunk += chr((usCrc >> 8) & 0xff)
+                strChunk += chr(usCrc & 0xff)
+
+                aulData = array.array('I')
+                py3_array_frombytes(aulData, strChunk)
+
+                atChunk = array.array('I')
+                atChunk.append(self.__get_tag_id('O', 'P', 'T', 'S'))
+                atChunk.append(len(aulData))
+                atChunk.extend(aulData)
+
+            elif(
+                (self.__strNetxType == 'NETX4000_RELAXED') or
+                (self.__strNetxType == 'NETX4000') or
+                (self.__strNetxType == 'NETX4100')
+            ):
+                # Pad the option chunk to 32 bit size.
+                strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+                strChunk = strData + strPadding
+
+                aulData = array.array('I')
+                py3_array_frombytes(aulData, strChunk)
+
+                atChunk = array.array('I')
+                atChunk.append(self.__get_tag_id('O', 'P', 'T', 'S'))
+                atChunk.append(len(aulData) + self.__sizHashDw)
+                atChunk.extend(aulData)
+
+                # Get the hash for the chunk.
+                tHash = hashlib.sha384()
+                tHash.update(atChunk.tostring())
+                strHash = tHash.digest()
+                aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+                atChunk.extend(aulHash)
+
+            elif(
+                (self.__strNetxType == 'NETX90_MPW') or
+                (self.__strNetxType == 'NETX90')
+            ):
+                # Pad the option chunk to 32 bit size.
+                strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+                strChunk = strData + strPadding
+
+                aulData = array.array('I')
+                py3_array_frombytes(aulData, strChunk)
+
+                atChunk = array.array('I')
+                atChunk.append(self.__get_tag_id('O', 'P', 'T', 'S'))
+                atChunk.append(len(aulData) + self.__sizHashDw)
+                atChunk.extend(aulData)
+
+                # Get the hash for the chunk.
+                tHash = hashlib.sha384()
+                tHash.update(atChunk.tostring())
+                strHash = tHash.digest()
+                aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+                atChunk.extend(aulHash)
+
+            else:
+                raise Exception(
+                    '"Opts" chunk is not supported for chip type "%s".' %
+                    (self.__strNetxType)
+                )
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = atChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __get_data_contents_elf(self, tNode, strAbsFilePath, fWantLoadAddress):
+        # Get the segment names to dump. It is a comma separated string.
+        # This is optional. If no segment names are specified, all sections
+        # with PROGBITS are dumped.
+        strSegmentsToDump = tNode.getAttribute('segments').strip()
+        astrSegmentsToDump = None
+        if len(strSegmentsToDump) != 0:
+            astrSegmentsToDump = [
+                strSegment.strip() for strSegment in
+                string.split(strSegmentsToDump, ',')
+            ]
+
+        # Extract the segments.
+        atSegments = elf_support.get_segment_table(
+            self.__tEnv,
+            strAbsFilePath,
+            astrSegmentsToDump
+        )
+        # Get the estimated binary size from the segments.
+        ulEstimatedBinSize = elf_support.get_estimated_bin_size(atSegments)
+        # Do not create files larger than 512MB.
+        if ulEstimatedBinSize >= 0x20000000:
+            raise Exception('The resulting file seems to extend '
+                            '512MBytes. Too scared to continue!')
+
+        if fWantLoadAddress is True:
+            strOverwriteAddress = tNode.getAttribute(
+                'overwrite_address'
+            ).strip()
+            if len(strOverwriteAddress) == 0:
+                pulLoadAddress = elf_support.get_load_address(atSegments)
+            else:
+                pulLoadAddress = int(strOverwriteAddress, 0)
+        else:
+            pulLoadAddress = None
+
+        # Extract the binary.
+        tBinFile, strBinFileName = tempfile.mkstemp()
+        os.close(tBinFile)
+        astrCmd = [
+            self.__tEnv['OBJCOPY'],
+            '--output-target=binary'
+        ]
+        if astrSegmentsToDump is not None:
+            for strSegment in astrSegmentsToDump:
+                astrCmd.append('--only-section=%s' % strSegment)
+        astrCmd.append(strAbsFilePath)
+        astrCmd.append(strBinFileName)
+        subprocess.check_call(astrCmd)
+
+        # Get the application data.
+        tBinFile = open(strBinFileName, 'rb')
+        strData = tBinFile.read()
+        tBinFile.close()
+
+        # Remove the temp file.
+        os.remove(strBinFileName)
+
+        return strData, pulLoadAddress
+
+    def __get_data_contents_key(self, tKeyNode):
+        strData = None
+
+        if(
+            (self.__strNetxType == 'NETX90_MPW') or
+            (self.__strNetxType == 'NETX90')
+        ):
+            aucData = array.array('B')
+
+            atKey = {}
+            self.__usip_parse_trusted_path(tKeyNode, atKey)
+
+            iKeyTyp_1ECC_2RSA = atKey['iKeyTyp_1ECC_2RSA']
+            atAttr = atKey['atAttr']
+            if iKeyTyp_1ECC_2RSA == 2:
+                # Add the algorithm.
+                aucData.append(iKeyTyp_1ECC_2RSA)
+                # Add the strength.
+                aucData.append(atAttr['id'])
+                # Add the public modulus N and fill up to 64 bytes.
+                self.__add_array_with_fillup(aucData, atAttr['mod'], 512)
+                # Add the exponent E.
+                aucData.extend(atAttr['exp'])
+
+            elif iKeyTyp_1ECC_2RSA == 1:
+                # Add the algorithm.
+                aucData.append(iKeyTyp_1ECC_2RSA)
+                # Add the strength.
+                aucData.append(atAttr['id'])
+                # Write all fields and fill up to 64 bytes.
+                self.__add_array_with_fillup(aucData, atAttr['Qx'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['Qy'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['a'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['b'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['p'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['Gx'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['Gy'], 64)
+                self.__add_array_with_fillup(aucData, atAttr['n'], 64)
+                aucData.extend([0, 0, 0])
+
+            strData = aucData.tostring()
+
+        else:
+            raise Exception(
+                'Key data is not supported for the netX type "%s".' %
+                self.__strNetxType
+            )
+
+        return strData
+
+    REGI_COMMAND_NoOperation = 0
+    REGI_COMMAND_LoadStore = 1
+    REGI_COMMAND_Delay = 2
+    REGI_COMMAND_Poll = 3
+    REGI_COMMAND_SourceIsRegister = 0x10
+    REGI_COMMAND_UnlockAccessKey = 0x20
+
+    atRegisterCommandTypes = {
+        'nop': {
+            'atAttributes': [],
+            'ucCmd': REGI_COMMAND_NoOperation,
+            'atSerialize': [],
+        },
+        'set': {
+            'atAttributes': [
+                {'name': 'address', 'type': 'uint32'},
+                {'name': 'value',   'type': 'uint32'},
+                {'name': 'unlock',  'type': 'bool', 'optional': True, 'default': False}
+            ],
+            'ucCmd': REGI_COMMAND_LoadStore,
+            'atSerialize': ['value', 'address'],
+        },
+        'copy': {
+            'atAttributes': [
+                {'name': 'source',  'type': 'uint32'},
+                {'name': 'dest',    'type': 'uint32'},
+                {'name': 'unlock',  'type': 'bool', 'optional': True, 'default': False}
+            ],
+            'ucCmd': REGI_COMMAND_LoadStore + REGI_COMMAND_SourceIsRegister,
+            'atSerialize': ['source', 'dest'],
+        },
+        'delay': {
+            'atAttributes': [
+                {'name': 'time_ms', 'type': 'uint32'}
+            ],
+            'ucCmd': REGI_COMMAND_Delay,
+            'atSerialize': ['time_ms'],
+        },
+        'poll': {
+            'atAttributes': [
+                {'name': 'address',     'type': 'uint32'},
+                {'name': 'mask',        'type': 'uint32', 'optional': True, 'default': 0xffffffff},
+                {'name': 'cmp',         'type': 'uint32'},
+                {'name': 'timeout_ms',  'type': 'uint32'},
+            ],
+            'ucCmd': REGI_COMMAND_Poll,
+            'atSerialize': ['address', 'mask', 'cmp', 'timeout_ms'],
+        },
+    }
+
+    # Read the contents of a <Register> chunk and turn it into an intermediate representation.
+    # Attributes not required for a command are ignored, i.e. <nop address="0x10000000" /> is accepted.
+    def __get_register_contents(self, tRegNode, atCmd):
+        # tRegNode is the <Register> tag. Each child is a register command, e.g. <set>.
+        for tCmdNode in tRegNode.childNodes:
+            # Is this a node element?
+            if tCmdNode.nodeType == tCmdNode.ELEMENT_NODE:
+                tCmd = {}
+                atCmd.append(tCmd)
+
+                # Get the command name and the list of attributes defined for it.
+                strNodeName = tCmdNode.localName
+                tCmd['name'] = strNodeName
+
+                if strNodeName not in self.atRegisterCommandTypes:
+                    raise Exception(
+                        'Unknown command type in register chunk: %s' % (strNodeName)
+                    )
+                else:
+                    atAttribs = self.atRegisterCommandTypes[strNodeName]['atAttributes']
+
+                    # Collect the attributes for the current register command.
+                    for tAttrib in atAttribs:
+                        # Get name and type of each attribute and whether it's optional.
+                        # By default, attributes are mandatory.
+                        strAttribName = tAttrib['name']
+                        strAttribType = tAttrib['type']
+                        fAttribOpt = 'optional' in tAttrib and tAttrib['optional'] is True
+
+                        # Get the value of the XML attribute.
+                        # If the attribute is not present, an empty string is returned.
+                        strAttribVal = tCmdNode.getAttribute(strAttribName).strip()
+
+                        # The attribute is present. Convert the value.
+                        if len(strAttribVal) > 0:
+                            if strAttribType == 'uint32':
+                                ulAttribVal = self.__parse_numeric_expression(strAttribVal)
+                                if ulAttribVal is None:
+                                    raise Exception(
+                                        'Could not parse value %s in attribute %s' % (strAttribVal, strAttribName)
+                                    )
+                                tCmd[strAttribName] = ulAttribVal
+
+                            elif strAttribType == 'bool':
+                                if strAttribVal == 'true':
+                                    tCmd[strAttribName] = True
+                                elif strAttribVal == 'false':
+                                    tCmd[strAttribName] = False
+                                else:
+                                    raise Exception(
+                                        'Invalid value %s for boolean attribute %s' % (strAttribVal, strAttribName)
+                                    )
+                            else:
+                                tCmd[strAttribName] = strAttribVal
+
+                        # The attribute is not present and it is optional.
+                        # Set the default value if defined.
+                        elif fAttribOpt:
+                            # If optional, get the default value if present.
+                            if 'default' in tAttrib:
+                                tCmd[strAttribName] = tAttrib['default']
+
+                        # The attribute is not present, but it is mandatory.
+                        # Raise an error.
+                        else:
+                            raise Exception(
+                                'Mandatory attribute %s is missing' % (strAttribName)
+                            )
+                    # print tCmd
+
+    # Serialize the intermediate representation of a Register chunk.
+    def __serialize_register_chunk(self, atCmd, aulCmds):
+        abData = bytearray()
+
+        for tCmd in atCmd:
+            tCmdDesc = self.atRegisterCommandTypes[tCmd['name']]
+
+            ucCmd = tCmdDesc['ucCmd']
+            if 'unlock' in tCmd and tCmd['unlock'] is True:
+                ucCmd += self.REGI_COMMAND_UnlockAccessKey
+            abData.append(ucCmd)
+
+            astrAttribs = tCmdDesc['atSerialize']
+            for strAttrib in astrAttribs:
+                ulVal = tCmd[strAttrib]
+                self.__append_32bit(abData, ulVal)
+
+        # Pad array to multiple of 4 bytes
+        while (len(abData) & 3) != 0:
+            abData.append(0)
+
+        # Convert to an arrray of dwords
+        strData = str(abData)
+        aulData = array.array('I')
+        aulData.fromstring(strData)
+
+        aulCmds.extend(aulData)
+
+    # Construct a chunk out of chunk data, adding chunk ID, size and hash.
+    def __wrap_chunk(self, tChunkAttributes, ulTagId, aulData):
+        # Build the chunk.
+        aulChunk = array.array('I')
+        aulChunk.append(ulTagId)
+        aulChunk.append(len(aulData) + self.__sizHashDw)
+        aulChunk.extend(aulData)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_register(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tRegNode = tChunkAttributes['tNode']
+
+        # Read the register operations from the XML.
+        atCmd = []
+        self.__get_register_contents(tRegNode, atCmd)
+
+        # Encode the operations.
+        aulData = array.array('I')
+        self.__serialize_register_chunk(atCmd, aulData)
+
+        # Build the chunk
+        ulTagId = self.__get_tag_id('R', 'E', 'G', 'I')
+        self.__wrap_chunk(tChunkAttributes, ulTagId, aulData)
+
+    def __get_data_contents(self, tDataNode, atData, fWantLoadAddress):
+        strData = None
+        pulLoadAddress = None
+
+        # Loop over all child nodes.
+        for tNode in tDataNode.childNodes:
+            # Is this a node element?
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                # Is this a "File" node?
+                if tNode.localName == 'File':
+                    # Get the file name.
+                    strFileName = tNode.getAttribute('name')
+                    if len(strFileName) == 0:
+                        raise Exception(
+                            "The file node has no name attribute!"
+                        )
+
+                    # Search the file in the current working folder and all
+                    # include paths.
+                    strAbsFilePath = self.__find_file(strFileName)
+                    if strAbsFilePath is None:
+                        raise Exception('File %s not found!' % strFileName)
+
+                    # Is this an ELF file?
+                    strRoot, strExtension = os.path.splitext(strAbsFilePath)
+                    if strExtension == '.elf':
+                        strData, pulLoadAddress = self.__get_data_contents_elf(
+                            tNode,
+                            strAbsFilePath,
+                            True
+                        )
+
+                    elif strExtension == '.bin':
+                        if fWantLoadAddress is True:
+                            strLoadAddress = tNode.getAttribute('load_address')
+                            if len(strLoadAddress) == 0:
+                                raise Exception(
+                                    'The File node points to a binary file '
+                                    'and has no load_address attribute!'
+                                )
+
+                            pulLoadAddress = self.__parse_numeric_expression(
+                                strLoadAddress
+                            )
+
+                        tBinFile = open(strAbsFilePath, 'rb')
+                        strData = tBinFile.read()
+                        tBinFile.close()
+
+                    else:
+                        raise Exception('The File node points to a file with '
+                                        'an unknown extension: %s' %
+                                        strExtension)
+                # Is this a node element with the name 'Hex'?
+                elif tNode.localName == 'Hex':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The Hex node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+
+                    # Get the text in this node and parse it as hex data.
+                    strDataHex = self.__xml_get_all_text(tNode)
+                    if strDataHex is None:
+                        raise Exception('No text in node "Hex" found!')
+
+                    strDataHex = self.__remove_all_whitespace(strDataHex)
+                    strData = binascii.unhexlify(strDataHex)
+
+                elif tNode.localName == 'UInt32':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The UInt32 node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+
+                    # Get the text in this node and split it by whitespace.
+                    strDataUint = self.__xml_get_all_text(tNode)
+                    if strDataUint is None:
+                        raise Exception('No text in node "UInt32" found!')
+
+                    astrNumbers = string.split(strDataUint, ',')
+                    aulNumbers = array.array('I')
+                    for strNumber in astrNumbers:
+                        ulNum = self.__parse_numeric_expression(
+                            string.strip(strNumber)
+                        )
+                        aulNumbers.append(ulNum)
+
+                    strData = aulNumbers.tostring()
+
+                elif tNode.localName == 'UInt16':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The UInt16 node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+
+                    # Get the text in this node and split it by whitespace.
+                    strDataUint = self.__xml_get_all_text(tNode)
+                    if strDataUint is None:
+                        raise Exception('No text in node "UInt16" found!')
+
+                    astrNumbers = string.split(strDataUint, ',')
+                    ausNumbers = array.array('H')
+                    for strNumber in astrNumbers:
+                        usNum = self.__parse_numeric_expression(
+                            string.strip(strNumber)
+                        )
+                        ausNumbers.append(usNum)
+
+                    strData = ausNumbers.tostring()
+
+                elif tNode.localName == 'UInt8':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The UInt8 node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+
+                    # Get the text in this node and split it by whitespace.
+                    strDataUint = self.__xml_get_all_text(tNode)
+                    if strDataUint is None:
+                        raise Exception('No text in node "UInt8" found!')
+
+                    astrNumbers = string.split(strDataUint, ',')
+                    aucNumbers = array.array('B')
+                    for strNumber in astrNumbers:
+                        ucNum = self.__parse_numeric_expression(
+                            string.strip(strNumber)
+                        )
+                        aucNumbers.append(ucNum)
+
+                    strData = aucNumbers.tostring()
+
+                elif tNode.localName == 'Key':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The Key node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+                    strData = self.__get_data_contents_key(tNode)
+
+                elif tNode.localName == 'Concat':
+                    if fWantLoadAddress is True:
+                        # Get the address.
+                        strAddress = tNode.getAttribute('address')
+                        if len(strAddress) == 0:
+                            raise Exception('The Concat node has no '
+                                            'address attribute!')
+
+                        pulLoadAddress = self.__parse_numeric_expression(
+                            strAddress
+                        )
+
+                    astrData = []
+
+                    # Loop over all sub-nodes.
+                    for tConcatNode in tNode.childNodes:
+                        # Is this a node element?
+                        if tConcatNode.nodeType == tConcatNode.ELEMENT_NODE:
+                            # Is this a node element with the name 'Hex'?
+                            if tConcatNode.localName == 'Hex':
+                                # Get the text in this node and parse it
+                                # as hex data.
+                                strDataHex = self.__xml_get_all_text(
+                                    tConcatNode
+                                )
+                                if strDataHex is None:
+                                    raise Exception('No text in node '
+                                                    '"Hex" found!')
+
+                                strDataHex = self.__remove_all_whitespace(
+                                    strDataHex
+                                )
+                                strDataChunk = binascii.unhexlify(strDataHex)
+                                astrData.append(strDataChunk)
+
+                            elif tConcatNode.localName == 'UInt32':
+                                # Get the text in this node and split it
+                                # by whitespace.
+                                strDataUint = self.__xml_get_all_text(
+                                    tConcatNode
+                                )
+                                if strDataUint is None:
+                                    raise Exception('No text in node '
+                                                    '"UInt32" found!')
+
+                                astrNumbers = string.split(strDataUint, ',')
+                                aulNumbers = array.array('I')
+                                for strNumber in astrNumbers:
+                                    ulNum = self.__parse_numeric_expression(
+                                        string.strip(strNumber)
+                                    )
+                                    aulNumbers.append(ulNum)
+
+                                strDataChunk = aulNumbers.tostring()
+                                astrData.append(strDataChunk)
+
+                            elif tConcatNode.localName == 'UInt16':
+                                # Get the text in this node and split it
+                                # by whitespace.
+                                strDataUint = self.__xml_get_all_text(
+                                    tConcatNode
+                                )
+                                if strDataUint is None:
+                                    raise Exception('No text in node '
+                                                    '"UInt16" found!')
+
+                                astrNumbers = string.split(strDataUint, ',')
+                                ausNumbers = array.array('H')
+                                for strNumber in astrNumbers:
+                                    usNum = self.__parse_numeric_expression(
+                                        string.strip(strNumber)
+                                    )
+                                    ausNumbers.append(usNum)
+
+                                strDataChunk = ausNumbers.tostring()
+                                astrData.append(strDataChunk)
+
+                            elif tConcatNode.localName == 'UInt8':
+                                # Get the text in this node and split it
+                                # by whitespace.
+                                strDataUint = self.__xml_get_all_text(
+                                    tConcatNode
+                                )
+                                if strDataUint is None:
+                                    raise Exception('No text in node "UInt8" '
+                                                    ' found!')
+
+                                astrNumbers = string.split(strDataUint, ',')
+                                aucNumbers = array.array('B')
+                                for strNumber in astrNumbers:
+                                    ucNum = self.__parse_numeric_expression(
+                                        string.strip(strNumber)
+                                    )
+                                    aucNumbers.append(ucNum)
+
+                                strDataChunk = aucNumbers.tostring()
+                                astrData.append(strDataChunk)
+
+                            elif tConcatNode.localName == 'Key':
+                                strDataChunk = self.__get_data_contents_key(
+                                    tConcatNode
+                                )
+                                astrData.append(strDataChunk)
+
+                    strData = ''.join(astrData)
+
+                else:
+                    raise Exception('Unexpected node: %s' % tNode.localName)
+
+        # Check if all parameters are there.
+        if strData is None:
+            raise Exception('No data specified!')
+        if (fWantLoadAddress is True) and (pulLoadAddress is None):
+            raise Exception('No load address specified!')
+
+        atData['data'] = strData
+        if fWantLoadAddress is True:
+            atData['load_address'] = pulLoadAddress
+
+    def __build_chunk_data(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the data block.
+        atData = {}
+        self.__get_data_contents(tChunkNode, atData, True)
+        strData = atData['data']
+        pulLoadAddress = atData['load_address']
+
+        # Pad the application size to a multiple of DWORDs.
+        strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+        strChunk = strData + str.encode(strPadding)
+
+        # Convert the padded data to an array.
+        aulData = array.array('I')
+        py3_array_frombytes(aulData, strChunk)
+
+        aulChunk = array.array('I')
+        # Do not add an ID for info page images.
+        if(
+            (self.__tImageType != self.__IMAGE_TYPE_COM_INFO_PAGE) and
+            (self.__tImageType != self.__IMAGE_TYPE_APP_INFO_PAGE)
+        ):
+            aulChunk.append(self.__get_tag_id('D', 'A', 'T', 'A'))
+            aulChunk.append(len(aulData) + 1 + self.__sizHashDw)
+            aulChunk.append(pulLoadAddress)
+            aulChunk.extend(aulData)
+
+            # Get the hash for the chunk.
+            tHash = hashlib.sha384()
+            tHash.update(py3_array_tobytes(aulChunk))
+            strHash = tHash.digest()
+            aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+            aulChunk.extend(aulHash)
+
+        else:
+            # The info pages only get the data.
+            aulChunk = aulData
+
+            # Get the hash for the chunk.
+            tHash = hashlib.sha384()
+            tHash.update(py3_array_tobytes(aulChunk))
+            strHash = tHash.digest()
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_text(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the text block.
+        strText = self.__xml_get_all_text(tChunkNode)
+
+        # Pad the text to a multiple of DWORDs.
+        strPadding = chr(0x00) * ((4 - (len(strText) % 4)) & 3)
+        strChunk = strText + strPadding
+
+        # Convert the padded text to an array.
+        aulData = array.array('I')
+        py3_array_frombytes(aulData, strChunk)
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('T', 'E', 'X', 'T'))
+        aulChunk.append(len(aulData) + self.__sizHashDw)
+        aulChunk.extend(aulData)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_xip(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the data block.
+        atData = {}
+        self.__get_data_contents(tChunkNode, atData, True)
+        strData = atData['data']
+        pulLoadAddress = atData['load_address']
+
+        # Get the available XIP areas for the current platform.
+        atXIPAreas = None
+        if self.__strNetxType == 'NETX56':
+            raise Exception('Continue here!')
+        elif(
+            (self.__strNetxType == 'NETX4000_RELAXED') or
+            (self.__strNetxType == 'NETX4000') or
+            (self.__strNetxType == 'NETX4100')
+        ):
+            atXIPAreas = [
+                # SQIROM0
+                {
+                    'device': 'SQIROM0',
+                    'start': 0x10000000,
+                    'end': 0x14000000
+                },
+
+                # SQIROM1
+                {
+                    'device': 'SQIROM1',
+                    'start': 0x14000000,
+                    'end': 0x18000000
+                }
+            ]
+        elif(
+            (self.__strNetxType == 'NETX90_MPW') or
+            (self.__strNetxType == 'NETX90')
+        ):
+            atXIPAreas = [
+                # SQI flash
+                {
+                    'device': 'SQIROM',
+                    'start': 0x64000000,
+                    'end': 0x68000000
+                },
+
+                # IFLASH0 and 1
+                {
+                    'device': 'INTFLASH',
+                    'start': 0x00100000,
+                    'end': 0x00200000
+                }
+            ]
+
+        pulXipStartAddress = None
+        for tXipArea in atXIPAreas:
+            if(
+                (pulLoadAddress >= tXipArea['start']) and
+                (pulLoadAddress < tXipArea['end'])
+            ):
+                if tXipArea['device'] != self.__strDevice:
+                    raise Exception(
+                        'The XIP load address matches the %s device, but the '
+                        'image specifies %s' % (
+                            tXipArea['device'],
+                            self.__strDevice
+                        )
+                    )
+                pulXipStartAddress = tXipArea['start']
+                break
+        if pulXipStartAddress is None:
+            raise Exception(
+                'The load address 0x%08x of the XIP block is outside the '
+                'available XIP regions of the platform.' % pulLoadAddress
+            )
+
+        # Get the requested offset of the data in the XIP area.
+        ulOffsetRequested = pulLoadAddress - pulXipStartAddress
+
+        # The requested offset must be the current offset + 8 (4 for the ID
+        # and 4 for the length).
+        ulOffsetRequestedData = 8
+
+        # Get the current offset in bytes.
+        ulOffsetCurrent = atParserState['ulCurrentOffset']
+
+        # The requested offset must be the current offset + the data offset
+        ulOffsetCurrentData = ulOffsetCurrent + ulOffsetRequestedData
+        if ulOffsetRequested != ulOffsetCurrentData:
+            raise Exception(
+                'The current offset 0x%08x does not match the requested '
+                'offset 0x%08x of the XIP data.' % (
+                    ulOffsetCurrentData,
+                    ulOffsetRequested
+                )
+            )
+
+        # The load address must be exactly the address where the code starts.
+        # Pad the application size to a multiple of DWORDs.
+        strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+        strChunk = strData + strPadding
+
+        # Convert the padded data to an array.
+        aulData = array.array('I')
+        py3_array_frombytes(aulData, strChunk)
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('T', 'E', 'X', 'T'))
+        aulChunk.append(len(aulData) + self.__sizHashDw)
+        aulChunk.extend(aulData)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __get_execute_data(self, tExecuteNode, atData):
+        pfnExecFunction = None
+        ulR0 = None
+        ulR1 = None
+        ulR2 = None
+        ulR3 = None
+
+        # Look for a child node named "File".
+        for tNode in tExecuteNode.childNodes:
+            # Is this a node element?
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                # Is this a "File" node?
+                if tNode.localName == 'File':
+                    # Is there already an exec function?
+                    if pfnExecFunction is not None:
+                        raise Exception('More than one execution address '
+                                        'specified!')
+
+                    # Get the file name.
+                    strFileName = tNode.getAttribute('name')
+                    if len(strFileName) == 0:
+                        raise Exception('The file node has no name attribute!')
+
+                    # Search the file in the current working folder and all
+                    # include paths.
+                    strAbsFilePath = self.__find_file(strFileName)
+                    if strAbsFilePath is None:
+                        raise Exception('File %s not found!' % strFileName)
+
+                    # Is this an ELF file?
+                    strRoot, strExtension = os.path.splitext(strAbsFilePath)
+                    if strExtension != '.elf':
+                        raise Exception(
+                            'The execute chunk has a file child which points '
+                            'to a non-elf file. How to get the execute '
+                            'address from this?'
+                        )
+
+                    strStartSymbol = tNode.getAttribute('start')
+                    if len(strStartSymbol) == 0:
+                        strStartSymbol = 'start'
+
+                    # Get all symbols.
+                    atSymbols = elf_support.get_symbol_table(self.__tEnv,
+                                                             strAbsFilePath)
+                    if strStartSymbol not in atSymbols:
+                        raise Exception(
+                            'The symbol for the start startaddress "%s" '
+                            'could not be found!' % strStartSymbol
+                        )
+                    pfnExecFunction = int(atSymbols[strStartSymbol])
+                elif tNode.localName == 'Address':
+                    # Is there already an exec function?
+                    if pfnExecFunction is not None:
+                        raise Exception('More than one execution address '
+                                        'specified!')
+
+                    pfnExecFunction = self.__parse_numeric_expression(
+                        self.__xml_get_all_text(tNode)
+                    )
+                elif tNode.localName == 'R0':
+                    ulR0 = self.__parse_numeric_expression(
+                        self.__xml_get_all_text(tNode)
+                    )
+                elif tNode.localName == 'R1':
+                    ulR1 = self.__parse_numeric_expression(
+                        self.__xml_get_all_text(tNode)
+                    )
+                elif tNode.localName == 'R2':
+                    ulR2 = self.__parse_numeric_expression(
+                        self.__xml_get_all_text(tNode)
+                    )
+                elif tNode.localName == 'R3':
+                    ulR3 = self.__parse_numeric_expression(
+                        self.__xml_get_all_text(tNode)
+                    )
+                else:
+                    raise Exception('Unexpected node: %s' % tNode.localName)
+
+        if pfnExecFunction is None:
+            raise Exception('No execution address specified!')
+        if ulR0 is None:
+            ulR0 = 0
+        if ulR1 is None:
+            ulR1 = 0
+        if ulR2 is None:
+            ulR2 = 0
+        if ulR3 is None:
+            ulR3 = 0
+
+        atData['pfnExecFunction'] = pfnExecFunction
+        atData['ulR0'] = ulR0
+        atData['ulR1'] = ulR1
+        atData['ulR2'] = ulR2
+        atData['ulR3'] = ulR3
+
+    def __build_chunk_execute(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        __atData = {
+            # The key index must be set by the user.
+            'pfnExecFunction': None,
+            'ulR0': None,
+            'ulR1': None,
+            'ulR2': None,
+            'ulR3': None
+        }
+        self.__get_execute_data(tChunkNode, __atData)
+
+        # netX90 has some strange additional options.
+        ulFlags = None
+        sizDataInDwords = 5
+        if(self.__strNetxType == 'NETX90'):
+            sizDataInDwords = 6
+
+            # Check if the APP CPU should be started.
+            fStartAppCpu = False
+            strBool = tChunkNode.getAttribute('start_app')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fStartAppCpu = fBool
+
+            # Check if the firewall settings should be locked.
+            fLockFirewallSettings = False
+            strBool = tChunkNode.getAttribute('lock_firewall')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fLockFirewallSettings = fBool
+
+            # Check if debugging should be activated.
+            fActivateDebugging = False
+            strBool = tChunkNode.getAttribute('activate_debugging')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fActivateDebugging = fBool
+
+            # Check if the firewall settings should be applied.
+            fApplyFirewallSettings = False
+            strBool = tChunkNode.getAttribute('apply_firewall_settings')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fApplyFirewallSettings = fBool
+
+            # Combine all flags.
+            ulFlags = 0
+            if fStartAppCpu is True:
+                ulFlags |= 1
+            if fLockFirewallSettings is True:
+                ulFlags |= 2
+            if fActivateDebugging is True:
+                ulFlags |= 4
+            if fApplyFirewallSettings is True:
+                ulFlags |= 8
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('E', 'X', 'E', 'C'))
+        aulChunk.append(sizDataInDwords + self.__sizHashDw)
+        aulChunk.append(__atData['pfnExecFunction'])
+        aulChunk.append(__atData['ulR0'])
+        aulChunk.append(__atData['ulR1'])
+        aulChunk.append(__atData['ulR2'])
+        aulChunk.append(__atData['ulR3'])
+        if ulFlags is not None:
+            aulChunk.append(ulFlags)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_execute_ca9(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        __atCore0 = {
+            # The key index must be set by the user.
+            'pfnExecFunction': 0,
+            'ulR0': 0,
+            'ulR1': 0,
+            'ulR2': 0,
+            'ulR3': 0
+        }
+        __atCore1 = {
+            # The key index must be set by the user.
+            'pfnExecFunction': 0,
+            'ulR0': 0,
+            'ulR1': 0,
+            'ulR2': 0,
+            'ulR3': 0
+        }
+
+        # Look for a child node named "File".
+        for tCoreNode in tChunkNode.childNodes:
+            # Is this a node element?
+            if tCoreNode.nodeType == tCoreNode.ELEMENT_NODE:
+                # Is this a 'Core0' node?
+                if tCoreNode.localName == 'Core0':
+                    self.__get_execute_data(tCoreNode, __atCore0)
+
+                # Is this a 'Core1' node?
+                elif tCoreNode.localName == 'Core1':
+                    self.__get_execute_data(tCoreNode, __atCore1)
+
+                else:
+                    raise Exception('Unexpected node: %s' %
+                                    tCoreNode.localName)
+
+        if(
+            (__atCore0['pfnExecFunction'] == 0) and
+            (__atCore1['pfnExecFunction'] == 0)
+        ):
+            raise Exception('No core is started with the ExecuteCA9 chunk!')
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('E', 'X', 'A', '9'))
+        aulChunk.append(10 + self.__sizHashDw)
+        aulChunk.append(__atCore0['pfnExecFunction'])
+        aulChunk.append(__atCore0['ulR0'])
+        aulChunk.append(__atCore0['ulR1'])
+        aulChunk.append(__atCore0['ulR2'])
+        aulChunk.append(__atCore0['ulR3'])
+        aulChunk.append(__atCore1['pfnExecFunction'])
+        aulChunk.append(__atCore1['ulR0'])
+        aulChunk.append(__atCore1['ulR1'])
+        aulChunk.append(__atCore1['ulR2'])
+        aulChunk.append(__atCore1['ulR3'])
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_spi_macro(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the device.
+        strDeviceName = tChunkNode.getAttribute('device')
+        if len(strDeviceName) == 0:
+            raise Exception('The SPI macro node has no device attribute!')
+
+        # Parse the data.
+        ulDevice = self.__parse_numeric_expression(strDeviceName)
+
+        tOptionCompiler = option_compiler.OptionCompiler(
+            self.__cPatchDefinitions
+        )
+        strMacroData = tOptionCompiler.get_spi_macro_data(tChunkNode)
+
+        # Prepend the device and the size.
+        sizMacro = len(strMacroData)
+        if sizMacro > 255:
+            raise Exception('The SPI macro is too long. The header can only '
+                            'indicate up to 255 bytes.')
+        strData = chr(ulDevice) + chr(sizMacro) + strMacroData
+
+        # Pad the macro to a multiple of dwords.
+        strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+        strChunk = strData + strPadding
+
+        # Convert the padded data to an array.
+        aulData = array.array('I')
+        py3_array_frombytes(aulData, strChunk)
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('S', 'P', 'I', 'M'))
+        aulChunk.append(len(aulData) + self.__sizHashDw)
+        aulChunk.extend(aulData)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __build_chunk_skip_header(self, tChunkAttributes, atParserState):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the device.
+        strAbsolute = tChunkNode.getAttribute('absolute')
+        sizAbsolute = len(strAbsolute)
+        strRelative = tChunkNode.getAttribute('relative')
+        sizRelative = len(strRelative)
+        strFill = tChunkNode.getAttribute('fill')
+        sizFill = len(strFill)
+        tNodeFile = None
+
+        strAbsFilePath = None
+        # Loop over all children.
+        for tChildNode in tChunkNode.childNodes:
+            # Is this a node element?
+            if tChildNode.nodeType == tChildNode.ELEMENT_NODE:
+                # Is this a 'File' node?
+                if tChildNode.localName == 'File':
+                    tNodeFile = tChildNode
+                    # Get the file name.
+                    strFileName = tNodeFile.getAttribute('name')
+                    if len(strFileName) == 0:
+                        raise Exception('The file node has no '
+                                        'name attribute!')
+
+                    # Search the file in the current working folder and all
+                    # include paths.
+                    strAbsFilePath = self.__find_file(strFileName)
+                    if strAbsFilePath is None:
+                        raise Exception('File %s not found!' % strFileName)
+
+        sizSkip = 0
+        sizSkipParameter = 0
+
+        ucFill = 0xff
+        if sizFill != 0:
+            ucFill = self.__parse_numeric_expression(strFill)
+            if ucFill < 0:
+                raise Exception('Skip does not accept a negative fill '
+                                'value:' % ucFill)
+            if ucFill > 0xff:
+                raise Exception('Skip does not accept a fill value larger '
+                                'than 8 bit:' % ucFill)
+
+        # Get the current offset in bytes.
+        sizOffsetCurrent = atParserState['ulCurrentOffset']
+        # Add the size of the SKIP chunk itself to the current position.
+        if(
+            (self.__strNetxType == 'NETX4000_RELAXED') or
+            (self.__strNetxType == 'NETX4000') or
+            (self.__strNetxType == 'NETX4100')
+        ):
+            sizOffsetCurrent += (1 + 1 + self.__sizHashDw) * 4
+        elif(
+            (self.__strNetxType == 'NETX90_MPW') or
+            (self.__strNetxType == 'NETX90')
+        ):
+            sizOffsetCurrent += (1 + 1 + self.__sizHashDw) * 4
+        else:
+            raise Exception('Continue here!')
+        sizOffsetNew = sizOffsetCurrent
+
+        if(
+            (sizAbsolute == 0) and
+            (sizRelative == 0) and
+            (strAbsFilePath is None)
+        ):
+            raise Exception('The skip node has no "absolute", "relative" '
+                            'or "file" attribute!')
+        elif (sizAbsolute != 0) and (sizRelative != 0):
+            raise Exception('The skip node has an "absolute" and a '
+                            '"relative" attribute!')
+        elif sizAbsolute != 0:
+            # Get the new absolute offset in bytes.
+            sizOffsetNew = self.__parse_numeric_expression(strAbsolute)
+
+        elif sizRelative != 0:
+            # Parse the data.
+            sizSkip = self.__parse_numeric_expression(strRelative)
+            if sizSkip < 0:
+                raise Exception('Skip does not accept a negative value for '
+                                'the relative attribute:' % sizSkip)
+            sizOffsetNew = sizOffsetCurrent + sizSkip
+
+        elif strAbsFilePath is not None:
+            # No "absolute" or "relative" attribute provided. Use the length
+            # of the file as a relative skip.
+            sizSkip = os.path.getsize(strAbsFilePath)
+            sizOffsetNew = sizOffsetCurrent + sizSkip
+
+        else:
+            raise Exception('Internal error!')
+
+        if sizOffsetNew < sizOffsetCurrent:
+            raise Exception('Skip tries to set the offset back from %d '
+                            'to %d.' % (sizOffsetCurrent, sizOffsetNew))
+
+        if self.__strNetxType == 'NETX90_MPW':
+            # The netX90 MPW ROM has a bug in the ROM code.
+            # The SKIP chunk for SQI flash forwards the offset by the
+            # argument - 1.
+            if self.__strDevice == 'SQIROM':
+                sizSkip = (sizOffsetNew - sizOffsetCurrent) / 4
+                sizSkipParameter = (
+                    sizOffsetNew - sizOffsetCurrent + 1 - self.__sizHashDw
+                )
+            else:
+                sizSkip = (sizOffsetNew - sizOffsetCurrent) / 4
+                sizSkipParameter = sizSkip
+
+        elif self.__strNetxType == 'NETX4000_RELAXED':
+            # The netX4000 relaxed ROM has a bug in the ROM code.
+            # The SKIP chunk forwards the offset by the argument - 1.
+
+            # The netX4000 has a lot of XIP areas including SQIROM, SRAM
+            # and NAND. Fortunately booting from parallel NOR flash and
+            # NAND is unusual. The NAND booter has no ECC support and the
+            # parallel NOR flashes are quite unusual in the netX4000 area.
+            # That's why we can safely default to SQIROM here and ignore
+            # the rest.
+            sizSkip = (sizOffsetNew - sizOffsetCurrent) / 4
+            sizSkipParameter = (
+                sizOffsetNew - sizOffsetCurrent + 1 - self.__sizHashDw
+            )
+
+        else:
+            sizSkip = (sizOffsetNew - sizOffsetCurrent) / 4
+            sizSkipParameter = sizSkip
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('S', 'K', 'I', 'P'))
+        aulChunk.append(sizSkipParameter + self.__sizHashDw)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+        return aulChunk, ucFill, sizSkip, strAbsFilePath, tNodeFile
+
+    def __build_chunk_skip(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        aulChunk, ucFill, sizSkip, strAbsFilePath, tNodeFile =\
+            self.__build_chunk_skip_header(tChunkAttributes, atParserState)
+
+        # Append the placeholder for the skip area.
+        if strAbsFilePath is not None:
+            # sizSkip is the numbers of DWORDS to skip. Convert it to bytes.
+            sizSkipBytes = sizSkip * 4
+
+            # Is this an ELF file?
+            strRoot, strExtension = os.path.splitext(strAbsFilePath)
+            if strExtension == '.elf':
+                # Get all data from the ELF file.
+                strFillData, ulLoadAddress = self.__get_data_contents_elf(
+                    tNodeFile,
+                    strAbsFilePath,
+                    False
+                )
+                # Cut down the data to the requested size.
+                if len(strFillData) > sizSkipBytes:
+                    strFillData = strFillData[:sizSkipBytes]
+
+            else:
+                # Read at most sizSkipBytes from the file.
+                tFile = open(strAbsFilePath, 'rb')
+                strFillData = tFile.read(sizSkipBytes)
+                tFile.close()
+
+            # Fill up to the requested size.
+            sizFillData = len(strFillData)
+            if sizFillData < sizSkipBytes:
+                strFillData += chr(ucFill) * (sizSkipBytes - sizFillData)
+
+            # Append the contents to the chunk.
+            aulChunk.fromstring(strFillData)
+
+        else:
+            # Repeat the fill byte in all 4 bytes of a 32 bit value.
+            ulFill = ucFill + 256 * ucFill + 65536 * ucFill + 16777216 * ucFill
+            aulChunk.extend([ulFill] * sizSkip)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+
+    def __build_chunk_skip_incomplete(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        # This chunk is not allowed for images with an end marker.
+        if self.__fHasEndMarker is not False:
+            raise Exception(
+                'A "SkipIncomplete" chunk can not be combined with an end '
+                'marker. Set "has_end" to "False".'
+            )
+        aulChunk, ucFill, sizSkip, strAbsFilePath, tNodeFile =\
+            self.__build_chunk_skip_header(tChunkAttributes, atParserState)
+
+        # Do not add any data here. The image has to end after this chunk.
+        self.__fMoreChunksAllowed = False
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+
+    def __remove_all_whitespace(self, strData):
+        astrWhitespace = [' ', '\t', '\n', '\r']
+        for strWhitespace in astrWhitespace:
+            strData = strData.replace(strWhitespace, '')
+        return strData
+
+    # This function gets a data block from the OpenSSL output.
+    def __openssl_get_data_block(self, strStdout, strID):
+        aucData = array.array('B')
+        tReData = re.compile('^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*:?$')
+        iState = 0
+        for strLine in iter(strStdout.splitlines()):
+            strLine = string.strip(strLine)
+            if iState == 0:
+                if strLine == strID:
+                    iState = 1
+            elif iState == 1:
+                tMatch = tReData.search(strLine)
+                if tMatch is None:
+                    break
+                else:
+                    for strDataHex in string.split(strLine, ':'):
+                        strDataHexStrip = string.strip(strDataHex)
+                        if len(strDataHexStrip) != 0:
+                            strDataBin = binascii.unhexlify(strDataHexStrip)
+                            aucData.append(ord(strDataBin))
+
+        return aucData
+
+    def __openssl_cut_leading_zero(self, aucData):
+        # Does the number start with "00" and is the third digit >= 8?
+        if aucData[0] == 0x00 and aucData[1] >= 0x80:
+            # Remove the leading "00".
+            aucData.pop(0)
+
+    def __openssl_convert_to_little_endian(self, aucData):
+        aucData.reverse()
+
+    def __openssl_uncompress_field(self, aucData):
+        # The data must not be compressed.
+        if aucData[0] != 0x04:
+            raise Exception('The data is compressed. This is not supported yet.')
+        # Cut off the first byte.
+        aucData.pop(0)
+
+    def __openssl_cut_in_half(self, aucData):
+        # Cut the public key in equal parts.
+        sizDataHalf = len(aucData) / 2
+        aucData0 = array.array('B', aucData[:sizDataHalf])
+        aucData1 = array.array('B', aucData[sizDataHalf:])
+        return aucData0, aucData1
+
+    def __keyrom_get_key(self, uiIndex):
+        # This needs the keyrom data.
+        if self.__XmlKeyromContents is None:
+            raise Exception('No Keyrom contents specified!')
+
+        # Find the requested key and hash.
+        tNode = self.__XmlKeyromContents.find('Entry/[@index="%d"]' % uiIndex)
+        if tNode is None:
+            raise Exception('Key %d was not found!' % uiIndex)
+        tNode_key = tNode.find('Key')
+        if tNode_key is None:
+            raise Exception('Key %d has no "Key" child!' % uiIndex)
+        tNode_hash = tNode.find('Hash')
+        if tNode_hash is None:
+            raise Exception('Key %d has no "Hash" child!' % uiIndex)
+
+        strKeyBase64 = tNode_key.text
+
+        # Decode the BASE64 data. Now we have the key pair in DER format.
+        strKeyDER = base64.b64decode(strKeyBase64)
+
+        return strKeyDER
+
+    def __get_cert_mod_exp(self, tNodeParent, strKeyDER, fIsPublicKey):
+        # Extract all information from the key.
+        astrCmd = [
+            self.__cfg_openssl,
+            'pkey',
+            '-inform',
+            'DER',
+            '-text',
+            '-noout'
+        ]
+        if fIsPublicKey is True:
+            astrCmd.append('-pubin')
+        tProcess = subprocess.Popen(
+            astrCmd,
+            stdin=subprocess.PIPE,
+            stdout=subprocess.PIPE
+        )
+        (strStdout, strStdErr) = tProcess.communicate(strKeyDER)
+        if tProcess.returncode != 0:
+            raise Exception('OpenSSL failed with return code %d.' %
+                            tProcess.returncode)
+
+        # Try to guess if this is an RSA or ECC key.
+        # The text dump of an RSA key has " modulus:", while an ECC key has
+        # "priv:".
+        iKeyTyp_1ECC_2RSA = None
+        atAttr = None
+        if string.find(strStdout, 'modulus:') != -1:
+            # Looks like this is an RSA key.
+            iKeyTyp_1ECC_2RSA = 2
+
+            strMatchExponent = 'publicExponent:'
+            strMatchModulus = 'modulus:'
+            if fIsPublicKey is True:
+                strMatchExponent = 'Exponent:'
+                strMatchModulus = 'Modulus:'
+
+            # Extract the public exponent.
+            tReExp = re.compile(
+                '^%s\s+(\d+)\s+\(0x([0-9a-fA-F]+)\)$' % strMatchExponent,
+                re.MULTILINE
+            )
+            tMatch = tReExp.search(strStdout)
+            if tMatch is None:
+                raise Exception('Can not find public exponent!')
+            ulExp = int(tMatch.group(1))
+            ulExpHex = int(tMatch.group(2), 16)
+            if ulExp != ulExpHex:
+                raise Exception('Decimal version differs from hex version!')
+            if (ulExp < 0) or (ulExp > 0xffffff):
+                raise Exception('The exponent exceeds the allowed range of a '
+                                '24bit unsigned integer!')
+            strData = (
+                chr(ulExp & 0xff) +
+                chr((ulExp >> 8) & 0xff) +
+                chr((ulExp >> 16) & 0xff)
+            )
+            aucExp = array.array('B', strData)
+
+            # Extract the modulus "N".
+            aucMod = self.__openssl_get_data_block(strStdout, strMatchModulus)
+            self.__openssl_cut_leading_zero(aucMod)
+            self.__openssl_convert_to_little_endian(aucMod)
+
+            __atKnownRsaSizes = {
+                0: {'mod': 256, 'exp': 3, 'rsa': 2048},
+                1: {'mod': 384, 'exp': 3, 'rsa': 3072},
+                2: {'mod': 512, 'exp': 3, 'rsa': 4096}
+            }
+
+            sizMod = len(aucMod)
+            sizExp = len(aucExp)
+            uiId = None
+            for uiElementId, atAttr in __atKnownRsaSizes.iteritems():
+                if (sizMod == atAttr['mod']) and (sizExp == atAttr['exp']):
+                    # Found the RSA type.
+                    if(
+                        (self.__strNetxType == 'NETX90_MPW') or
+                        (self.__strNetxType == 'NETX90')
+                    ):
+                        uiId = uiElementId + 1
+                    else:
+                        uiId = uiElementId
+                    break
+
+            if uiId is None:
+                strErr = (
+                    'The modulo has a size of %d bytes. '
+                    'The public exponent has a size of %d bytes.\n'
+                    'These values can not be mapped to a RSA bit size. '
+                    'Known sizes are:\n' % (
+                        sizMod,
+                        sizExp
+                    )
+                )
+                for uiElementId, atAttr in __atKnownRsaSizes.iteritems():
+                    strErr += (
+                        '  RSA%d: %d bytes modulo, %d bytes public exponent\n' %
+                        (atAttr['rsa'], atAttr['mod'], atAttr['exp'])
+                    )
+                raise Exception(strErr)
+
+            atAttr = {
+                'id': uiId,
+                'mod': aucMod,
+                'exp': aucExp
+            }
+
+        elif string.find(strStdout, 'priv:') != -1:
+            # Looks like this is an ECC key.
+            iKeyTyp_1ECC_2RSA = 1
+
+            aucPriv = self.__openssl_get_data_block(strStdout, 'priv:')
+            self.__openssl_cut_leading_zero(aucPriv)
+            self.__openssl_convert_to_little_endian(aucPriv)
+
+            aucPub = self.__openssl_get_data_block(strStdout, 'pub:')
+            self.__openssl_uncompress_field(aucPub)
+            aucPubX, aucPubY = self.__openssl_cut_in_half(aucPub)
+            self.__openssl_convert_to_little_endian(aucPubX)
+            self.__openssl_convert_to_little_endian(aucPubY)
+
+            aucPrime = self.__openssl_get_data_block(strStdout, 'Prime:')
+            self.__openssl_cut_leading_zero(aucPrime)
+            self.__openssl_convert_to_little_endian(aucPrime)
+
+            aucA = self.__openssl_get_data_block(strStdout, 'A:')
+            self.__openssl_cut_leading_zero(aucA)
+            self.__openssl_convert_to_little_endian(aucA)
+
+            aucB = self.__openssl_get_data_block(strStdout, 'B:')
+            self.__openssl_cut_leading_zero(aucB)
+            self.__openssl_convert_to_little_endian(aucB)
+
+            strData = self.__openssl_get_data_block(strStdout, 'Generator (uncompressed):')
+            aucGen = array.array('B', strData)
+            self.__openssl_uncompress_field(aucGen)
+            aucGenX, aucGenY = self.__openssl_cut_in_half(aucGen)
+            self.__openssl_convert_to_little_endian(aucGenX)
+            self.__openssl_convert_to_little_endian(aucGenY)
+
+            aucOrder = self.__openssl_get_data_block(strStdout, 'Order:')
+            self.__openssl_cut_leading_zero(aucOrder)
+            self.__openssl_convert_to_little_endian(aucOrder)
+
+            # Extract the cofactor.
+            tReExp = re.compile('^Cofactor:\s+(\d+)\s+\(0x([0-9a-fA-F]+)\)$', re.MULTILINE)
+            tMatch = tReExp.search(strStdout)
+            if tMatch is None:
+                raise Exception('Can not find cofactor!')
+            ulCofactor = long(tMatch.group(1))
+            ulCofactorHex = long(tMatch.group(2), 16)
+            if ulCofactor != ulCofactorHex:
+                raise Exception('Decimal version differs from hex version!')
+
+            __atKnownEccSizes = {
+                0: 32,
+                1: 48,
+                2: 64
+            }
+
+            sizD = len(aucPriv)
+            sizQx = len(aucPubX)
+            sizQy = len(aucPubY)
+            sizP = len(aucPrime)
+            sizA = len(aucA)
+            sizB = len(aucB)
+            sizGx = len(aucGenX)
+            sizGy = len(aucGenY)
+            sizN = len(aucOrder)
+            uiId = None
+            for uiElementId, sizNumbers in __atKnownEccSizes.iteritems():
+                if(
+                    (sizNumbers == sizD) and
+                    (sizNumbers == sizQx) and
+                    (sizNumbers == sizQy) and
+                    (sizNumbers == sizP) and
+                    (sizNumbers == sizA) and
+                    (sizNumbers == sizB) and
+                    (sizNumbers == sizGx) and
+                    (sizNumbers == sizGy) and
+                    (sizNumbers == sizN)
+                ):
+                    # Found the ECC type.
+                    if(
+                        (self.__strNetxType == 'NETX90_MPW') or
+                        (self.__strNetxType == 'NETX90')
+                    ):
+                        uiId = uiElementId + 1
+                    else:
+                        uiId = uiElementId
+                    break
+
+            if uiId is None:
+                raise Exception('Invalid ECC key.')
+
+            atAttr = {
+                'id': uiId,
+                'd': aucPriv,
+                'Qx': aucPubX,
+                'Qy': aucPubY,
+                'p': aucPrime,
+                'a': aucA,
+                'b': aucB,
+                'Gx': aucGenX,
+                'Gy': aucGenY,
+                'n': aucOrder,
+                'cof': ulCofactor
+            }
+
+        else:
+            raise Exception('Unknown key format.')
+
+        return iKeyTyp_1ECC_2RSA, atAttr
+
+    def __cert_parse_binding(self, tNodeParent, strName):
+        # The binding is not yet set.
+        strBinding = None
+
+        # Loop over all child nodes.
+        for tNode in tNodeParent.childNodes:
+            if(
+                (tNode.nodeType == tNode.ELEMENT_NODE) and
+                (tNode.localName == strName)
+            ):
+                strBinding = self.__xml_get_all_text(tNode)
+
+        if strBinding is None:
+            raise Exception('No "%s" node found!' % strName)
+
+        strBinding = self.__remove_all_whitespace(strBinding)
+        aucBinding = array.array('B', binascii.unhexlify(strBinding))
+        sizBinding = len(aucBinding)
+
+        # A binding block has a size of...
+        #   64 bytes on the netX4000
+        #   28 bytes on the netX90
+        sizBindingExpected = 28
+        if(
+            (self.__strNetxType == 'NETX4000_RELAXED') or
+            (self.__strNetxType == 'NETX4000') or
+            (self.__strNetxType == 'NETX4100')
+        ):
+            sizBindingExpected = 64
+        elif(
+            (self.__strNetxType == 'NETX90_MPW') or
+            (self.__strNetxType == 'NETX90')
+        ):
+            sizBindingExpected = 28
+
+        if sizBinding != sizBindingExpected:
+            raise Exception('The binding in node "%s" has an invalid size '
+                            'of %d bytes.' % (strName, sizBinding))
+
+        return aucBinding
+
+    def __root_cert_parse_root_key(self, tNodeParent, atData):
+        strKeyDER = None
+        # Get the index.
+        strIdx = tNodeParent.getAttribute('idx')
+        if len(strIdx) != 0:
+            ulIdx = self.__parse_numeric_expression(strIdx)
+
+            # Get the key in DER encoded format.
+            strKeyDER = self.__keyrom_get_key(ulIdx)
+
+        else:
+            # Search for a "File" child node.
+            tFileNode = None
+            for tNode in tNodeParent.childNodes:
+                if(
+                    (tNode.nodeType == tNode.ELEMENT_NODE) and
+                    (tNode.localName == 'File')
+                ):
+                    tFileNode = tNode
+                    break
+            if tFileNode is not None:
+                strFileName = tFileNode.getAttribute('name')
+
+                # Search the file in the current path and all include paths.
+                strAbsName = self.__find_file(strFileName)
+                if strAbsName is None:
+                    raise Exception('Failed to read file "%s": '
+                                    'file not found.' % strFileName)
+
+                # Read the complete key.
+                tFile = open(strAbsName, 'rb')
+                strKeyDER = tFile.read()
+                tFile.close()
+
+        if strKeyDER is None:
+            raise Exception('No "idx" attribute and no child "File" found!')
+
+        iKeyTyp_1ECC_2RSA, atAttr = self.__get_cert_mod_exp(
+            tNodeParent,
+            strKeyDER,
+            False
+        )
+
+        # A root cert is for the netX4000, which only knows RSA.
+        if iKeyTyp_1ECC_2RSA != 2:
+            raise Exception(
+                'Trying to use a non-RSA certificate for a root cert.'
+            )
+
+        atData['id'] = atAttr['id']
+        atData['mod'] = atAttr['mod']
+        atData['exp'] = atAttr['exp']
+        atData['idx'] = ulIdx
+
+    def __cert_get_key_der(self, tNodeParent, atData):
+        strKeyDER = None
+        # Get the index.
+        strIdx = tNodeParent.getAttribute('idx')
+        if len(strIdx) != 0:
+            ulIdx = self.__parse_numeric_expression(strIdx)
+
+            # Get the key in DER encoded format.
+            strKeyDER = self.__keyrom_get_key(ulIdx)
+
+        else:
+            # Search for a "File" child node.
+            tFileNode = None
+            for tNode in tNodeParent.childNodes:
+                if(
+                    (tNode.nodeType == tNode.ELEMENT_NODE) and
+                    (tNode.localName == 'File')
+                ):
+                    tFileNode = tNode
+                    break
+            if tFileNode is not None:
+                strFileName = tFileNode.getAttribute('name')
+
+                # Search the file in the current path and all include paths.
+                strAbsName = self.__find_file(strFileName)
+                if strAbsName is None:
+                    raise Exception('Failed to read file "%s": '
+                                    'file not found.' % strFileName)
+
+                # Read the complete key.
+                tFile = open(strAbsName, 'rb')
+                strKeyDER = tFile.read()
+                tFile.close()
+
+        if strKeyDER is None:
+            raise Exception('No "idx" attribute and no child "File" found!')
+
+        atData['der'] = strKeyDER
+
+    def __root_cert_parse_binding(self, tNodeParent, atData):
+        atData['mask'] = self.__cert_parse_binding(tNodeParent, 'Mask')
+        atData['ref'] = self.__cert_parse_binding(tNodeParent, 'Ref')
+
+    def __root_cert_parse_new_register_values(self, tNodeParent, atData):
+        atValues = array.array('B')
+
+        # Loop over all child nodes.
+        for tNode in tNodeParent.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'Value':
+                    # Get the bit offset and bit size.
+                    strBitOffset = tNode.getAttribute('offset')
+                    if len(strBitOffset) == 0:
+                        raise Exception('No "offset" attribute found!')
+                    ulBitOffset = self.__parse_numeric_expression(
+                        strBitOffset
+                    )
+                    if (ulBitOffset < 0) or (ulBitOffset > 511):
+                        raise Exception('The offset is out of range: %d' %
+                                        ulBitOffset)
+
+                    strBitSize = tNode.getAttribute('size')
+                    if len(strBitSize) == 0:
+                        raise Exception('No "size" attribute found!')
+                    ulBitSize = self.__parse_numeric_expression(strBitSize)
+                    if (ulBitSize < 1) or (ulBitSize > 128):
+                        raise Exception('The size is out of range: %d' %
+                                        ulBitSize)
+                    if (ulBitOffset + ulBitSize) > 512:
+                        raise Exception(
+                            'The area specified by offset %d and size %d '
+                            'exceeds the array.' % (ulBitOffset. ulBitSize)
+                        )
+
+                    # Get the text in this node and parse it as hex data.
+                    strData = self.__xml_get_all_text(tNode)
+                    if strData is None:
+                        raise Exception('No text in node "Value" found!')
+
+                    strData = self.__remove_all_whitespace(strData)
+                    aucData = binascii.unhexlify(strData)
+                    sizData = len(aucData)
+
+                    # The bit size must fit into the data.
+                    sizReqBytes = int(math.ceil(ulBitSize / 8.0))
+                    if sizReqBytes != sizData:
+                        raise Exception(
+                            'The size of the data does not match the '
+                            'requested size in bits.\n'
+                            'Data size: %d bytes\n'
+                            'Requested size: %d bits' % (
+                                sizData,
+                                sizReqBytes
+                            )
+                        )
+
+                    # Combine the offset and size.
+                    ulBnv = ulBitOffset | ((ulBitSize - 1) * 512)
+
+                    # Append all data to the array.
+                    atValues.append(ulBnv & 0xff)
+                    atValues.append((ulBnv >> 8) & 0xff)
+                    atValues.extend(array.array('B', aucData))
+
+                else:
+                    raise Exception('Unexpected node: %s' % tNode.localName)
+
+        if len(atValues) > 255:
+            raise Exception('The new register values are too long!')
+
+        atData['data'] = atValues
+
+    def __root_cert_parse_trusted_path(self, tNodeParent, atData):
+        strKeyDER = None
+        # Get the index.
+        strIdx = tNodeParent.getAttribute('idx')
+        if len(strIdx) != 0:
+            ulIdx = self.__parse_numeric_expression(strIdx)
+
+            # Get the key in DER encoded format.
+            strKeyDER = self.__keyrom_get_key(ulIdx)
+
+        else:
+            # Search for a "File" child node.
+            tFileNode = None
+            for tNode in tNodeParent.childNodes:
+                if(
+                    (tNode.nodeType == tNode.ELEMENT_NODE) and
+                    (tNode.localName == 'File')
+                ):
+                    tFileNode = tNode
+                    break
+            if tFileNode is not None:
+                strFileName = tFileNode.getAttribute('name')
+
+                # Search the file in the current path and all include paths.
+                strAbsName = self.__find_file(strFileName)
+                if strAbsName is None:
+                    raise Exception(
+                        'Failed to read file "%s": file not found.' %
+                        strFileName
+                    )
+
+                # Read the complete key.
+                tFile = open(strAbsName, 'rb')
+                strKeyDER = tFile.read()
+                tFile.close()
+
+        if strKeyDER is None:
+            raise Exception('No "idx" attribute and no child "File" found!')
+
+        iKeyTyp_1ECC_2RSA, atAttr = self.__get_cert_mod_exp(
+            tNodeParent,
+            strKeyDER,
+            True
+        )
+
+        # A root cert is for the netX4000, which only knows RSA.
+        if iKeyTyp_1ECC_2RSA != 2:
+            raise Exception(
+                'Trying to use a non-RSA certificate for a root cert.'
+            )
+
+        aucMask = self.__cert_parse_binding(tNodeParent, 'Mask')
+
+        atData['mask'] = aucMask
+        atData['id'] = atAttr['id']
+        atData['mod'] = atAttr['mod']
+        atData['exp'] = atAttr['exp']
+
+    def __root_cert_parse_user_content(self, tNodeParent, atData):
+        atValues = array.array('B')
+
+        # Loop over all child nodes.
+        for tNode in tNodeParent.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'Text':
+                    strData = self.__xml_get_all_text(tNode)
+                    atValues.extend(array.array('B', strData))
+                elif tNode.localName == 'Hex':
+                    strData = self.__xml_get_all_text(tNode)
+                    strData = binascii.unhexlify(
+                        self.__remove_all_whitespace(strData)
+                    )
+                    atValues.extend(array.array('B', strData))
+                else:
+                    raise Exception('Unexpected node: %s' % tNode.localName)
+
+        atData['data'] = atValues
+
+    def __get_chunk_from_file(self, strFile):
+        # Read the file.
+        tFile = open(strFile, 'rb')
+        strData = tFile.read()
+        tFile.close()
+
+        # The file size must be a multiple of 32 bit.
+        sizData = len(strData)
+        if (sizData % 4) != 0:
+            raise Exception(
+                'The file "%s" has a size which is no multiple of '
+                '4 bytes (32 bit).' % strFile
+            )
+
+        # Convert the data to an array of 32bit values.
+        aulChunk = array.array('I')
+        aulChunk.fromstring(strData)
+
+        return aulChunk
+
+    def __build_chunk_root_cert(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        aulChunk = None
+        tFileNode = None
+        for tNode in tChunkNode.childNodes:
+            if(
+                (tNode.nodeType == tNode.ELEMENT_NODE) and
+                (tNode.localName == 'File')
+            ):
+                tFileNode = tNode
+                break
+        if tFileNode is not None:
+            strFileName = tFileNode.getAttribute('name')
+
+            # Search the file in the current path and all include paths.
+            strAbsName = self.__find_file(strFileName)
+            if strAbsName is None:
+                raise Exception('Failed to read file "%s": file not found.' %
+                                strFileName)
+
+            aulChunk = self.__get_chunk_from_file(strAbsName)
+
+        else:
+            # Generate an array with default values where possible.
+            __atRootCert = {
+                # The RootPublicKey must be set by the user.
+                'RootPublicKey': {
+                    'id': None,
+                    'mod': None,
+                    'exp': None,
+                    'idx': None
+                },
+
+                # The Binding must be set by the user.
+                'Binding': {
+                    'mask': None,
+                    'ref': None
+                },
+
+                # The new register values are empty by default.
+                'NewRegisterValues': {
+                    'data': ''
+                },
+
+                # The TrustedPathLicense must be set by the user.
+                'TrustedPathLicense': {
+                    'mask': None,
+                    'id': None,
+                    'mod': None,
+                    'exp': None,
+                },
+
+                # The TrustedPathCr7Sw must be set by the user.
+                'TrustedPathCr7Sw': {
+                    'mask': None,
+                    'id': None,
+                    'mod': None,
+                    'exp': None,
+                },
+
+                # The TrustedPathCa9Sw must be set by the user.
+                'TrustedPathCa9Sw': {
+                    'mask': None,
+                    'id': None,
+                    'mod': None,
+                    'exp': None,
+                },
+
+                # The user content is empty by default.
+                'UserContent': {
+                    'data': ''
+                }
+            }
+
+            # Loop over all children.
+            for tNode in tChunkNode.childNodes:
+                if tNode.nodeType == tNode.ELEMENT_NODE:
+                    if tNode.localName == 'RootPublicKey':
+                        self.__root_cert_parse_root_key(
+                            tNode,
+                            __atRootCert['RootPublicKey'])
+                    elif tNode.localName == 'Binding':
+                        self.__root_cert_parse_binding(
+                            tNode,
+                            __atRootCert['Binding']
+                        )
+                    elif tNode.localName == 'NewRegisterValues':
+                        self.__root_cert_parse_new_register_values(
+                            tNode,
+                            __atRootCert['NewRegisterValues']
+                        )
+                    elif tNode.localName == 'TrustedPathLicense':
+                        self.__root_cert_parse_trusted_path(
+                            tNode,
+                            __atRootCert['TrustedPathLicense']
+                        )
+                    elif tNode.localName == 'TrustedPathCr7Sw':
+                        self.__root_cert_parse_trusted_path(
+                            tNode,
+                            __atRootCert['TrustedPathCr7Sw']
+                        )
+                    elif tNode.localName == 'TrustedPathCa9Sw':
+                        self.__root_cert_parse_trusted_path(
+                            tNode,
+                            __atRootCert['TrustedPathCa9Sw']
+                        )
+                    elif tNode.localName == 'UserContent':
+                        self.__root_cert_parse_user_content(
+                            tNode,
+                            __atRootCert['UserContent']
+                        )
+                    else:
+                        raise Exception('Unexpected node: %s' %
+                                        tNode.localName)
+
+            # Check if all required data was set.
+            astrErr = []
+            if __atRootCert['RootPublicKey']['id'] is None:
+                astrErr.append('No "id" set in the RootPublicKey.')
+            if __atRootCert['RootPublicKey']['mod'] is None:
+                astrErr.append('No "mod" set in the RootPublicKey.')
+            if __atRootCert['RootPublicKey']['exp'] is None:
+                astrErr.append('No "exp" set in the RootPublicKey.')
+            if __atRootCert['RootPublicKey']['idx'] is None:
+                astrErr.append('No "idx" set in the RootPublicKey.')
+            if __atRootCert['Binding']['mask'] is None:
+                astrErr.append('No "mask" set in the Binding.')
+            if __atRootCert['Binding']['ref'] is None:
+                astrErr.append('No "ref" set in the Binding.')
+            if __atRootCert['TrustedPathLicense']['mask'] is None:
+                astrErr.append('No "mask" set in the TrustedPathLicense.')
+            if __atRootCert['TrustedPathLicense']['id'] is None:
+                astrErr.append('No "id" set in the TrustedPathLicense.')
+            if __atRootCert['TrustedPathLicense']['mod'] is None:
+                astrErr.append('No "mod" set in the TrustedPathLicense.')
+            if __atRootCert['TrustedPathLicense']['exp'] is None:
+                astrErr.append('No "exp" set in the TrustedPathLicense.')
+            if __atRootCert['TrustedPathCr7Sw']['mask'] is None:
+                astrErr.append('No "mask" set in the TrustedPathCr7Sw.')
+            if __atRootCert['TrustedPathCr7Sw']['id'] is None:
+                astrErr.append('No "id" set in the TrustedPathCr7Sw.')
+            if __atRootCert['TrustedPathCr7Sw']['mod'] is None:
+                astrErr.append('No "mod" set in the TrustedPathCr7Sw.')
+            if __atRootCert['TrustedPathCr7Sw']['exp'] is None:
+                astrErr.append('No "exp" set in the TrustedPathCr7Sw.')
+            if __atRootCert['TrustedPathCa9Sw']['mask'] is None:
+                astrErr.append('No "mask" set in the TrustedPathCa9Sw.')
+            if __atRootCert['TrustedPathCa9Sw']['id'] is None:
+                astrErr.append('No "id" set in the TrustedPathCa9Sw.')
+            if __atRootCert['TrustedPathCa9Sw']['mod'] is None:
+                astrErr.append('No "mod" set in the TrustedPathCa9Sw.')
+            if __atRootCert['TrustedPathCa9Sw']['exp'] is None:
+                astrErr.append('No "exp" set in the TrustedPathCa9Sw.')
+            if len(astrErr) != 0:
+                raise Exception('\n'.join(astrErr))
+
+            # Combine all data to the chunk.
+            atData = array.array('B')
+
+            atData.append(__atRootCert['RootPublicKey']['id'])
+            atData.extend(__atRootCert['RootPublicKey']['mod'])
+            atData.extend(__atRootCert['RootPublicKey']['exp'])
+            atData.append((__atRootCert['RootPublicKey']['idx']) & 0xff)
+            atData.append(
+                ((__atRootCert['RootPublicKey']['idx']) >> 8) & 0xff
+            )
+
+            atData.extend(__atRootCert['Binding']['mask'])
+            atData.extend(__atRootCert['Binding']['ref'])
+
+            sizData = len(__atRootCert['NewRegisterValues']['data'])
+            atData.append(sizData)
+            atData.extend(__atRootCert['NewRegisterValues']['data'])
+
+            atData.extend(__atRootCert['TrustedPathLicense']['mask'])
+            atData.append(__atRootCert['TrustedPathLicense']['id'])
+            atData.extend(__atRootCert['TrustedPathLicense']['mod'])
+            atData.extend(__atRootCert['TrustedPathLicense']['exp'])
+
+            atData.extend(__atRootCert['TrustedPathCr7Sw']['mask'])
+            atData.append(__atRootCert['TrustedPathCr7Sw']['id'])
+            atData.extend(__atRootCert['TrustedPathCr7Sw']['mod'])
+            atData.extend(__atRootCert['TrustedPathCr7Sw']['exp'])
+
+            atData.extend(__atRootCert['TrustedPathCa9Sw']['mask'])
+            atData.append(__atRootCert['TrustedPathCa9Sw']['id'])
+            atData.extend(__atRootCert['TrustedPathCa9Sw']['mod'])
+            atData.extend(__atRootCert['TrustedPathCa9Sw']['exp'])
+
+            sizData = len(__atRootCert['UserContent']['data'])
+            atData.append(sizData & 0xff)
+            atData.append((sizData >> 8) & 0xff)
+            atData.append((sizData >> 16) & 0xff)
+            atData.append((sizData >> 32) & 0xff)
+            atData.extend(__atRootCert['UserContent']['data'])
+
+            # Get the key in DER encoded format.
+            strKeyDER = self.__keyrom_get_key(
+                __atRootCert['RootPublicKey']['idx']
+            )
+
+            # Create a temporary file for the keypair.
+            iFile, strPathKeypair = tempfile.mkstemp(
+                suffix='der',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Create a temporary file for the data to sign.
+            iFile, strPathSignatureInputData = tempfile.mkstemp(
+                suffix='bin',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Write the DER key to the temporary file.
+            tFile = open(strPathKeypair, 'wt')
+            tFile.write(strKeyDER)
+            tFile.close()
+
+            # Write the data to sign to the temporary file.
+            tFile = open(strPathSignatureInputData, 'wb')
+            tFile.write(atData.tostring())
+            tFile.close()
+
+            astrCmd = [
+                self.__cfg_openssl,
+                'dgst',
+                '-sign', strPathKeypair,
+                '-keyform', 'DER',
+                '-sigopt', 'rsa_padding_mode:pss',
+                '-sigopt', 'rsa_pss_saltlen:-1',
+                '-sha384'
+            ]
+            astrCmd.extend(self.__cfg_openssloptions)
+            astrCmd.append(strPathSignatureInputData)
+            strSignature = subprocess.check_output(astrCmd)
+
+            # Remove the temp files.
+            os.remove(strPathKeypair)
+            os.remove(strPathSignatureInputData)
+
+            # Append the signature to the chunk.
+            aulSignature = array.array('B', strSignature)
+            atData.extend(aulSignature)
+
+            # Pad the data to a multiple of dwords.
+            strData = atData.tostring()
+            strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+            strChunk = strData + strPadding
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            py3_array_frombytes(aulData, strChunk)
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('R', 'C', 'R', 'T'))
+            aulChunk.append(len(aulData))
+            aulChunk.extend(aulData)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_license_cert(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        aulChunk = None
+        tFileNode = None
+        for tNode in tChunkNode.childNodes:
+            if(
+                (tNode.nodeType == tNode.ELEMENT_NODE) and
+                (tNode.localName == 'File')
+            ):
+                tFileNode = tNode
+                break
+        if tFileNode is not None:
+            strFileName = tFileNode.getAttribute('name')
+
+            # Search the file in the current path and all include paths.
+            strAbsName = self.__find_file(strFileName)
+            if strAbsName is None:
+                raise Exception('Failed to read file "%s": file not found.' %
+                                strFileName)
+
+            aulChunk = self.__get_chunk_from_file(strAbsName)
+
+        else:
+            # Generate an array with default values where possible.
+            __atCert = {
+                # The key index must be set by the user.
+                'Key': {
+                    'der': None
+                },
+
+                # The Binding must be set by the user.
+                'Binding': {
+                    'mask': None,
+                    'ref': None
+                },
+
+                # The new register values are empty by default.
+                'NewRegisterValues': {
+                    'data': ''
+                },
+
+                # The user content is empty by default.
+                'UserContent': {
+                    'data': ''
+                }
+            }
+
+            # Loop over all children.
+            for tNode in tChunkNode.childNodes:
+                if tNode.nodeType == tNode.ELEMENT_NODE:
+                    if tNode.localName == 'Key':
+                        self.__cert_get_key_der(tNode, __atCert['Key'])
+                    elif tNode.localName == 'Binding':
+                        self.__root_cert_parse_binding(tNode,
+                                                       __atCert['Binding'])
+                    elif tNode.localName == 'NewRegisterValues':
+                        self.__root_cert_parse_new_register_values(
+                            tNode,
+                            __atCert['NewRegisterValues']
+                        )
+                    elif tNode.localName == 'UserContent':
+                        self.__root_cert_parse_user_content(
+                            tNode,
+                            __atCert['UserContent']
+                        )
+                    else:
+                        raise Exception(
+                            'Unexpected node: %s' % tNode.localName
+                        )
+
+            # Check if all required data was set.
+            astrErr = []
+            if __atCert['Key']['der'] is None:
+                astrErr.append('No key set in the LicenseCert.')
+            if __atCert['Binding']['mask'] is None:
+                astrErr.append('No "mask" set in the Binding.')
+            if __atCert['Binding']['ref'] is None:
+                astrErr.append('No "ref" set in the Binding.')
+            if len(astrErr) != 0:
+                raise Exception('\n'.join(astrErr))
+
+            # Combine all data to the chunk.
+            atData = array.array('B')
+
+            atData.extend(__atCert['Binding']['mask'])
+            atData.extend(__atCert['Binding']['ref'])
+
+            sizData = len(__atCert['NewRegisterValues']['data'])
+            atData.append(sizData)
+            atData.extend(__atCert['NewRegisterValues']['data'])
+
+            sizData = len(__atCert['UserContent']['data'])
+            atData.append(sizData & 0xff)
+            atData.append((sizData >> 8) & 0xff)
+            atData.append((sizData >> 16) & 0xff)
+            atData.append((sizData >> 32) & 0xff)
+            atData.extend(__atCert['UserContent']['data'])
+
+            # Get the key in DER encoded format.
+            strKeyDER = __atCert['Key']['der']
+
+            # Create a temporary file for the keypair.
+            iFile, strPathKeypair = tempfile.mkstemp(
+                suffix='der',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Create a temporary file for the data to sign.
+            iFile, strPathSignatureInputData = tempfile.mkstemp(
+                suffix='bin',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Write the DER key to the temporary file.
+            tFile = open(strPathKeypair, 'wt')
+            tFile.write(strKeyDER)
+            tFile.close()
+
+            # Write the data to sign to the temporary file.
+            tFile = open(strPathSignatureInputData, 'wb')
+            tFile.write(atData.tostring())
+            tFile.close()
+
+            astrCmd = [
+                self.__cfg_openssl,
+                'dgst',
+                '-sign', strPathKeypair,
+                '-keyform', 'DER',
+                '-sigopt', 'rsa_padding_mode:pss',
+                '-sigopt', 'rsa_pss_saltlen:-1',
+                '-sha384'
+            ]
+            astrCmd.extend(self.__cfg_openssloptions)
+            astrCmd.append(strPathSignatureInputData)
+            strSignature = subprocess.check_output(astrCmd)
+
+            # Remove the temp files.
+            os.remove(strPathKeypair)
+            os.remove(strPathSignatureInputData)
+
+            # Append the signature to the chunk.
+            aulSignature = array.array('B', strSignature)
+            atData.extend(aulSignature)
+
+            # Pad the data to a multiple of dwords.
+            strData = atData.tostring()
+            strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+            strChunk = strData + strPadding
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            py3_array_frombytes(aulData, strChunk)
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('L', 'C', 'R', 'T'))
+            aulChunk.append(len(aulData))
+            aulChunk.extend(aulData)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_cr7sw(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        aulChunk = None
+        tFileNode = None
+        for tNode in tChunkNode.childNodes:
+            if(
+                (tNode.nodeType == tNode.ELEMENT_NODE) and
+                (tNode.localName == 'File')
+            ):
+                tFileNode = tNode
+                break
+        if tFileNode is not None:
+            strFileName = tFileNode.getAttribute('name')
+
+            # Search the file in the current path and all include paths.
+            strAbsName = self.__find_file(strFileName)
+            if strAbsName is None:
+                raise Exception(
+                    'Failed to read file "%s": file not found.' % strFileName
+                )
+
+            aulChunk = self.__get_chunk_from_file(strAbsName)
+
+        else:
+            # Generate an array with default values where possible.
+            __atCert = {
+                # The key index must be set by the user.
+                'Key': {
+                    'der': None
+                },
+
+                # The Binding must be set by the user.
+                'Binding': {
+                    'mask': None,
+                    'ref': None
+                },
+
+                # The data must be set by the user.
+                'Data': {
+                    'data': None,
+                    'load_address': None
+                },
+
+                # The registers.
+                'Execute': {
+                    'pfnExecFunction': None,
+                    'ulR0': None,
+                    'ulR1': None,
+                    'ulR2': None,
+                    'ulR3': None
+                },
+
+                # The user content is empty by default.
+                'UserContent': {
+                    'data': ''
+                }
+            }
+
+            # Loop over all children.
+            for tNode in tChunkNode.childNodes:
+                if tNode.nodeType == tNode.ELEMENT_NODE:
+                    if tNode.localName == 'Key':
+                        self.__cert_get_key_der(tNode, __atCert['Key'])
+                    elif tNode.localName == 'Binding':
+                        self.__root_cert_parse_binding(tNode,
+                                                       __atCert['Binding'])
+                    elif tNode.localName == 'Data':
+                        self.__get_data_contents(tNode, __atCert['Data'], True)
+                    elif tNode.localName == 'Execute':
+                        self.__get_execute_data(tNode, __atCert['Execute'])
+                    elif tNode.localName == 'UserContent':
+                        self.__root_cert_parse_user_content(
+                            tNode,
+                            __atCert['UserContent']
+                        )
+                    else:
+                        raise Exception('Unexpected node: %s' %
+                                        tNode.localName)
+
+            # Check if all required data was set.
+            astrErr = []
+            if __atCert['Key']['der'] is None:
+                astrErr.append('No key set in the CR7Software.')
+            if __atCert['Binding']['mask'] is None:
+                astrErr.append('No "mask" set in the Binding.')
+            if __atCert['Binding']['ref'] is None:
+                astrErr.append('No "ref" set in the Binding.')
+            if __atCert['Data']['data'] is None:
+                astrErr.append('No "data" set in the Data.')
+            if __atCert['Data']['load_address'] is None:
+                astrErr.append('No "load_address" set in the Data.')
+            if __atCert['Execute']['pfnExecFunction'] is None:
+                astrErr.append('No "pfnExecFunction" set in the Execute.')
+            if __atCert['Execute']['ulR0'] is None:
+                astrErr.append('No "ulR0" set in the Execute.')
+            if __atCert['Execute']['ulR1'] is None:
+                astrErr.append('No "ulR1" set in the Execute.')
+            if __atCert['Execute']['ulR2'] is None:
+                astrErr.append('No "ulR2" set in the Execute.')
+            if __atCert['Execute']['ulR3'] is None:
+                astrErr.append('No "ulR3" set in the Execute.')
+            if len(astrErr) != 0:
+                raise Exception('\n'.join(astrErr))
+
+            # Combine all data to the chunk.
+            atData = array.array('B')
+
+            atData.extend(__atCert['Binding']['mask'])
+            atData.extend(__atCert['Binding']['ref'])
+
+            self.__append_32bit(atData, len(__atCert['Data']['data']))
+            self.__append_32bit(atData, __atCert['Data']['load_address'])
+            atData.extend(array.array('B', __atCert['Data']['data']))
+
+            self.__append_32bit(atData,
+                                __atCert['Execute']['pfnExecFunction'])
+            self.__append_32bit(atData, __atCert['Execute']['ulR0'])
+            self.__append_32bit(atData, __atCert['Execute']['ulR1'])
+            self.__append_32bit(atData, __atCert['Execute']['ulR2'])
+            self.__append_32bit(atData, __atCert['Execute']['ulR3'])
+
+            self.__append_32bit(atData, len(__atCert['UserContent']['data']))
+            atData.extend(__atCert['UserContent']['data'])
+
+            # Get the key in DER encoded format.
+            strKeyDER = __atCert['Key']['der']
+
+            # Create a temporary file for the keypair.
+            iFile, strPathKeypair = tempfile.mkstemp(
+                suffix='der',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Create a temporary file for the data to sign.
+            iFile, strPathSignatureInputData = tempfile.mkstemp(
+                suffix='bin',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Write the DER key to the temporary file.
+            tFile = open(strPathKeypair, 'wt')
+            tFile.write(strKeyDER)
+            tFile.close()
+
+            # Write the data to sign to the temporary file.
+            tFile = open(strPathSignatureInputData, 'wb')
+            tFile.write(atData.tostring())
+            tFile.close()
+
+            astrCmd = [
+                self.__cfg_openssl,
+                'dgst',
+                '-sign', strPathKeypair,
+                '-keyform', 'DER',
+                '-sigopt', 'rsa_padding_mode:pss',
+                '-sigopt', 'rsa_pss_saltlen:-1',
+                '-sha384'
+            ]
+            astrCmd.extend(self.__cfg_openssloptions)
+            astrCmd.append(strPathSignatureInputData)
+            strSignature = subprocess.check_output(astrCmd)
+
+            # Remove the temp files.
+            os.remove(strPathKeypair)
+            os.remove(strPathSignatureInputData)
+
+            # Append the signature to the chunk.
+            aulSignature = array.array('B', strSignature)
+            atData.extend(aulSignature)
+
+            # Pad the data to a multiple of dwords.
+            strData = atData.tostring()
+            strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+            strChunk = strData + strPadding
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            py3_array_frombytes(aulData, strChunk)
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('R', '7', 'S', 'W'))
+            aulChunk.append(len(aulData))
+            aulChunk.extend(aulData)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_ca9sw(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        aulChunk = None
+        tFileNode = None
+        for tNode in tChunkNode.childNodes:
+            if(
+                (tNode.nodeType == tNode.ELEMENT_NODE) and
+                (tNode.localName == 'File')
+            ):
+                tFileNode = tNode
+                break
+        if tFileNode is not None:
+            strFileName = tFileNode.getAttribute('name')
+
+            # Search the file in the current path and all include paths.
+            strAbsName = self.__find_file(strFileName)
+            if strAbsName is None:
+                raise Exception('Failed to read file "%s": file not found.' %
+                                strFileName)
+
+            aulChunk = self.__get_chunk_from_file(strAbsName)
+
+        else:
+            # Generate an array with default values where possible.
+            __atCert = {
+                # The key index must be set by the user.
+                'Key': {
+                    'der': None
+                },
+
+                # The Binding must be set by the user.
+                'Binding': {
+                    'mask': None,
+                    'ref': None
+                },
+
+                # The data must be set by the user.
+                'Data': {
+                    'data': None,
+                    'load_address': None
+                },
+
+                # The registers.
+                'Execute_Core0': {
+                    'pfnExecFunction': None,
+                    'ulR0': None,
+                    'ulR1': None,
+                    'ulR2': None,
+                    'ulR3': None
+                },
+                'Execute_Core1': {
+                    'pfnExecFunction': None,
+                    'ulR0': None,
+                    'ulR1': None,
+                    'ulR2': None,
+                    'ulR3': None
+                },
+
+                # The user content is empty by default.
+                'UserContent': {
+                    'data': ''
+                }
+            }
+
+            # Loop over all children.
+            for tNode in tChunkNode.childNodes:
+                if tNode.nodeType == tNode.ELEMENT_NODE:
+                    if tNode.localName == 'Key':
+                        self.__cert_get_key_der(tNode, __atCert['Key'])
+                    elif tNode.localName == 'Binding':
+                        self.__root_cert_parse_binding(
+                            tNode,
+                            __atCert['Binding']
+                        )
+                    elif tNode.localName == 'Data':
+                        self.__get_data_contents(tNode, __atCert['Data'], True)
+                    elif tNode.localName == 'Execute':
+                        for tRegistersNode in tNode.childNodes:
+                            if tRegistersNode.nodeType == tNode.ELEMENT_NODE:
+                                if tRegistersNode.localName == 'Core0':
+                                    self.__get_execute_data(
+                                        tRegistersNode,
+                                        __atCert['Execute_Core0']
+                                    )
+                                elif tRegistersNode.localName == 'Core1':
+                                    self.__get_execute_data(
+                                        tRegistersNode,
+                                        __atCert['Execute_Core1']
+                                    )
+                    elif tNode.localName == 'UserContent':
+                        self.__root_cert_parse_user_content(
+                            tNode,
+                            __atCert['UserContent']
+                        )
+                    else:
+                        raise Exception('Unexpected node: %s' %
+                                        tNode.localName)
+
+            # Check if all required data was set.
+            astrErr = []
+            if __atCert['Key']['der'] is None:
+                astrErr.append('No key set in the CA9Software.')
+            if __atCert['Binding']['mask'] is None:
+                astrErr.append('No "mask" set in the Binding.')
+            if __atCert['Binding']['ref'] is None:
+                astrErr.append('No "ref" set in the Binding.')
+            if __atCert['Data']['data'] is None:
+                astrErr.append('No "data" set in the Data.')
+            if __atCert['Data']['load_address'] is None:
+                astrErr.append('No "load_address" set in the Data.')
+            if __atCert['Execute_Core0']['pfnExecFunction'] is None:
+                astrErr.append('No "pfnExecFunction" set in the Execute.')
+            if __atCert['Execute_Core0']['ulR0'] is None:
+                astrErr.append('No "ulR0" set in the Execute.')
+            if __atCert['Execute_Core0']['ulR1'] is None:
+                astrErr.append('No "ulR1" set in the Execute.')
+            if __atCert['Execute_Core0']['ulR2'] is None:
+                astrErr.append('No "ulR2" set in the Execute.')
+            if __atCert['Execute_Core0']['ulR3'] is None:
+                astrErr.append('No "ulR3" set in the Execute.')
+            if __atCert['Execute_Core1']['pfnExecFunction'] is None:
+                astrErr.append('No "pfnExecFunction" set in the Execute.')
+            if __atCert['Execute_Core1']['ulR0'] is None:
+                astrErr.append('No "ulR0" set in the Execute.')
+            if __atCert['Execute_Core1']['ulR1'] is None:
+                astrErr.append('No "ulR1" set in the Execute.')
+            if __atCert['Execute_Core1']['ulR2'] is None:
+                astrErr.append('No "ulR2" set in the Execute.')
+            if __atCert['Execute_Core1']['ulR3'] is None:
+                astrErr.append('No "ulR3" set in the Execute.')
+            if len(astrErr) != 0:
+                raise Exception('\n'.join(astrErr))
+
+            # Combine all data to the chunk.
+            atData = array.array('B')
+
+            atData.extend(__atCert['Binding']['mask'])
+            atData.extend(__atCert['Binding']['ref'])
+
+            self.__append_32bit(atData, len(__atCert['Data']['data']))
+            self.__append_32bit(atData, __atCert['Data']['load_address'])
+            atData.extend(array.array('B', __atCert['Data']['data']))
+
+            self.__append_32bit(atData,
+                                __atCert['Execute_Core0']['pfnExecFunction'])
+            self.__append_32bit(atData, __atCert['Execute_Core0']['ulR0'])
+            self.__append_32bit(atData, __atCert['Execute_Core0']['ulR1'])
+            self.__append_32bit(atData, __atCert['Execute_Core0']['ulR2'])
+            self.__append_32bit(atData, __atCert['Execute_Core0']['ulR3'])
+            self.__append_32bit(atData,
+                                __atCert['Execute_Core1']['pfnExecFunction'])
+            self.__append_32bit(atData, __atCert['Execute_Core1']['ulR0'])
+            self.__append_32bit(atData, __atCert['Execute_Core1']['ulR1'])
+            self.__append_32bit(atData, __atCert['Execute_Core1']['ulR2'])
+            self.__append_32bit(atData, __atCert['Execute_Core1']['ulR3'])
+
+            self.__append_32bit(atData, len(__atCert['UserContent']['data']))
+            atData.extend(__atCert['UserContent']['data'])
+
+            # Get the key in DER encoded format.
+            strKeyDER = __atCert['Key']['der']
+
+            # Create a temporary file for the keypair.
+            iFile, strPathKeypair = tempfile.mkstemp(
+                suffix='der',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Create a temporary file for the data to sign.
+            iFile, strPathSignatureInputData = tempfile.mkstemp(
+                suffix='bin',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Write the DER key to the temporary file.
+            tFile = open(strPathKeypair, 'wt')
+            tFile.write(strKeyDER)
+            tFile.close()
+
+            # Write the data to sign to the temporary file.
+            tFile = open(strPathSignatureInputData, 'wb')
+            tFile.write(atData.tostring())
+            tFile.close()
+
+            astrCmd = [
+                self.__cfg_openssl,
+                'dgst',
+                '-sign', strPathKeypair,
+                '-keyform', 'DER',
+                '-sigopt', 'rsa_padding_mode:pss',
+                '-sigopt', 'rsa_pss_saltlen:-1',
+                '-sha384'
+            ]
+            astrCmd.extend(self.__cfg_openssloptions)
+            astrCmd.append(strPathSignatureInputData)
+            strSignature = subprocess.check_output(astrCmd)
+
+            # Remove the temp files.
+            os.remove(strPathKeypair)
+            os.remove(strPathSignatureInputData)
+
+            # Append the signature to the chunk.
+            aulSignature = array.array('B', strSignature)
+            atData.extend(aulSignature)
+
+            # Pad the data to a multiple of dwords.
+            strData = atData.tostring()
+            strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+            strChunk = strData + strPadding
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            py3_array_frombytes(aulData, strChunk)
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('A', '9', 'S', 'W'))
+            aulChunk.append(len(aulData))
+            aulChunk.extend(aulData)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_memory_device_up(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the device.
+        strDevice = tChunkNode.getAttribute('device')
+
+        # Parse the data.
+        ulDevice = self.__parse_numeric_expression(strDevice)
+        if ulDevice < 0:
+            raise Exception('The device attribute does not accept a '
+                            'negative value:' % ulDevice)
+        if ulDevice > 0xff:
+            raise Exception('The device attribute must not be larger '
+                            'than 0xff:' % ulDevice)
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('M', 'D', 'U', 'P'))
+        aulChunk.append(1 + self.__sizHashDw)
+        aulChunk.append(ulDevice)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __usip_parse_trusted_path(self, tNodeParent, atData):
+        strKeyDER = None
+        # Get the index.
+        strIdx = tNodeParent.getAttribute('idx')
+        if len(strIdx) != 0:
+            ulIdx = self.__parse_numeric_expression(strIdx)
+
+            # Get the key in DER encoded format.
+            strKeyDER = self.__keyrom_get_key(ulIdx)
+
+        else:
+            # Search for a "File" child node.
+            tFileNode = None
+            for tNode in tNodeParent.childNodes:
+                if(
+                    (tNode.nodeType == tNode.ELEMENT_NODE) and
+                    (tNode.localName == 'File')
+                ):
+                    tFileNode = tNode
+                    break
+            if tFileNode is not None:
+                strFileName = tFileNode.getAttribute('name')
+
+                # Search the file in the current path and all include paths.
+                strAbsName = self.__find_file(strFileName)
+                if strAbsName is None:
+                    raise Exception(
+                        'Failed to read file "%s": file not found.' %
+                        strFileName
+                    )
+
+                # Read the complete key.
+                tFile = open(strAbsName, 'rb')
+                strKeyDER = tFile.read()
+                tFile.close()
+
+        if strKeyDER is None:
+            raise Exception('No "idx" attribute and no child "File" found!')
+
+        iKeyTyp_1ECC_2RSA, atAttr = self.__get_cert_mod_exp(
+            tNodeParent,
+            strKeyDER,
+            False
+        )
+
+        atData['iKeyTyp_1ECC_2RSA'] = iKeyTyp_1ECC_2RSA
+        atData['atAttr'] = atAttr
+        atData['der'] = strKeyDER
+
+    def __openssl_ecc_get_signature(self, aucSignature, sizKeyInBytes):
+        # Get the start of the firt element, which is "r".
+        uiLen = aucSignature[1]
+        if uiLen >= 128:
+            uiLen -= 128
+        else:
+            uiLen = 0
+        uiElementStart = 2 + uiLen
+
+        sizR = aucSignature[uiElementStart + 1]
+        aucR = aucSignature[uiElementStart + 2:uiElementStart + 2 + sizR]
+
+        if sizR > sizKeyInBytes + 1:
+            raise Exception('The R field is too big. Expected %d bytes, '
+                            'but got %d.' % (sizKeyInBytes, sizR))
+        elif sizR == sizKeyInBytes + 1:
+            self.__openssl_cut_leading_zero(aucR)
+        elif sizR < sizKeyInBytes:
+            # The signature data is smaller than expected. Pad it with 0x00.
+            aucR.extend([0] * (sizKeyInBytes - sizR))
+        self.__openssl_convert_to_little_endian(aucR)
+
+        # Get the start of the second element, which is "s".
+        uiElementStart = 2 + uiLen + 2 + sizR
+
+        sizS = aucSignature[uiElementStart + 1]
+        aucS = aucSignature[uiElementStart + 2:uiElementStart + 2 + sizS]
+
+        if sizS > sizKeyInBytes + 1:
+            raise Exception('The S field is too big. Expected %d bytes, '
+                            'but got %d.' % (sizKeyInBytes, sizS))
+        elif sizS == sizKeyInBytes + 1:
+            self.__openssl_cut_leading_zero(aucS)
+        elif sizS < sizKeyInBytes:
+            # The signature data is smaller than expected. Pad it with 0x00.
+            aucS.extend([0] * (sizKeyInBytes - sizS))
+        self.__openssl_convert_to_little_endian(aucS)
+
+        # Combine R and S.
+        aucSignature = array.array('B')
+        aucSignature.extend(aucR)
+        aucSignature.extend(aucS)
+
+        return aucSignature
+
+    def __build_chunk_update_secure_info_page(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        aulChunk = None
+
+        # Generate an array with default values where possible.
+        __atCert = {
+            # The target info page defines which page to modify.
+            'TargetInfoPage': None,
+
+            # The RootPublicKey must be set by the user.
+            'Key': {
+                'type': None,
+                'id': None,
+                'mod': None,
+                'exp': None,
+                'der': None
+            },
+            'KeyIndex': 0xff,
+
+            # The Binding must be set by the user.
+            'Binding': {
+                'mask': None,
+                'value': None
+            },
+
+            # The data must be set by the user.
+            'Data': {
+                'data': None
+            }
+        }
+
+        # Loop over all children.
+        for tNode in tChunkNode.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'TargetInfoPage':
+                    atVal = {'CAL': 0, 'COM': 1, 'APP': 2}
+                    strTarget = self.__xml_get_all_text(tNode)
+                    if strTarget in atVal:
+                        uiTarget = atVal[strTarget]
+                    else:
+                        raise Exception(
+                            'Invalid target: "%s". Valid targets: %s' % (
+                                strTarget,
+                                ', '.join(atVal.keys())
+                            )
+                        )
+                    __atCert['TargetInfoPage'] = uiTarget
+
+                elif tNode.localName == 'Key':
+                    self.__usip_parse_trusted_path(tNode, __atCert['Key'])
+
+                elif tNode.localName == 'KeyIndex':
+                    # Get the key index
+                    strIndex = self.__xml_get_all_text(tNode)
+                    if len(strIndex) == 0:
+                        raise Exception('"KeyIndex" has no data!')
+                    ulKeyIndex = self.__parse_numeric_expression(
+                        strIndex
+                    )
+                    if (ulKeyIndex < 0) or (ulKeyIndex > 255):
+                        raise Exception(
+                            'The key index is out of range: %d' %
+                            ulKeyIndex
+                        )
+                    __atCert['KeyIndex'] = ulKeyIndex
+
+                elif tNode.localName == 'Binding':
+                    __atCert['Binding']['value'] = self.__cert_parse_binding(
+                        tNode,
+                        'Value'
+                    )
+                    __atCert['Binding']['mask'] = self.__cert_parse_binding(
+                        tNode,
+                        'Mask'
+                    )
+
+                elif tNode.localName == 'Data':
+                    self.__get_data_contents(tNode, __atCert['Data'], False)
+
+                else:
+                    raise Exception('Unexpected node: %s' %
+                                    tNode.localName)
+
+        # Check if all required data was set.
+        astrErr = []
+        if __atCert['TargetInfoPage'] is None:
+            astrErr.append('No target set in USIP.')
+        if __atCert['Data']['data'] is None:
+            astrErr.append('No "data" set in USIP.')
+        if __atCert['KeyIndex'] == 0xff:
+            if __atCert['Key']['der'] is not None:
+                astrErr.append('The key index is 0xff, '
+                               'but a key set in USIP.')
+            if __atCert['Binding']['mask'] is not None:
+                astrErr.append('The key index is 0xff, '
+                               'but a "mask" set in the Binding.')
+            if __atCert['Binding']['value'] is not None:
+                astrErr.append('The key index is 0xff, '
+                               'but a "value" set in the Binding.')
+        else:
+            if __atCert['Key']['der'] is None:
+                astrErr.append('The key index is not 0xff, '
+                               'but no key set in USIP.')
+            if __atCert['Binding']['mask'] is None:
+                astrErr.append('The key index is not 0xff, '
+                               'but no "mask" set in the Binding.')
+            if __atCert['Binding']['value'] is None:
+                astrErr.append('The key index is not 0xff, '
+                               'but no "value" set in the Binding.')
+        if len(astrErr) != 0:
+            raise Exception('\n'.join(astrErr))
+
+        aucPatchData = array.array('B', __atCert['Data']['data'])
+        sizPatchData = len(aucPatchData)
+
+        # Combine all data to the chunk.
+        atData = array.array('B')
+
+        # Info page select
+        atData.append(__atCert['TargetInfoPage'])
+        # key index
+        atData.append(__atCert['KeyIndex'])
+        # Add the size of the patch data in bytes.
+        atData.extend([sizPatchData & 0xff, (sizPatchData >> 8) & 0xff])
+
+        # Is this a secure chunk.
+        if __atCert['KeyIndex'] == 0xff:
+            # Non-secure.
+
+            # Add the patch data.
+            atData.extend(aucPatchData)
+            # Pad the patch data with 0x00.
+            sizPadding = (4 - (sizPatchData % 4)) & 3
+            atData.extend([0] * sizPadding)
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            aulData.fromstring(atData.tostring())
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('U', 'S', 'I', 'P'))
+            aulChunk.append(len(aulData) + self.__sizHashDw)
+            aulChunk.extend(aulData)
+
+            # Get the hash for the chunk.
+            tHash = hashlib.sha384()
+            tHash.update(py3_array_tobytes(aulChunk))
+            strHash = tHash.digest()
+            aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+            aulChunk.extend(aulHash)
+
+            tChunkAttributes['fIsFinished'] = True
+            tChunkAttributes['atData'] = aulChunk
+            tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+        else:
+            # Secure.
+
+            # Add the binding.
+            atData.extend(__atCert['Binding']['value'])
+            atData.extend(__atCert['Binding']['mask'])
+
+            # Add the padded key.
+            iKeyTyp_1ECC_2RSA = __atCert['Key']['iKeyTyp_1ECC_2RSA']
+            atAttr = __atCert['Key']['atAttr']
+            if iKeyTyp_1ECC_2RSA == 2:
+                # Add the algorithm.
+                atData.append(iKeyTyp_1ECC_2RSA)
+                # Add the strength.
+                atData.append(atAttr['id'])
+                # Add the public modulus N and fill up to 64 bytes.
+                self.__add_array_with_fillup(atData, atAttr['mod'], 512)
+                # Add the exponent E.
+                atData.extend(atAttr['exp'])
+                # Pad the key with 3 bytes.
+                atData.extend([0, 0, 0])
+
+            elif iKeyTyp_1ECC_2RSA == 1:
+                # Add the algorithm.
+                atData.append(iKeyTyp_1ECC_2RSA)
+                # Add the strength.
+                atData.append(atAttr['id'])
+                # Write all fields and fill up to 64 bytes.
+                self.__add_array_with_fillup(atData, atAttr['Qx'], 64)
+                self.__add_array_with_fillup(atData, atAttr['Qy'], 64)
+                self.__add_array_with_fillup(atData, atAttr['a'], 64)
+                self.__add_array_with_fillup(atData, atAttr['b'], 64)
+                self.__add_array_with_fillup(atData, atAttr['p'], 64)
+                self.__add_array_with_fillup(atData, atAttr['Gx'], 64)
+                self.__add_array_with_fillup(atData, atAttr['Gy'], 64)
+                self.__add_array_with_fillup(atData, atAttr['n'], 64)
+                atData.extend([0, 0, 0])
+                # Pad the key with 3 bytes.
+                atData.extend([0, 0, 0])
+
+            # Add the patch data.
+            atData.extend(aucPatchData)
+            # Pad the patch data with 0x00.
+            sizPadding = (4 - (sizPatchData % 4)) & 3
+            atData.extend([0] * sizPadding)
+
+            if iKeyTyp_1ECC_2RSA == 1:
+                sizKeyInDwords = len(atAttr['Qx']) / 4
+                sizSignatureInDwords = 2 * sizKeyInDwords
+            elif iKeyTyp_1ECC_2RSA == 2:
+                sizKeyInDwords = len(atAttr['mod']) / 4
+                sizSignatureInDwords = sizKeyInDwords
+
+            # Convert the padded data to an array.
+            aulData = array.array('I')
+            aulData.fromstring(atData.tostring())
+
+            aulChunk = array.array('I')
+            aulChunk.append(self.__get_tag_id('U', 'S', 'I', 'P'))
+            aulChunk.append(len(aulData) + sizSignatureInDwords)
+            aulChunk.extend(aulData)
+
+            # Get the key in DER encoded format.
+            strKeyDER = __atCert['Key']['der']
+
+            # Create a temporary file for the keypair.
+            iFile, strPathKeypair = tempfile.mkstemp(
+                suffix='der',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Create a temporary file for the data to sign.
+            iFile, strPathSignatureInputData = tempfile.mkstemp(
+                suffix='bin',
+                prefix='tmp_hboot_image',
+                dir=None,
+                text=False
+            )
+            os.close(iFile)
+
+            # Write the DER key to the temporary file.
+            tFile = open(strPathKeypair, 'wt')
+            tFile.write(strKeyDER)
+            tFile.close()
+
+            # Write the data to sign to the temporary file.
+            tFile = open(strPathSignatureInputData, 'wb')
+            tFile.write(py3_array_tobytes(aulChunk))
+            tFile.close()
+
+            if iKeyTyp_1ECC_2RSA == 1:
+                astrCmd = [
+                    self.__cfg_openssl,
+                    'dgst',
+                    '-sign', strPathKeypair,
+                    '-keyform', 'DER',
+                    '-sha384'
+                ]
+                astrCmd.extend(self.__cfg_openssloptions)
+                astrCmd.append(strPathSignatureInputData)
+                strEccSignature = subprocess.check_output(astrCmd)
+                aucEccSignature = array.array('B', strEccSignature)
+
+                # Parse the signature.
+                aucSignature = self.__openssl_ecc_get_signature(aucEccSignature, sizKeyInDwords * 4)
+
+            elif iKeyTyp_1ECC_2RSA == 2:
+                astrCmd = [
+                    self.__cfg_openssl,
+                    'dgst',
+                    '-sign', strPathKeypair,
+                    '-keyform', 'DER',
+                    '-sigopt', 'rsa_padding_mode:pss',
+                    '-sigopt', 'rsa_pss_saltlen:-1',
+                    '-sha384'
+                ]
+                astrCmd.extend(self.__cfg_openssloptions)
+                astrCmd.append(strPathSignatureInputData)
+                strSignatureMirror = subprocess.check_output(astrCmd)
+                aucSignature = array.array('B', strSignatureMirror)
+                # Mirror the signature.
+                aucSignature.reverse()
+
+            # Remove the temp files.
+            os.remove(strPathKeypair)
+            os.remove(strPathSignatureInputData)
+
+            # Append the signature to the chunk.
+            aulChunk.fromstring(aucSignature.tostring())
+
+            tChunkAttributes['fIsFinished'] = True
+            tChunkAttributes['atData'] = aulChunk
+            tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_hash_table(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        # This chunk must be build in multiple passes as it includes the hash
+        # sums of the following chunks.
+        #
+        # In the first pass, a dummy data block is created as a placeholder.
+        # This sets the address to the correct position for the following
+        # chunks.
+        #
+        # In the next passes the hash sum can be collected if the chunks are
+        # finished.
+
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the number of chunks to include in the hash table.
+        ulNumberOfHashes = None
+        strNumberOfHashes = tChunkNode.getAttribute('entries')
+        if len(strNumberOfHashes) != 0:
+            ulNumberOfHashes = int(strNumberOfHashes, 0)
+            if (ulNumberOfHashes < 1) or (ulNumberOfHashes > 8):
+                raise Exception(
+                    'The number of hashes is invalid: %d' % ulNumberOfHashes
+                )
+
+        # Get the required size of the chunk. Default to "None" which means
+        # no required size.
+        ulRequiredSizeInBytes = None
+        strRequiredSizeInBytes = tChunkNode.getAttribute('size')
+        if len(strRequiredSizeInBytes) != 0:
+            ulRequiredSizeInBytes = int(strRequiredSizeInBytes, 0)
+            if ulRequiredSizeInBytes < 1:
+                raise Exception(
+                    'The required size must be positive: %d' %
+                    ulRequiredSizeInBytes
+                )
+            if (ulRequiredSizeInBytes & 3) != 0:
+                raise Exception(
+                    'The required size must be a multiple of 4: %d' %
+                    ulRequiredSizeInBytes
+                )
+            # There should be an upper limit or some idiots will generate
+            # 16MB chunks.
+            if ulRequiredSizeInBytes > 65536:
+                raise Exception(
+                    'The required size must be smaller than 65536: %d' %
+                    ulRequiredSizeInBytes
+                )
+
+        __atData = {
+            'TargetInfoPage': None,
+
+            # The RootPublicKey must be set by the user.
+            'Key': {
+                'type': None,
+                'id': None,
+                'mod': None,
+                'exp': None,
+                'der': None
+            },
+
+            'RootKeyIndex': None,
+
+            # The Binding must be set by the user.
+            'Binding': {
+                'mask': None,
+                'ref': None
+            }
+        }
+
+        # Loop over all children.
+        for tNode in tChunkNode.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'TargetInfoPage':
+                    atVal = {'CAL': 0, 'COM': 1, 'APP': 2}
+                    strTarget = self.__xml_get_all_text(tNode)
+                    if strTarget in atVal:
+                        uiTarget = atVal[strTarget]
+                    else:
+                        raise Exception(
+                            'Invalid target: "%s". Valid targets: %s' % (
+                                strTarget,
+                                ', '.join(atVal.keys())
+                            )
+                        )
+                    __atData['TargetInfoPage'] = uiTarget
+
+                elif tNode.localName == 'Key':
+                    self.__usip_parse_trusted_path(tNode, __atData['Key'])
+
+                elif tNode.localName == 'RootKeyIndex':
+                    # Get the root key index
+                    strIndex = self.__xml_get_all_text(tNode)
+                    if len(strIndex) == 0:
+                        raise Exception('"RootKeyIndex" has no data!')
+                    ulRootKeyIndex = self.__parse_numeric_expression(
+                        strIndex
+                    )
+                    if (ulRootKeyIndex < 0) or (ulRootKeyIndex > 31):
+                        raise Exception(
+                            'The root key index is out of range: %d' %
+                            ulRootKeyIndex
+                        )
+                    __atData['RootKeyIndex'] = ulRootKeyIndex
+
+                elif tNode.localName == 'Binding':
+                    __atData['Binding']['value'] = self.__cert_parse_binding(
+                        tNode,
+                        'Value'
+                    )
+                    __atData['Binding']['mask'] = self.__cert_parse_binding(
+                        tNode,
+                        'Mask'
+                    )
+
+                else:
+                    raise Exception('Unexpected node: %s' %
+                                    tNode.localName)
+
+        # Check if all required data was set.
+        astrErr = []
+        if __atData['TargetInfoPage'] is None:
+            astrErr.append('No target info page set in HTBL.')
+        if __atData['Key']['der'] is None:
+            astrErr.append('No key set in HTBL.')
+        if __atData['RootKeyIndex'] is None:
+            astrErr.append('No root key index set in HTBL.')
+        if __atData['Binding']['mask'] is None:
+            astrErr.append('No "mask" set in the Binding.')
+        if __atData['Binding']['value'] is None:
+            astrErr.append('No "value" set in the Binding.')
+        if len(astrErr) != 0:
+            raise Exception('\n'.join(astrErr))
+
+        # Get the size of the signature.
+        iKeyTyp_1ECC_2RSA = __atData['Key']['iKeyTyp_1ECC_2RSA']
+        atAttr = __atData['Key']['atAttr']
+        if iKeyTyp_1ECC_2RSA == 1:
+            sizKeyInDwords = len(atAttr['Qx']) / 4
+            sizSignatureInDwords = 2 * sizKeyInDwords
+        elif iKeyTyp_1ECC_2RSA == 2:
+            sizKeyInDwords = len(atAttr['mod']) / 4
+            sizSignatureInDwords = sizKeyInDwords
+
+        # The minimum size of the HTBL chunk is...
+        #    4 bytes ID
+        sizChunkMinimumInBytes = 4
+        #    4 bytes length
+        sizChunkMinimumInBytes += 4
+        #    1 byte info page select
+        sizChunkMinimumInBytes += 1
+        #    1 byte root key index
+        sizChunkMinimumInBytes += 1
+        #    1 byte number of hashes "n"
+        sizChunkMinimumInBytes += 1
+        #    1 byte fill data
+        sizChunkMinimumInBytes += 1
+        #   56 bytes binding
+        sizChunkMinimumInBytes += 56
+        #  0 or 520 bytes embedded key
+        if __atData['RootKeyIndex'] < 16:
+            sizChunkMinimumInBytes += 520
+        #   48 * "n" bytes hash table
+        sizChunkMinimumInBytes += ulNumberOfHashes * 48
+        #  "s" bytes for the signature
+        sizChunkMinimumInBytes += sizSignatureInDwords * 4
+
+        if ulRequiredSizeInBytes is None:
+            sizFillUpInDwords = 0
+        else:
+            if sizChunkMinimumInBytes > ulRequiredSizeInBytes:
+                raise Exception('The HashTable size has a minimum size of %d bytes, which exceeds the requested size of %d bytes.' % (sizChunkMinimumInBytes, ulRequiredSizeInBytes))
+
+            sizFillUpInDwords = (ulRequiredSizeInBytes - sizChunkMinimumInBytes) / 4
+        sizChunkMinimumSizeInDwords = sizChunkMinimumInBytes / 4
+
+        uiPass = atParserState['uiPass']
+        if uiPass == 0:
+            # In pass 0 only reserve space.
+            aulChunk = array.array(
+                'I',
+                [0] * (sizChunkMinimumSizeInDwords + sizFillUpInDwords)
+            )
+
+            tChunkAttributes['fIsFinished'] = False
+            tChunkAttributes['atData'] = aulChunk
+            tChunkAttributes['aulHash'] = None
+
+        else:
+            sizAllChunks = len(atAllChunks)
+            sizHtblFirstChunk = uiChunkIndex + 1
+            sizHtblLastChunkPlus1 = sizHtblFirstChunk + ulNumberOfHashes
+
+            # Are enough chunks left?
+            if sizHtblLastChunkPlus1 > sizAllChunks:
+                raise Exception(
+                    'The hash table should include the chunks [%d,%d[ '
+                    'but there are only %d chunks.' % (
+                        sizHtblFirstChunk,
+                        sizHtblLastChunkPlus1,
+                        sizAllChunks
+                    )
+                )
+
+            # This is the list of chunk names which require a hash table
+            # entry. Other chunks are not allowed to prevent confusion.
+            astrAllowedChunks = [
+                'Options',         # OPTS
+                'SpiMacro',        # SPIM
+                'MemoryDeviceUp',  # MDUP
+                'Firewall',        # FRWL
+                'Skip',            # SKIP
+                'SecureCopy',      # SCPY
+                'Text',            # TEXT
+                'XIP',             # This is done with a TEXT chunk.
+                'Data',            # DATA
+                'Register',        # REGI
+                'Next',            # NEXT
+                'Execute'          # EXEC
+            ]
+
+            # Collect hash sums of the next chunks.
+            atHashes = []
+            for uiChunkIndex in range(sizHtblFirstChunk, sizHtblLastChunkPlus1):
+                tAttr = atAllChunks[uiChunkIndex]
+
+                # Is this one of the chunks which needs a hash entry?
+                strChunkName = tAttr['strName']
+                if strChunkName not in astrAllowedChunks:
+                    raise Exception('A "%s" chunk can not be included in a HashTable.' % strChunkName)
+
+                # Is this chunk already finished?
+                if tAttr['fIsFinished'] is not True:
+                    # The chunk is not finished. Try again in the next pass.
+                    break
+                else:
+                    # Add the hash to the list.
+                    atHashes.append(tAttr['aulHash'])
+
+            # Found all hashes?
+            if len(atHashes) == ulNumberOfHashes:
+                # Yes, all hashes found. Now build the chunk.
+
+                # Combine all data for the chunk.
+                aucData = array.array('B')
+
+                # Info page select
+                aucData.append(__atData['TargetInfoPage'])
+                # root key index
+                aucData.append(__atData['RootKeyIndex'])
+                # Add the number of hashes.
+                aucData.append(ulNumberOfHashes)
+                # Add one dummy byte of 0x00.
+                aucData.append(0x00)
+                # Add the binding.
+                aucData.extend(__atData['Binding']['value'])
+                aucData.extend(__atData['Binding']['mask'])
+
+                if __atData['RootKeyIndex'] < 16:
+                    # Add the padded key.
+                    iKeyTyp_1ECC_2RSA = __atData['Key']['iKeyTyp_1ECC_2RSA']
+                    atAttr = __atData['Key']['atAttr']
+                    if iKeyTyp_1ECC_2RSA == 2:
+                        # Add the algorithm.
+                        aucData.append(iKeyTyp_1ECC_2RSA)
+                        # Add the strength.
+                        aucData.append(atAttr['id'])
+                        # Add the public modulus N and fill up to 64 bytes.
+                        self.__add_array_with_fillup(aucData, atAttr['mod'], 512)
+                        # Add the exponent E.
+                        aucData.extend(atAttr['exp'])
+                        # Pad the key with 3 bytes.
+                        aucData.extend([0, 0, 0])
+
+                    elif iKeyTyp_1ECC_2RSA == 1:
+                        # Add the algorithm.
+                        aucData.append(iKeyTyp_1ECC_2RSA)
+                        # Add the strength.
+                        aucData.append(atAttr['id'])
+                        # Write all fields and fill up to 64 bytes.
+                        self.__add_array_with_fillup(aucData, atAttr['Qx'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['Qy'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['a'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['b'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['p'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['Gx'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['Gy'], 64)
+                        self.__add_array_with_fillup(aucData, atAttr['n'], 64)
+                        aucData.extend([0, 0, 0])
+                        # Pad the key with 3 bytes.
+                        aucData.extend([0, 0, 0])
+
+                # Append all hashes.
+                for atHash in atHashes:
+                    aucData.fromstring(atHash.tostring())
+
+                aulChunk = array.array('I')
+                # Add the ID.
+                aulChunk.append(self.__get_tag_id('H', 'T', 'B', 'L'))
+                # The size field does not include the ID and itself.
+                aulChunk.append(sizChunkMinimumSizeInDwords + sizFillUpInDwords - 2)
+                # Add the data part.
+                aulChunk.fromstring(aucData.tostring())
+                # Append the fill-up.
+                aulChunk.extend([0] * sizFillUpInDwords)
+
+                # Get the key in DER encoded format.
+                strKeyDER = __atData['Key']['der']
+
+                # Create a temporary file for the keypair.
+                iFile, strPathKeypair = tempfile.mkstemp(
+                    suffix='der',
+                    prefix='tmp_hboot_image',
+                    dir=None,
+                    text=False
+                )
+                os.close(iFile)
+
+                # Create a temporary file for the data to sign.
+                iFile, strPathSignatureInputData = tempfile.mkstemp(
+                    suffix='bin',
+                    prefix='tmp_hboot_image',
+                    dir=None,
+                    text=False
+                )
+                os.close(iFile)
+
+                # Write the DER key to the temporary file.
+                tFile = open(strPathKeypair, 'wt')
+                tFile.write(strKeyDER)
+                tFile.close()
+
+                # Write the data to sign to the temporary file.
+                tFile = open(strPathSignatureInputData, 'wb')
+                tFile.write(py3_array_tobytes(aulChunk))
+                tFile.close()
+
+                if iKeyTyp_1ECC_2RSA == 1:
+                    astrCmd = [
+                        self.__cfg_openssl,
+                        'dgst',
+                        '-sign', strPathKeypair,
+                        '-keyform', 'DER',
+                        '-sha384'
+                    ]
+                    astrCmd.extend(self.__cfg_openssloptions)
+                    astrCmd.append(strPathSignatureInputData)
+                    strEccSignature = subprocess.check_output(astrCmd)
+                    aucEccSignature = array.array('B', strEccSignature)
+
+                    # Parse the signature.
+                    aucSignature = self.__openssl_ecc_get_signature(aucEccSignature, sizKeyInDwords * 4)
+
+                elif iKeyTyp_1ECC_2RSA == 2:
+                    astrCmd = [
+                        self.__cfg_openssl,
+                        'dgst',
+                        '-sign', strPathKeypair,
+                        '-keyform', 'DER',
+                        '-sigopt', 'rsa_padding_mode:pss',
+                        '-sigopt', 'rsa_pss_saltlen:-1',
+                        '-sha384'
+                    ]
+                    astrCmd.extend(self.__cfg_openssloptions)
+                    astrCmd.append(strPathSignatureInputData)
+                    strSignatureMirror = subprocess.check_output(astrCmd)
+                    aucSignature = array.array('B', strSignatureMirror)
+                    # Mirror the signature.
+                    aucSignature.reverse()
+
+                # Remove the temp files.
+                os.remove(strPathKeypair)
+                os.remove(strPathSignatureInputData)
+
+                # Append the signature to the chunk.
+                aulChunk.fromstring(aucSignature.tostring())
+
+                tChunkAttributes['fIsFinished'] = True
+                tChunkAttributes['atData'] = aulChunk
+                tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_next(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        ulDevice = None
+        ulOffsetInBytes = None
+
+        # Loop over all children.
+        for tNode in tChunkNode.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'Device':
+                    strDevice = self.__xml_get_all_text(tNode)
+                    if len(strDevice) == 0:
+                        raise Exception(
+                            'The Next node has no "Device" child.'
+                        )
+
+                    ulDevice = self.__parse_numeric_expression(
+                        strDevice
+                    )
+
+                elif tNode.localName == 'Offset':
+                    strOffset = self.__xml_get_all_text(tNode)
+                    if len(strOffset) == 0:
+                        raise Exception(
+                            'The Next node has no "Offset" child.'
+                        )
+
+                    ulOffsetInBytes = self.__parse_numeric_expression(
+                        strOffset
+                    )
+
+        # Check if all required data was set.
+        astrErr = []
+        if ulDevice is None:
+            astrErr.append('No device set in NEXT.')
+        if ulOffsetInBytes is None:
+            astrErr.append('No offset set in NEXT.')
+        if len(astrErr) != 0:
+            raise Exception('\n'.join(astrErr))
+
+        # The offset must be a multiple of DWORDs.
+        if (ulOffsetInBytes % 4) != 0:
+            raise Exception(
+                'The offset %d is no multiple of DWORDS.' % ulOffsetInBytes
+            )
+
+        # Convert the offset in bytes to an offset in DWORDs.
+        ulOffsetInDwords = ulOffsetInBytes / 4
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('N', 'E', 'X', 'T'))
+        aulChunk.append(2 + self.__sizHashDw)
+        aulChunk.append(ulDevice)
+        aulChunk.append(ulOffsetInDwords)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = None
+
+    def __build_chunk_daxz(self, tChunkAttributes, atParserState, uiChunkIndex, atAllChunks):
+        tChunkNode = tChunkAttributes['tNode']
+
+        # Get the working address.
+        strWorkingAddress = tChunkNode.getAttribute('working_address')
+        if len(strWorkingAddress) == 0:
+            raise Exception('The Concat node has no '
+                            'address attribute!')
+
+        pulWorkingAddress = self.__parse_numeric_expression(strWorkingAddress)
+
+        # Get the data block.
+        atData = {}
+        self.__get_data_contents(tChunkNode, atData, True)
+        strData = atData['data']
+        pulLoadAddress = atData['load_address']
+
+        # Pad the data to a multiple of DWORDs.
+        strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
+        strPaddedData = strData + strPadding
+
+        # Convert the padded data to an array.
+        aulData = array.array('I')
+        aulData.fromstring(strPaddedData)
+
+        aulChunk = array.array('I')
+        aulChunk.append(self.__get_tag_id('D', 'A', 'X', 'Z'))
+        aulChunk.append(len(aulData) + 2 + self.__sizHashDw)
+        aulChunk.append(pulWorkingAddress)
+        aulChunk.append(pulLoadAddress)
+        aulChunk.extend(aulData)
+
+        # Get the hash for the chunk.
+        tHash = hashlib.sha384()
+        tHash.update(py3_array_tobytes(aulChunk))
+        strHash = tHash.digest()
+        aulHash = array.array('I', strHash[:self.__sizHashDw * 4])
+        aulChunk.extend(aulHash)
+
+        tChunkAttributes['fIsFinished'] = True
+        tChunkAttributes['atData'] = aulChunk
+        tChunkAttributes['aulHash'] = array.array('I', strHash)
+
+    def __string_to_bool(self, strBool):
+        strBool = string.upper(strBool)
+        if(
+            (strBool == 'TRUE') or
+            (strBool == 'T') or
+            (strBool == 'YES') or
+            (strBool == 'Y') or
+            (strBool == '1')
+        ):
+            fBool = True
+        elif(
+            (strBool == 'FALSE') or
+            (strBool == 'F') or
+            (strBool == 'NO') or
+            (strBool == 'N') or
+            (strBool == '0')
+        ):
+            fBool = False
+        else:
+            fBool = None
+        return fBool
+
+    def __add_chunk(self, atChunks, strName, tNode, pfnParser):
+        tAttr = {
+            'strName': strName,
+            'pfnParser': pfnParser,
+            'fIsFinished': False,
+            'tNode': tNode,
+            'atData': None,
+            'aulHash': None
+        }
+        atChunks.append(tAttr)
+
+    def __collect_chunks(self, tImageNode):
+        atChunks = []
+
+        # Map the chunk name to...
+        #  'fn': a handler function
+        #  'img': a list of image types where this chunk is valid
+        #  'netx': a list of netX types where this chunk is valid
+        atKnownChunks = {
+            'Options': {
+                'fn': self.__build_chunk_options,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Register': {
+                'fn': self.__build_chunk_register,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    # 'NETX4000_RELAXED',
+                    # 'NETX4000',
+                    # 'NETX4100',
+                    # 'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Data': {
+                'fn': self.__build_chunk_data,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Text': {
+                'fn': self.__build_chunk_text,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'XIP': {
+                'fn': self.__build_chunk_xip,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Execute': {
+                'fn': self.__build_chunk_execute,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'ExecuteCA9': {
+                'fn': self.__build_chunk_execute_ca9,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    # 'NETX90_MPW',
+                    # 'NETX90'
+                ]
+            },
+            'SpiMacro': {
+                'fn': self.__build_chunk_spi_macro,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Skip': {
+                'fn': self.__build_chunk_skip,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'SkipIncomplete': {
+                'fn': self.__build_chunk_skip_incomplete,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'RootCert': {
+                'fn': self.__build_chunk_root_cert,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    # 'NETX90_MPW',
+                    # 'NETX90'
+                ]
+            },
+            'LicenseCert': {
+                'fn': self.__build_chunk_license_cert,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    # 'NETX90_MPW',
+                    # 'NETX90'
+                ]
+            },
+            'CR7Software': {
+                'fn': self.__build_chunk_cr7sw,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    # 'NETX90_MPW',
+                    # 'NETX90'
+                ]
+            },
+            'CA9Software': {
+                'fn': self.__build_chunk_ca9sw,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    # 'NETX90_MPW',
+                    # 'NETX90'
+                ]
+            },
+            'MemoryDeviceUp': {
+                'fn': self.__build_chunk_memory_device_up,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    'NETX56',
+                    'NETX4000_RELAXED',
+                    'NETX4000',
+                    'NETX4100',
+                    'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'UpdateSecureInfoPage': {
+                'fn': self.__build_chunk_update_secure_info_page,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    # 'NETX4000_RELAXED',
+                    # 'NETX4000',
+                    # 'NETX4100',
+                    # 'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'HashTable': {
+                'fn': self.__build_chunk_hash_table,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    # 'NETX4000_RELAXED',
+                    # 'NETX4000',
+                    # 'NETX4100',
+                    # 'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'Next': {
+                'fn': self.__build_chunk_next,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    # 'NETX4000_RELAXED',
+                    # 'NETX4000',
+                    # 'NETX4100',
+                    # 'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+            'DaXZ': {
+                'fn': self.__build_chunk_daxz,
+                'img': [
+                    self.__IMAGE_TYPE_REGULAR,
+                    self.__IMAGE_TYPE_ALTERNATIVE,
+                    self.__IMAGE_TYPE_INTRAM,
+                    # self.__IMAGE_TYPE_SECMEM,
+                    # self.__IMAGE_TYPE_COM_INFO_PAGE,
+                    # self.__IMAGE_TYPE_APP_INFO_PAGE
+                ],
+                'netx': [
+                    # 'NETX56',
+                    # 'NETX4000_RELAXED',
+                    # 'NETX4000',
+                    # 'NETX4100',
+                    # 'NETX90_MPW',
+                    'NETX90'
+                ]
+            },
+        }
+
+        # Loop over all nodes, these are the chunks.
+        for tChunkNode in tImageNode.childNodes:
+            if tChunkNode.nodeType == tChunkNode.ELEMENT_NODE:
+                strChunkName = tChunkNode.localName
+                if strChunkName in atKnownChunks:
+                    tAttr = atKnownChunks[strChunkName]
+                    # Is the chunk available for the image type?
+                    if self.__tImageType not in tAttr['img']:
+                        raise Exception(
+                            '%s chunks are not allowed in the current '
+                            'image type.' % strChunkName
+                        )
+                    if self.__strNetxType not in tAttr['netx']:
+                        raise Exception(
+                            '%s chunks are not allowed on %s' %
+                            (
+                                strChunkName,
+                                self.__strNetxType
+                            )
+                        )
+                    self.__add_chunk(
+                        atChunks,
+                        strChunkName,
+                        tChunkNode,
+                        tAttr['fn']
+                    )
+                else:
+                    raise Exception('Unknown chunk ID: %s' % strChunkName)
+
+        return atChunks
+
+    def __parse_chunks(self, atChunks):
+        # Get the initial offset.
+        ulOffsetInitial = self.__ulStartOffset
+        if self.__fHasHeader is True:
+            ulOffsetInitial += 64
+
+        # Create a new state.
+        atState = {
+            'uiPass': 0,
+            'atChunks': [],
+            'ulCurrentOffset': ulOffsetInitial,
+            'fMoreChunksAllowed': True
+        }
+
+        # All operations should be finished in 2 passes.
+        fAllChunksAreFinished = None
+        for uiPass in range(0, 2):
+            # Set the current pass.
+            atState['uiPass'] = uiPass
+
+            atState['ulCurrentOffset'] = ulOffsetInitial
+            atState['fMoreChunksAllowed'] = True
+            fAllChunksAreFinished = True
+
+            # Loop over all chunks.
+            sizChunks = len(atChunks)
+            for uiChunkIndex in range(0, sizChunks):
+                tAttr = atChunks[uiChunkIndex]
+
+                if atState['fMoreChunksAllowed'] is not True:
+                    raise Exception('No more chunks allowed.')
+
+                # Call the parser if the chunk is not finished yet.
+                if tAttr['fIsFinished'] is not True:
+                    # Call the parser.
+                    tAttr['pfnParser'](tAttr, atState, uiChunkIndex, atChunks)
+                    # Update the global finish state.
+                    fAllChunksAreFinished &= tAttr['fIsFinished']
+                    # Update the current position.
+                    if self.__tImageType == self.__IMAGE_TYPE_SECMEM:
+                        sizChunkInBytes = len(tAttr['atData'])
+                    else:
+                        sizChunkInBytes = len(tAttr['atData']) * 4
+                    atState['ulCurrentOffset'] += sizChunkInBytes
+
+            if fAllChunksAreFinished is True:
+                break
+
+        if fAllChunksAreFinished is False:
+            raise Exception('Some chunks are still not finished.')
+
+        # Collect all data from the chunks.
+        for tAttr in atChunks:
+            self.__atChunkData.extend(tAttr['atData'])
+
+    def parse_image(self, tInput):
+        # Parsing an image requires the patch definition.
+        if self.__cPatchDefinitions is None:
+            raise Exception(
+                'A patch definition is required for the "parse_image" '
+                'function, but none was specified!'
+            )
+
+        # Initialize the list of dependencies.
+        self.__astrDependencies = []
+
+        # Read the complete input file as plain text.
+        tFile = open(tInput, 'rt')
+        strFileContents = tFile.read()
+        tFile.close()
+
+        # Replace and convert to XML.
+        tXml = self.__plaintext_to_xml_with_replace(
+            strFileContents,
+            self.__atGlobalDefines,
+            True
+        )
+        tXmlRootNode = tXml.documentElement
+
+        # Preprocess the image.
+        self.__preprocess(tXml)
+
+        # Get the type of the image. Default to "REGULAR".
+        strType = tXmlRootNode.getAttribute('type')
+        if len(strType) != 0:
+            if strType not in self.__astrToImageType:
+                raise Exception('Invalid image type: "%s"' % strType)
+            self.__tImageType = self.__astrToImageType[strType]
+        else:
+            # Set the default type.
+            self.__tImageType = self.__IMAGE_TYPE_REGULAR
+
+        # Alternative images are allowed on netX4000 and netX90.
+        astrNetxWithAlternativeImages = [
+            'NETX4000_RELAXED',
+            'NETX4000',
+            'NETX4100',
+            'NETX90'
+        ]
+        if self.__tImageType == self.__IMAGE_TYPE_ALTERNATIVE:
+            if self.__strNetxType not in astrNetxWithAlternativeImages:
+                raise Exception(
+                    'The image type "ALTERNATIVE" is not allowed for the '
+                    'netX "%s".' % self.__strNetxType
+                )
+
+        # Check if a header should be written to the output file.
+        # SECMEM and info page images never have a header.
+        if(
+            (self.__tImageType == self.__IMAGE_TYPE_SECMEM) or
+            (self.__tImageType == self.__IMAGE_TYPE_COM_INFO_PAGE) or
+            (self.__tImageType == self.__IMAGE_TYPE_APP_INFO_PAGE)
+        ):
+            fHasHeader = False
+        else:
+            fHasHeader = True
+            strBool = tXmlRootNode.getAttribute('has_header')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fHasHeader = fBool
+        self.__fHasHeader = fHasHeader
+
+        # Check if an end marker should be written to the output file.
+        # SECMEM and info page images never have a header.
+        if(
+            (self.__tImageType == self.__IMAGE_TYPE_SECMEM) or
+            (self.__tImageType == self.__IMAGE_TYPE_COM_INFO_PAGE) or
+            (self.__tImageType == self.__IMAGE_TYPE_APP_INFO_PAGE)
+        ):
+            fHasEndMarker = False
+        else:
+            fHasEndMarker = True
+            strBool = tXmlRootNode.getAttribute('has_end')
+            if len(strBool) != 0:
+                fBool = self.__string_to_bool(strBool)
+                if fBool is not None:
+                    fHasEndMarker = fBool
+        self.__fHasEndMarker = fHasEndMarker
+
+        # SECMEM images are byte based, all other images are DWORD based.
+        if self.__tImageType == self.__IMAGE_TYPE_SECMEM:
+            self.__atChunkData = array.array('B')
+        else:
+            self.__atChunkData = array.array('I')
+
+        # Get the hash size.
+        # Default to 12 DWORDS for info page images.
+        # Default to 0 DWORDS for SECMEM images.
+        # Default to 1 DWORD for all other images.
+        if(self.__tImageType == self.__IMAGE_TYPE_SECMEM):
+            uiHashSize = 0
+        elif(
+            (self.__tImageType == self.__IMAGE_TYPE_COM_INFO_PAGE) or
+            (self.__tImageType == self.__IMAGE_TYPE_APP_INFO_PAGE)
+        ):
+            uiHashSize = 12
+        else:
+            strHashSize = tXmlRootNode.getAttribute('hashsize')
+            if len(strHashSize) != 0:
+                uiHashSize = int(strHashSize)
+                if (uiHashSize < 1) or (uiHashSize > 12):
+                    raise Exception('Invalid hash size: %d' % uiHashSize)
+            else:
+                # Set the default hash size.
+                uiHashSize = 1
+        self.__sizHashDw = uiHashSize
+
+        # Get the start offset. Default to 0.
+        ulStartOffset = 0
+        strStartOffset = tXmlRootNode.getAttribute('offset')
+        if len(strStartOffset) != 0:
+            ulStartOffset = int(strStartOffset, 0)
+            if ulStartOffset < 0:
+                raise Exception(
+                    'The start offset is invalid: %d' % ulStartOffset
+                )
+        self.__ulStartOffset = ulStartOffset
+
+        # Get the size and value for a padding. Default to 0 bytes of 0xff.
+        ulPaddingPreSize = 0
+        ucPaddingPreValue = 0xff
+        strPaddingPreSize = tXmlRootNode.getAttribute('padding_pre_size')
+        if len(strPaddingPreSize) != 0:
+            ulPaddingPreSize = int(strPaddingPreSize, 0)
+            if ulPaddingPreSize < 0:
+                raise Exception(
+                    'The padding pre size is invalid: %d' % ulPaddingPreSize
+                )
+        strPaddingPreValue = tXmlRootNode.getAttribute('padding_pre_value')
+        if len(strPaddingPreValue) != 0:
+            ucPaddingPreValue = int(strPaddingPreValue, 0)
+            if (ucPaddingPreValue < 0) or (ucPaddingPreValue > 0xff):
+                raise Exception(
+                    'The padding pre value is invalid: %d' % ucPaddingPreValue
+                )
+        self.__ulPaddingPreSize = ulPaddingPreSize
+        self.__ucPaddingPreValue = ucPaddingPreValue
+
+        # Get the device. Default to "UNSPECIFIED".
+        astrValidDeviceNames = [
+            'UNSPECIFIED',
+            'INTFLASH',
+            'SQIROM',
+            'SQIROM0',
+            'SQIROM1'
+        ]
+        strDevice = tXmlRootNode.getAttribute('device')
+        if len(strDevice) == 0:
+            strDevice = 'UNSPECIFIED'
+        else:
+            # Check the device name.
+            if strDevice not in astrValidDeviceNames:
+                raise Exception(
+                    'Invalid device name specified: "%s". '
+                    'Valid names are %s.' % (
+                        strDevice,
+                        ', '.join(astrValidDeviceNames)
+                    )
+                )
+        self.__strDevice = strDevice
+
+        # The image accepts chunks.
+        # This can change after special chunks like "SkipIncomplete".
+        self.__fMoreChunksAllowed = True
+
+        # Loop over all children.
+        atChunks = []
+        for tImageNode in tXmlRootNode.childNodes:
+            # Is this a node element?
+            if tImageNode.nodeType == tImageNode.ELEMENT_NODE:
+                # Is this a 'Header' node?
+                if tImageNode.localName == 'Header':
+                    if(
+                        (self.__tImageType == self.__IMAGE_TYPE_SECMEM) or
+                        (self.__tImageType == self.__IMAGE_TYPE_COM_INFO_PAGE) or
+                        (self.__tImageType == self.__IMAGE_TYPE_APP_INFO_PAGE)
+                    ):
+                        raise Exception(
+                            'Header overrides are not allowed in '
+                            'this image type.'
+                        )
+                    self.__parse_header_options(tImageNode)
+
+                elif tImageNode.localName == 'Chunks':
+                    atChunks.extend(self.__collect_chunks(tImageNode))
+                else:
+                    raise Exception(
+                        'Unknown element: %s' % tImageNode.localName
+                    )
+
+        self.__parse_chunks(atChunks)
+
+    def __crc7(self, strData):
+        ucCrc = 0
+        for uiByteCnt in range(0, len(strData)):
+            ucByte = ord(strData[uiByteCnt])
+            for uiBitCnt in range(0, 8):
+                ucBit = (ucCrc ^ ucByte) & 0x80
+                ucCrc <<= 1
+                ucByte <<= 1
+                if ucBit != 0:
+                    ucCrc ^= 0x07
+            ucCrc &= 0xff
+
+        return ucCrc
+
+    def write(self, strTargetPath):
+        """ Write all compiled chunks to the file strTargetPath . """
+
+        if self.__tImageType == self.__IMAGE_TYPE_SECMEM:
+            # Collect data for zone 2 and 3.
+            aucZone2 = None
+            aucZone3 = None
+
+            # Get the size of the complete image.
+            uiImageSize = self.__atChunkData.buffer_info()[1]
+
+            # Up to 29 bytes fit into zone 2.
+            if uiImageSize <= 29:
+                aucZone2 = array.array('B')
+                aucZone3 = array.array('B')
+
+                # Set the length.
+                aucZone2.append(uiImageSize)
+
+                # Add the options.
+                aucZone2.extend(self.__atChunkData)
+
+                # Fill up zone2 to 29 bytes.
+                if uiImageSize < 29:
+                    aucZone2.extend([0x00] * (29 - uiImageSize))
+
+                # Set the revision.
+                aucZone2.append(self.__SECMEM_ZONE2_REV1_0)
+
+                # Set the checksum.
+                ucCrc = self.__crc7(aucZone2.tostring())
+                aucZone2.append(ucCrc)
+
+                # Clear zone 3.
+                aucZone3.extend([0] * 32)
+
+            # Zone 2 and 3 together can hold up to 61 bytes.
+            elif uiImageSize <= 61:
+                aucTmp = array.array('B')
+
+                # Set the length.
+                aucTmp.append(uiImageSize)
+
+                # Add the options.
+                aucTmp.extend(self.__atChunkData)
+
+                # Fill up the data to 61 bytes.
+                if uiImageSize < 61:
+                    aucTmp.extend([0x00] * (61 - uiImageSize))
+
+                # Set the revision.
+                aucTmp.append(self.__SECMEM_ZONE2_REV1_0)
+
+                # Get the checksum.
+                ucCrc = self.__crc7(aucTmp.tostring())
+
+                # Get the first 30 bytes as zone2.
+                aucZone2 = aucTmp[0:30]
+
+                # Add the revision.
+                aucZone2.append(self.__SECMEM_ZONE2_REV1_0)
+
+                # Add the checksum.
+                aucZone2.append(ucCrc)
+
+                # Place the rest of the data into zone3.
+                aucZone3 = aucTmp[30:62]
+
+            else:
+                raise Exception(
+                    'The image is too big for a SECMEM. It must be 61 bytes '
+                    'or less, but it has %d bytes.' % uiImageSize
+                )
+
+            # Get a copy of the chunk data.
+            atChunks = array.array('B')
+            atChunks.extend(aucZone2)
+            atChunks.extend(aucZone3)
+
+            # Do not add headers in a SECMEM image.
+            atHeader = array.array('B')
+
+            # Do not add end markers in a SECMEM image.
+            atEndMarker = array.array('B')
+
+        elif(
+            (self.__tImageType == self.__IMAGE_TYPE_COM_INFO_PAGE) or
+            (self.__tImageType == self.__IMAGE_TYPE_APP_INFO_PAGE)
+        ):
+            atChunks = self.__atChunkData
+
+            # The chunk data must have a size of 4048 bytes (1012 DWORDS).
+            sizChunksInDWORDs = len(atChunks)
+            if sizChunksInDWORDs != 1012:
+                raise Exception(
+                    'The info page data without the hash must be 1012 '
+                    'bytes, but it is %d bytes.' % sizChunksInDWORDs
+                )
+
+            # Build the hash for the info page.
+            tHash = hashlib.sha384()
+            tHash.update(py3_array_tobytes(atChunks))
+            strHash = tHash.digest()
+            aulHash = array.array('I', strHash)
+            atChunks.extend(aulHash)
+
+        else:
+            # Get a copy of the chunk data.
+            atChunks = array.array('I', self.__atChunkData)
+
+            # Terminate the chunks with a DWORD of 0.
+            atChunks.append(0x00000000)
+
+            # Generate the standard header.
+            atHeaderStandard = self.__build_standard_header(atChunks)
+
+            # Combine the standard header with the overrides.
+            atHeader = self.__combine_headers(atHeaderStandard)
+
+            # Get a fresh copy of the chunk data.
+            atChunks = array.array('I', self.__atChunkData)
+
+            # Terminate the chunks with a DWORD of 0.
+            atEndMarker = array.array('I', [0x00000000])
+
+        # Write all components to the output file.
+        tFile = open(strTargetPath, 'wb')
+        if self.__ulPaddingPreSize != 0:
+            atPadding = array.array(
+                'B',
+                [self.__ucPaddingPreValue] * self.__ulPaddingPreSize
+            )
+            atPadding.tofile(tFile)
+        if self.__fHasHeader is True:
+            atHeader.tofile(tFile)
+        atChunks.tofile(tFile)
+        if self.__fHasEndMarker is True:
+            atEndMarker.tofile(tFile)
+        tFile.close()
+
+    def dependency_scan(self, strInput):
+        tXml = xml.dom.minidom.parse(strInput)
+
+        # Initialize the list of dependencies.
+        self.__astrDependencies = []
+
+        # Preprocess the image.
+        self.__preprocess(tXml)
+
+        # Scan the complete definition for "File" nodes.
+        atFileNodes = tXml.getElementsByTagName('File')
+        for tNode in atFileNodes:
+            strFileName = tNode.getAttribute('name')
+            if strFileName is not None:
+                if strFileName[0] == '@':
+                    strFileId = strFileName[1:]
+                    if strFileId not in self.__atKnownFiles:
+                        raise Exception(
+                            'Unknown reference to file ID "%s".' % strFileName
+                        )
+                    strFileName = self.__atKnownFiles[strFileId]
+                self.__astrDependencies.append(strFileName)
+
+        return self.__astrDependencies
diff --git a/tools/netx4000/hboot_image_compiler/hboot_image_compiler b/tools/netx4000/hboot_image_compiler/hboot_image_compiler
new file mode 100755
index 0000000000..12c902cb72
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/hboot_image_compiler
@@ -0,0 +1,186 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import argparse
+import os.path
+import re
+
+import hboot_image
+
+
+tParser = argparse.ArgumentParser(usage='usage: hboot_image [options]')
+tParser.add_argument('-n', '--netx-type',
+                     dest='strNetxType',
+                     required=True,
+                     choices=[
+                         'NETX56',
+                         'NETX90',
+                         'NETX90_MPW',
+                         'NETX4000_RELAXED',
+                         'NETX4000',
+                         'NETX4100'
+                     ],
+                     metavar='NETX',
+                     help='Build the image for netx type NETX.')
+tParser.add_argument('-c', '--objcopy',
+                     dest='strObjCopy',
+                     required=False,
+                     default='objcopy',
+                     metavar='FILE',
+                     help='Use FILE as the objcopy tool.')
+tParser.add_argument('-d', '--objdump',
+                     dest='strObjDump',
+                     required=False,
+                     default='objdump',
+                     metavar='FILE',
+                     help='Use FILE as the objdump tool.')
+tParser.add_argument('-k', '--keyrom',
+                     dest='strKeyRomPath',
+                     required=False,
+                     default=None,
+                     metavar='FILE',
+                     help='Read the keyrom data from FILE.')
+tParser.add_argument('-p', '--patch-table',
+                     dest='strPatchTablePath',
+                     required=False,
+                     default=None,
+                     metavar='FILE',
+                     help='Read the patch table from FILE.')
+tParser.add_argument('-r', '--readelf',
+                     dest='strReadElf',
+                     required=False,
+                     default='readelf',
+                     metavar='FILE',
+                     help='Use FILE as the readelf tool.')
+tParser.add_argument('-v', '--verbose',
+                     dest='fVerbose',
+                     required=False,
+                     default=False,
+                     action='store_const', const=True,
+                     help='Be more verbose.')
+tParser.add_argument('-A', '--alias',
+                     dest='astrAliases',
+                     required=False,
+                     action='append',
+                     metavar='ALIAS=FILE',
+                     help='Add an alias in the form ALIAS=FILE.')
+tParser.add_argument('-D', '--define',
+                     dest='astrDefines',
+                     required=False,
+                     action='append',
+                     metavar='NAME=VALUE',
+                     help='Add a define in the form NAME=VALUE.')
+tParser.add_argument('-I', '--include',
+                     dest='astrIncludePaths',
+                     required=False,
+                     action='append',
+                     metavar='PATH',
+                     help='Add PATH to the list of include paths.')
+tParser.add_argument('-S', '--sniplib',
+                     dest='astrSnipLib',
+                     required=False,
+                     action='append',
+                     metavar='PATH',
+                     help='Add PATH to the list of sniplib paths.')
+tParser.add_argument('--openssl-options',
+                     dest='astrOpensslOptions',
+                     required=False,
+                     action='append',
+                     metavar='SSLOPT',
+                     help='Add SSLOPT to the arguments for OpenSSL.')
+tParser.add_argument('strInputFile',
+                     metavar='FILE',
+                     help='Read the HBoot definition from FILE.')
+tParser.add_argument('strOutputFile',
+                     metavar='FILE',
+                     help='Write the HBoot image to FILE.')
+tArgs = tParser.parse_args()
+
+# Set the default for the patch table here.
+atDefaultPatchTables = {
+    'NETX56': 'hboot_netx56_patch_table.xml',
+    'NETX90': 'hboot_netx90_patch_table.xml',
+    'NETX90_MPW': 'hboot_netx90_mpw_patch_table.xml',
+    'NETX4000_RELAXED': 'hboot_netx4000_relaxed_patch_table.xml',
+    'NETX4000': 'hboot_netx4000_patch_table.xml',
+    'NETX4100': 'hboot_netx4000_patch_table.xml'
+}
+if tArgs.strPatchTablePath is None:
+    tArgs.strPatchTablePath = os.path.join(
+        os.path.dirname(os.path.dirname(os.path.realpath(__file__))),
+        atDefaultPatchTables[tArgs.strNetxType]
+    )
+
+# Parse all alias definitions.
+atKnownFiles = {}
+if tArgs.astrAliases is not None:
+    tPattern = re.compile('([a-zA-Z0-9_]+)=(.+)$')
+    for strAliasDefinition in tArgs.astrAliases:
+        tMatch = re.match(tPattern, strAliasDefinition)
+        if tMatch is None:
+            raise Exception(
+                'Invalid alias definition: "%s". '
+                'It must be "ALIAS=FILE" instead.' % strAliasDefinition
+            )
+        strAlias = tMatch.group(1)
+        strFile = tMatch.group(2)
+        if strAlias in atKnownFiles:
+            raise Exception(
+                'Double defined alias "%s". The old value "%s" should be '
+                'overwritten with "%s".' % (
+                    strAlias,
+                    atKnownFiles[strAlias],
+                    strFile
+                )
+            )
+        atKnownFiles[strAlias] = strFile
+
+# Parse all defines.
+atDefinitions = {}
+if tArgs.astrDefines is not None:
+    tPattern = re.compile('([a-zA-Z0-9_]+)=(.+)$')
+    for strDefine in tArgs.astrDefines:
+        tMatch = re.match(tPattern, strDefine)
+        if tMatch is None:
+            raise Exception('Invalid define: "%s". '
+                            'It must be "NAME=VALUE" instead.' % strDefine)
+        strName = tMatch.group(1)
+        strValue = tMatch.group(2)
+        if strName in atDefinitions:
+            raise Exception(
+                'Double defined name "%s". '
+                'The old value "%s" should be overwritten with "%s".' % (
+                    strName,
+                    atKnownFiles[strName],
+                    strValue
+                )
+            )
+        atDefinitions[strName] = strValue
+
+# Set an empty list of include paths if nothing was specified.
+if tArgs.astrIncludePaths is None:
+    tArgs.astrIncludePaths = []
+
+# Set an empty list of sniplib paths if nothing was specified.
+if tArgs.astrSnipLib is None:
+    tArgs.astrSnipLib = []
+
+tEnv = {'OBJCOPY': tArgs.strObjCopy,
+        'OBJDUMP': tArgs.strObjDump,
+        'READELF': tArgs.strReadElf,
+        'HBOOT_INCLUDE': tArgs.astrIncludePaths}
+
+tCompiler = hboot_image.HbootImage(
+    tEnv,
+    tArgs.strNetxType,
+    defines=atDefinitions,
+    includes=tArgs.astrIncludePaths,
+    known_files=atKnownFiles,
+    patch_definition=tArgs.strPatchTablePath,
+    verbose=tArgs.fVerbose,
+    sniplibs=tArgs.astrSnipLib,
+    keyrom=tArgs.strKeyRomPath,
+    openssloptions=tArgs.astrOpensslOptions
+)
+tCompiler.parse_image(tArgs.strInputFile)
+tCompiler.write(tArgs.strOutputFile)
diff --git a/tools/netx4000/hboot_image_compiler/netx90_app_iflash_image.py b/tools/netx4000/hboot_image_compiler/netx90_app_iflash_image.py
new file mode 100644
index 0000000000..8e5b342daf
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/netx90_app_iflash_image.py
@@ -0,0 +1,106 @@
+# -*- coding: utf-8 -*-
+
+import array
+import hashlib
+
+
+def patch_image(strInputFile, strOutputFile, fVerbose=False):
+    if fVerbose is True:
+        print('Reading the input image from "%s".' % strInputFile)
+
+    # Read the complete input file to a string.
+    tFile = open(strInputFile, 'rb')
+    strInputImage = tFile.read()
+    tFile.close()
+    sizInputImage = len(strInputImage)
+
+    if fVerbose is True:
+        print('Read %d bytes.' % sizInputImage)
+
+    # The input image must have at least...
+    #   448 bytes of CM4 header,
+    #    64 bytes of APP HBOOT header,
+    #     4 bytes of application data.
+    # In total this is 516 bytes.
+    if sizInputImage < 516:
+        raise Exception('The input image is too small. It must have at least 516 bytes.')
+
+    # The input image must be a multiple of DWORDS.
+    if (sizInputImage % 4) != 0:
+        raise Exception('The size of the input image is not a multiple of DWORDS.')
+
+    # Parse the HBOOT header as 32bit elements.
+    aulHBoot = array.array('I')
+    aulHBoot.fromstring(strInputImage[448:512])
+
+    # Check the magic and signature.
+    if aulHBoot[0x00] != 0xf3beaf00:
+        raise Exception('The input image has no valid HBOOT magic.')
+    if aulHBoot[0x06] != 0x41505041:
+        raise Exception('The input image has no valid netX90 APP signature.')
+
+    # Set the new length.
+    # This is the complete file size except the CM4 header (448 bytes) and the
+    # APP HBOOT header (64 bytes). The remaining size if converted from bytes
+    # to DWORDS.
+    sizApplicationInDwords = (sizInputImage - 512) / 4
+    aulHBoot[4] = sizApplicationInDwords
+
+    # Create a SHA384 hash over the cm4 vectors and the complete application
+    # (i.e. the complete file without the first 512 bytes).
+    tHash = hashlib.sha384()
+    tHash.update(strInputImage[0:448])
+    tHash.update(strInputImage[512:])
+    aulHash = array.array('I', tHash.digest())
+
+    # Write the first 7 DWORDs of the hash to the HBOOT header.
+    aulHBoot[0x08] = aulHash[0]
+    aulHBoot[0x09] = aulHash[1]
+    aulHBoot[0x0a] = aulHash[2]
+    aulHBoot[0x0b] = aulHash[3]
+    aulHBoot[0x0c] = aulHash[4]
+    aulHBoot[0x0d] = aulHash[5]
+    aulHBoot[0x0e] = aulHash[6]
+
+    # Create the header checksum.
+    ulBootblockChecksum = 0
+    for iCnt in range(0, 15):
+        ulBootblockChecksum += aulHBoot[iCnt]
+        ulBootblockChecksum &= 0xffffffff
+    ulBootblockChecksum = (ulBootblockChecksum - 1) ^ 0xffffffff
+
+    # Finalize the header with the checksum.
+    aulHBoot[0x0f] = ulBootblockChecksum
+
+    # Write the complete image to the output file.
+    if fVerbose is True:
+        print('Writing patched image to "%s".' % strOutputFile)
+    tFile = open(strOutputFile, 'wb')
+    tFile.write(strInputImage[0:448])
+    aulHBoot.tofile(tFile)
+    tFile.write(strInputImage[512:])
+    tFile.close()
+
+    if fVerbose is True:
+        print('OK.')
+
+
+if __name__ == '__main__':
+    import argparse
+
+    tParser = argparse.ArgumentParser(description='Patch the header information in a netX90 APP IFLASH image.')
+    tParser.add_argument('-v', '--verbose',
+                         dest='fVerbose',
+                         required=False,
+                         default=False,
+                         action='store_const', const=True,
+                         help='Be more verbose.')
+    tParser.add_argument('strInputFile',
+                         metavar='FILE',
+                         help='Read the image from FILE.')
+    tParser.add_argument('strOutputFile',
+                         metavar='FILE',
+                         help='Write the patched image to FILE.')
+    tArgs = tParser.parse_args()
+
+    patch_image(tArgs.strInputFile, tArgs.strOutputFile, tArgs.fVerbose)
diff --git a/tools/netx4000/hboot_image_compiler/option_compiler.py b/tools/netx4000/hboot_image_compiler/option_compiler.py
new file mode 100644
index 0000000000..1ce9a537d8
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/option_compiler.py
@@ -0,0 +1,447 @@
+# -*- coding: utf-8 -*-
+
+import ast
+import string
+import xml.dom.minidom
+
+# ----------------------------------------------------------------------------
+#
+# The option compiler builds an option chunk.
+#
+
+
+class OptionCompiler:
+    # This is a list of the compiled options.
+    __strOptions = None
+
+    # This is the patch definitions object.
+    __cPatchDefinitions = None
+
+    def __init__(self, tPatchDefinitions):
+        self.__strOptions = ''
+        self.__cPatchDefinitions = tPatchDefinitions
+
+    def __parse_numeric_expression(self, strExpression):
+        tAstNode = ast.parse(strExpression, mode='eval')
+        tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+        ulResult = eval(compile(tAstResolved, 'lala', mode='eval'))
+        # TODO: is this really necessary? Maybe ast.literal_eval throws
+        # something already.
+        if ulResult is None:
+            raise Exception('Invalid number: "%s"' % strExpression)
+        return ulResult
+
+    def __get_data(self, tDataNode, uiElementSizeInBytes):
+        # Collect all text nodes and CDATA sections.
+        atText = []
+        # Loop over all children.
+        for tTextNode in tDataNode.childNodes:
+            # Is this a node element with the name 'Options'?
+            if (tTextNode.nodeType == tDataNode.TEXT_NODE) or (tTextNode.nodeType == tDataNode.CDATA_SECTION_NODE):
+                atText.append(tTextNode.data)
+        # Join all text chunks.
+        strText = ''.join(atText)
+        # Split the text by comma.
+        atTextElements = string.split(strText, ',')
+
+        # Process all data elements.
+        atData = []
+        for strElementRaw in atTextElements:
+            strElement = string.strip(strElementRaw)
+
+            # Parse the data.
+            ulValue = self.__parse_numeric_expression(strElement)
+
+            # Generate the data entry.
+            atBytes = [chr((ulValue >> (iCnt << 3)) & 0xff) for iCnt in range(0, uiElementSizeInBytes)]
+            atData.append(''.join(atBytes))
+        return ''.join(atData)
+
+    # NOTE: This function is also used from outside for SpiMacro parsing.
+    def get_spi_macro_data(self, tDataNode):
+        # Collect all text nodes and CDATA sections.
+        atText = []
+        # Loop over all children.
+        for tTextNode in tDataNode.childNodes:
+            # Is this a node element with the name 'Options'?
+            if (tTextNode.nodeType == tTextNode.TEXT_NODE) or (tTextNode.nodeType == tTextNode.CDATA_SECTION_NODE):
+                atText.append(tTextNode.data)
+        # Join all text chunks.
+        strText = ''.join(atText)
+
+        # Split the text by newlines.
+        atLines = string.split(strText, '\n')
+        # Split the lines by comma.
+        atRawElements = []
+        for strLine in atLines:
+            atRawElements.extend(string.split(strLine, ','))
+
+        # Loop over all lines.
+        ulAddress = 0
+        atLabels = dict({})
+        atElements = []
+        for strRawElement in atRawElements:
+            # Remove empty lines and comments.
+            strElement = string.strip(strRawElement)
+            if (len(strElement) > 0) and (strElement[0] != '#'):
+                # Does the element contain a colon?
+                atTmp = string.split(strElement, ':')
+                if len(atTmp) == 1:
+                    # The line does not contain a colon.
+                    # This counts as one byte.
+                    ulAddress += 1
+                    atElements.append(atTmp[0])
+                elif len(atTmp) != 2:
+                    raise Exception('The line contains more than one colon!')
+                else:
+                    if len(atTmp[0]) == 0:
+                        raise Exception('The line contains no data before the colon!')
+
+                    # The line contains a label definition.
+                    strLabelName = atTmp[0]
+                    if strLabelName in atLabels:
+                        raise Exception('Label double defined: %s' % strLabelName)
+                    atLabels[strLabelName] = ulAddress
+
+                    if len(atTmp[1]) != 0:
+                        # The line contains also data.
+                        ulAddress += 1
+                        atElements.append(string.strip(atTmp[0]))
+
+        # Set the labels as temporary constants.
+        self.__cPatchDefinitions.setTemporaryConstants(atLabels)
+
+        # Process all data elements.
+        atData = []
+        for strElement in atElements:
+            # Parse the data.
+            tAstNode = ast.parse(strElement, mode='eval')
+            tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+            ast.dump(tAstResolved)
+            ulValue = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+            # Generate the data entry.
+            atData.append(chr(ulValue))
+
+        # Remove the labels as temporary constants.
+        self.__cPatchDefinitions.setTemporaryConstants([])
+
+        return ''.join(atData)
+
+    def __get_ddr_macro_data(self, tDataNode):
+        # Collect the DDR macro in this array.
+        atDdrMacro = []
+
+        # Loop over all children.
+        for tNode in tDataNode.childNodes:
+            if tNode.nodeType == tNode.ELEMENT_NODE:
+                if tNode.localName == 'WritePhy':
+                    strValue = tNode.getAttribute('register')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ucRegister = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('data')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulData = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    if (ucRegister < 0) or (ucRegister > 0xff):
+                        raise Exception('Invalid register for WritePhy: 0x%02x' % ucRegister)
+                    if (ulData < 0) or (ulData > 0xffffffff):
+                        raise Exception('Invalid data for WritePhy: 0x%08x' % ulData)
+
+                    # Append the new element.
+                    atDdrMacro.append(chr(self.__cPatchDefinitions.m_atConstants['DDR_SETUP_COMMAND_WritePhy']))
+                    atDdrMacro.append(chr(ucRegister))
+                    atDdrMacro.append(chr(ulData & 0xff))
+                    atDdrMacro.append(chr((ulData >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 24) & 0xff))
+
+                elif tNode.localName == 'WriteCtrl':
+                    strValue = tNode.getAttribute('register')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ucRegister = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('data')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulData = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    if (ucRegister < 0) or (ucRegister > 0xff):
+                        raise Exception('Invalid register for WritePhy: 0x%02x' % ucRegister)
+                    if (ulData < 0) or (ulData > 0xffffffff):
+                        raise Exception('Invalid data for WritePhy: 0x%08x' % ulData)
+
+                    # Append the new element.
+                    atDdrMacro.append(chr(self.__cPatchDefinitions.m_atConstants['DDR_SETUP_COMMAND_WriteCtrl']))
+                    atDdrMacro.append(chr(ucRegister))
+                    atDdrMacro.append(chr(ulData & 0xff))
+                    atDdrMacro.append(chr((ulData >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 24) & 0xff))
+
+                elif tNode.localName == 'Delay':
+                    strValue = tNode.getAttribute('ticks')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulTicks = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    if (ulTicks < 0) or (ulTicks > 0xffffffff):
+                        raise Exception('Invalid value for Delay: 0x%08x' % ulTicks)
+
+                    # Append the new element.
+                    atDdrMacro.append(chr(self.__cPatchDefinitions.m_atConstants['DDR_SETUP_COMMAND_DelayTicks']))
+                    atDdrMacro.append(chr(ulTicks & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 24) & 0xff))
+
+                elif tNode.localName == 'PollPhy':
+                    strValue = tNode.getAttribute('register')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ucRegister = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('mask')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulMask = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('data')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulData = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('ticks')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulTicks = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    if (ucRegister < 0) or (ucRegister > 0xff):
+                        raise Exception('Invalid register for WritePhy: 0x%02x' % ucRegister)
+                    if (ulMask < 0) or (ulMask > 0xffffffff):
+                        raise Exception('Invalid mask for WritePhy: 0x%08x' % ulMask)
+                    if (ulData < 0) or (ulData > 0xffffffff):
+                        raise Exception('Invalid data for WritePhy: 0x%08x' % ulData)
+                    if (ulTicks < 0) or (ulTicks > 0xffffffff):
+                        raise Exception('Invalid value for Delay: 0x%08x' % ulTicks)
+
+                    # Append the new element.
+                    atDdrMacro.append(chr(self.__cPatchDefinitions.m_atConstants['DDR_SETUP_COMMAND_PollPhy']))
+                    atDdrMacro.append(chr(ucRegister))
+                    atDdrMacro.append(chr(ulMask & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 24) & 0xff))
+                    atDdrMacro.append(chr(ulData & 0xff))
+                    atDdrMacro.append(chr((ulData >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 24) & 0xff))
+                    atDdrMacro.append(chr(ulTicks & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 24) & 0xff))
+
+                elif tNode.localName == 'PollCtrl':
+                    strValue = tNode.getAttribute('register')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ucRegister = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('mask')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulMask = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('data')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulData = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    strValue = tNode.getAttribute('ticks')
+                    tAstNode = ast.parse(strValue, mode='eval')
+                    tAstResolved = self.__cPatchDefinitions.resolve_constants(tAstNode)
+                    ulTicks = eval(compile(tAstResolved, 'lala', mode='eval'))
+
+                    if (ucRegister < 0) or (ucRegister > 0xff):
+                        raise Exception('Invalid register for WritePhy: 0x%02x' % ucRegister)
+                    if (ulMask < 0) or (ulMask > 0xffffffff):
+                        raise Exception('Invalid mask for WritePhy: 0x%08x' % ulMask)
+                    if (ulData < 0) or (ulData > 0xffffffff):
+                        raise Exception('Invalid data for WritePhy: 0x%08x' % ulData)
+                    if (ulTicks < 0) or (ulTicks > 0xffffffff):
+                        raise Exception('Invalid value for Delay: 0x%08x' % ulTicks)
+
+                    # Append the new element.
+                    atDdrMacro.append(chr(self.__cPatchDefinitions.m_atConstants['DDR_SETUP_COMMAND_PollCtrl']))
+                    atDdrMacro.append(chr(ucRegister))
+                    atDdrMacro.append(chr(ulMask & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulMask >> 24) & 0xff))
+                    atDdrMacro.append(chr(ulData & 0xff))
+                    atDdrMacro.append(chr((ulData >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulData >> 24) & 0xff))
+                    atDdrMacro.append(chr(ulTicks & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 8) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 16) & 0xff))
+                    atDdrMacro.append(chr((ulTicks >> 24) & 0xff))
+
+                else:
+                    raise Exception('Unknown child node: %s' % tNode.localName)
+
+        # Combine all macro data.
+        strDdrMacro = ''.join(atDdrMacro)
+        sizDdrMacro = len(strDdrMacro)
+
+        # Prepend the size information.
+        atData = []
+        atData.append(chr(sizDdrMacro & 0xff))
+        atData.append(chr((sizDdrMacro >> 8) & 0xff))
+        atData.extend(atDdrMacro)
+
+        # Return the data.
+        return atData
+
+    def __getOptionData(self, tOptionNode):
+        atData = []
+
+        # Loop over all children.
+        for tDataNode in tOptionNode.childNodes:
+            # Is this a node element with the name 'Options'?
+            if tDataNode.nodeType == tDataNode.ELEMENT_NODE:
+                if tDataNode.localName == 'U08':
+                    strData = self.__get_data(tDataNode, 1)
+                    atData.append(strData)
+                elif tDataNode.localName == 'U16':
+                    strData = self.__get_data(tDataNode, 2)
+                    atData.append(strData)
+                elif tDataNode.localName == 'U32':
+                    strData = self.__get_data(tDataNode, 4)
+                    atData.append(strData)
+                elif tDataNode.localName == 'SPIM':
+                    strData = self.get_spi_macro_data(tDataNode)
+                    atData.append(strData)
+                elif tDataNode.localName == 'DDR':
+                    strData = self.__get_ddr_macro_data(tDataNode)
+                    atData.append(strData)
+                else:
+                    raise Exception('Unexpected node: %s', tDataNode.localName)
+
+        return atData
+
+    def __processChunkOptions(self, tChunkNode):
+        atOptionData = []
+
+        # Loop over all children.
+        for tOptionNode in tChunkNode.childNodes:
+            # Is this a node element with the name 'Options'?
+            if tOptionNode.nodeType == tOptionNode.ELEMENT_NODE:
+                if tOptionNode.localName == 'Option':
+                    # Get the ID.
+                    strOptionId = tOptionNode.getAttribute('id')
+                    if strOptionId == '':
+                        raise Exception('Missing id attribute!')
+
+                    if strOptionId == 'RAW':
+                        # Get the offset attribute.
+                        strOffset = tOptionNode.getAttribute('offset')
+                        if strOffset == '':
+                            raise Exception('Missing offset attribute!')
+                        ulOffset = self.__parse_numeric_expression(strOffset)
+
+                        # Get all data elements.
+                        atData = self.__getOptionData(tOptionNode)
+
+                        # To make things easier this routine expects only one element.
+                        if len(atData) != 1:
+                            raise Exception('A RAW element must have only one child element. This is just a limitation of the parser, so improve it if you really need it.')
+
+                        # The data size must fit into 1 byte.
+                        sizElement = len(atData[0])
+                        if sizElement > 255:
+                            raise Exception('The RAW tag does not accept more than 255 bytes.')
+
+                        ucOptionValue = 0xfe
+                        atOptionData.append(chr(ucOptionValue))
+                        atOptionData.append(chr(sizElement))
+                        atOptionData.append(chr(ulOffset & 0xff))
+                        atOptionData.append(chr((ulOffset >> 8) & 0xff))
+                        atOptionData.extend(atData[0])
+
+                    else:
+                        atOptionDesc = self.__cPatchDefinitions.get_patch_definition(strOptionId)
+                        ulOptionValue = atOptionDesc['value']
+                        atElements = atOptionDesc['elements']
+
+                        # Get all data elements.
+                        atData = self.__getOptionData(tOptionNode)
+
+                        # Compare the data elements with the element sizes.
+                        sizElements = len(atElements)
+                        if len(atData) != sizElements:
+                            raise Exception('The number of data elements for the option %s differs. The model requires %d, but %d were found.' % (strOptionId, sizElements, len(atData)))
+
+                        atOptionData.append(chr(ulOptionValue))
+
+                        # Compare the size of all elements.
+                        for iCnt in range(0, sizElements):
+                            sizElement = len(atData[iCnt])
+                            (strElementId, ulSize, ulType) = atElements[iCnt]
+                            if ulType == 0:
+                                if sizElement != ulSize:
+                                    raise Exception('The length of the data element %s for the option %s differs. The model requires %d bytes, but %d were found.' % (strElementId, strOptionId, ulSize, sizElement))
+                            elif ulType == 1:
+                                if sizElement >= ulSize:
+                                    raise Exception('The length of the data element %s for the option %s exceeds the available space. The model reserves %d bytes, which must include a length information, but %d were found.' % (strElementId, strOptionId, ulSize, sizElement))
+                            elif ulType == 2:
+                                if sizElement > ulSize:
+                                    raise Exception('The length of the data element %s for the option %s exceeds the available space. The model reserves %d bytes, but %d were found.' % (strElementId, strOptionId, ulSize, sizElement))
+                            else:
+                                raise Exception('Unknown Type %d' % ulType)
+
+                        # Write all elements.
+                        for iCnt in range(0, sizElements):
+                            sizElement = len(atData[iCnt])
+                            (strElementId, ulSize, ulType) = atElements[iCnt]
+                            if ulType == 0:
+                                atOptionData.extend(atData[iCnt])
+                            elif ulType == 1:
+                                # Add a size byte.
+                                atOptionData.append(chr(sizElement))
+                                atOptionData.extend(atData[iCnt])
+                            elif ulType == 2:
+                                # Add 16 bit size information.
+                                atOptionData.append(chr(sizElement & 0xff))
+                                atOptionData.append(chr((sizElement >> 8) & 0xff))
+                                atOptionData.extend(atData[iCnt])
+                            else:
+                                raise Exception('Unknown Type %d' % ulType)
+                else:
+                    raise Exception('Unexpected node: %s' % tOptionNode.localName)
+
+        return ''.join(atOptionData)
+
+    def process(self, tSource):
+        # Clear the output data.
+        self.__strOptions = ''
+
+        if not isinstance(tSource, xml.dom.minidom.Node):
+            raise Exception('The input must be of the type xml.dom.minidom.Node, but it is not!')
+
+        self.__strOptions = self.__processChunkOptions(tSource)
+
+    def tostring(self):
+        """ Return the compiled options as a string. """
+        return self.__strOptions
+
+    def write(self, strTargetPath):
+        """ Write all compiled options to the file strTargetPath . """
+        tFile = open(strTargetPath, 'wb')
+
+        tFile.write(self.tostring())
+        tFile.close()
diff --git a/tools/netx4000/hboot_image_compiler/patch_definitions.py b/tools/netx4000/hboot_image_compiler/patch_definitions.py
new file mode 100644
index 0000000000..7ca46d521e
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/patch_definitions.py
@@ -0,0 +1,138 @@
+# -*- coding: utf-8 -*-
+
+import ast
+import xml.dom.minidom
+
+# ----------------------------------------------------------------------------
+#
+# This class replaces literal values in AST expressions with a dictionary.
+#
+
+
+class RewriteName(ast.NodeTransformer):
+    __atConstants = None
+    __atTemporaryConstants = None
+
+    def setConstants(self, atConstants):
+        self.__atConstants = atConstants
+
+    def setTemporaryConstants(self, atConstants):
+        self.__atTemporaryConstants = atConstants
+
+    def visit_Name(self, node):
+        tNode = None
+        if node.id in self.__atConstants:
+            tValue = self.__atConstants[node.id]
+            tNode = ast.copy_location(ast.Num(n=tValue), node)
+        elif (self.__atTemporaryConstants is not None) and (node.id in self.__atTemporaryConstants):
+            tValue = self.__atTemporaryConstants[node.id]
+            tNode = ast.copy_location(ast.Num(n=tValue), node)
+        else:
+            raise Exception('Unknown constant %s.' % node.id)
+        return tNode
+
+# ----------------------------------------------------------------------------
+
+
+class PatchDefinitions:
+    # This is a dictionary with all the data from the patch definition.
+    m_atPatchDefinitions = None
+
+    # This is a dictionary of all constants. They are read from the patch
+    # definition.
+    m_atConstants = None
+
+    m_cAstConstResolver = None
+
+    def __init__(self):
+        self.m_atPatchDefinitions = dict({})
+        self.m_atConstants = dict({})
+        self.m_cAstConstResolver = RewriteName()
+        self.m_cAstConstResolver.setConstants(self.m_atConstants)
+
+    def read_patch_definition(self, tInput):
+        # A string must be the filename of the XML.
+        if isinstance(tInput, ("".__class__, u"".__class__)):
+            tXml = xml.dom.minidom.parse(tInput)
+        elif isinstance(tInput, xml.dom.minidom.Document):
+            tXml = tInput
+        else:
+            raise Exception('Unknown input document: %s' % repr(tInput))
+
+        # Loop over all children.
+        for tOptionsNode in tXml.documentElement.childNodes:
+            # Is this a node element with the name 'Options'?
+            if (tOptionsNode.nodeType == tOptionsNode.ELEMENT_NODE) and (tOptionsNode.localName == 'Options'):
+                # Loop over all children.
+                for tOptionNode in tOptionsNode.childNodes:
+                    # Is this a node element with the name 'Options'?
+                    if (tOptionNode.nodeType == tOptionNode.ELEMENT_NODE) and (tOptionNode.localName == 'Option'):
+                        # Get the ID.
+                        strOptionId = tOptionNode.getAttribute('id')
+                        if strOptionId == '':
+                            raise Exception('Missing id attribute!')
+                        if strOptionId in self.m_atPatchDefinitions:
+                            raise Exception('ID %s double defined!' % strOptionId)
+
+                        strOptionValue = tOptionNode.getAttribute('value')
+                        if strOptionValue == '':
+                            raise Exception('Missing value attribute!')
+                        ulOptionValue = int(strOptionValue, 0)
+
+                        # Loop over all children.
+                        atElements = []
+                        for tElementNode in tOptionNode.childNodes:
+                            # Is this a node element with the name 'Element'?
+                            if (tElementNode.nodeType == tElementNode.ELEMENT_NODE) and (tElementNode.localName == 'Element'):
+                                # Get the ID.
+                                strElementId = tElementNode.getAttribute('id')
+                                if strElementId == '':
+                                    raise Exception('Missing id attribute!')
+
+                                # Get the size attribute.
+                                strSize = tElementNode.getAttribute('size')
+                                if strSize == '':
+                                    raise Exception('Missing size attribute!')
+                                ulSize = int(strSize, 0)
+
+                                # Get the type attribute.
+                                strType = tElementNode.getAttribute('type')
+                                if strType == '':
+                                    raise Exception('Missing type attribute!')
+                                ulType = int(strType, 0)
+
+                                atElements.append((strElementId, ulSize, ulType))
+                        atDesc = dict({})
+                        atDesc['value'] = ulOptionValue
+                        atDesc['elements'] = atElements
+                        self.m_atPatchDefinitions[strOptionId] = atDesc
+
+            elif (tOptionsNode.nodeType == tOptionsNode.ELEMENT_NODE) and (tOptionsNode.localName == 'Definitions'):
+                # Loop over all children.
+                for tDefinitionNode in tOptionsNode.childNodes:
+                    if (tDefinitionNode.nodeType == tDefinitionNode.ELEMENT_NODE) and (tDefinitionNode.localName == 'Definition'):
+                        # Get the name.
+                        strDefinitionName = tDefinitionNode.getAttribute('name')
+                        if strDefinitionName == '':
+                            raise Exception('Missing name attribute!')
+                        if strDefinitionName in self.m_atConstants:
+                            raise Exception('Name "%s" double defined!' % strDefinitionName)
+
+                        strDefinitionValue = tDefinitionNode.getAttribute('value')
+                        if strDefinitionValue == '':
+                            raise Exception('Missing value attribute!')
+                        ulDefinitionValue = int(strDefinitionValue, 0)
+
+                        self.m_atConstants[strDefinitionName] = ulDefinitionValue
+
+    def resolve_constants(self, tAstNode):
+        return self.m_cAstConstResolver.visit(tAstNode)
+
+    def get_patch_definition(self, strOptionId):
+        if strOptionId not in self.m_atPatchDefinitions:
+            raise Exception('The option ID %s was not found!' % strOptionId)
+
+        return self.m_atPatchDefinitions[strOptionId]
+
+    def setTemporaryConstants(self, atConstants):
+        self.m_cAstConstResolver.setTemporaryConstants(atConstants)
diff --git a/tools/netx4000/hboot_image_compiler/snippet_library.py b/tools/netx4000/hboot_image_compiler/snippet_library.py
new file mode 100644
index 0000000000..42a4f4c082
--- /dev/null
+++ b/tools/netx4000/hboot_image_compiler/snippet_library.py
@@ -0,0 +1,351 @@
+# -*- coding: utf-8 -*-
+
+import hashlib
+import os
+import os.path
+import sqlite3
+import xml.dom.minidom
+
+
+class SnippetLibrary:
+    # Print debug messages.
+    __fDebug = False
+
+    # The filename for the database.
+    __strDatabasePath = None
+
+    # The database connection.
+    __tDb = None
+
+    # The list of folders to scan recursively for snippets.
+    __astrSnippetSearchPaths = None
+
+    # The snippet library was already scanned if this flag is set.
+    __fSnipLibIsAlreadyScanned = None
+
+    def __init__(self, strDatabasePath, astrSnippetSearchPaths, debug=False):
+        self.__fDebug = bool(debug)
+
+        # Set the filename of the SQLITE3 database.
+        self.__strDatabasePath = strDatabasePath
+        if self.__fDebug:
+            print('[SnipLib] Configuration: Database path = "%s"' % strDatabasePath)
+
+        # The connection to the database is not open yet.
+        self.__tDb = None
+
+        # Convert all search paths to absolute paths.
+        self.__astrSnippetSearchPaths = []
+        for strPath in astrSnippetSearchPaths:
+            self.__astrSnippetSearchPaths.append(os.path.abspath(strPath))
+
+        # Print all search paths in debug mode.
+        if self.__fDebug:
+            for strPath in self.__astrSnippetSearchPaths:
+                print('[SnipLib] Configuration: Search path "%s"' % strPath)
+
+        # The snippet library was not scanned yet.
+        self.__fSnipLibIsAlreadyScanned = False
+
+    def __xml_get_all_text(self, tNode):
+        astrText = []
+        for tChild in tNode.childNodes:
+            if (tChild.nodeType == tChild.TEXT_NODE) or (tChild.nodeType == tChild.CDATA_SECTION_NODE):
+                astrText.append(str(tChild.data))
+        return ''.join(astrText)
+
+    def __xml_get_node(self, tBaseNode, strTagName):
+        tNode = None
+        for tChildNode in tBaseNode.childNodes:
+            if tChildNode.nodeType == tChildNode.ELEMENT_NODE:
+                if tChildNode.localName == strTagName:
+                    tNode = tChildNode
+                    break
+
+        return tNode
+
+    def __get_snip_hash(self, strAbsPath):
+        # Get the SHA384 hash.
+        tFile = open(strAbsPath, 'rb')
+        tHash = hashlib.sha384()
+        fEof = False
+        while fEof is False:
+            strData = tFile.read(2048)
+            tHash.update(strData)
+            if len(strData) < 2048:
+                fEof = True
+        strDigest = tHash.hexdigest()
+        tFile.close()
+
+        # Return the hash.
+        return strDigest
+
+    def __db_open(self):
+        tDb = self.__tDb
+        if tDb is None:
+            tDb = sqlite3.connect(self.__strDatabasePath)
+            self.__tDb = tDb
+
+        tCursor = tDb.cursor()
+
+        # Construct the "CREATE" statement for the "snippets" table.
+        strCreateStatement = 'CREATE TABLE snippets (id INTEGER PRIMARY KEY, search_path TEXT NOT NULL, path TEXT NOT NULL, hash TEXT NOT NULL, groupid TEXT NOT NULL, artifact TEXT NOT NULL, version TEXT NOT NULL, clean INTEGER DEFAULT 0)'
+        if self.__fDebug:
+            print('[SnipLib] Database: The current CREATE statement for the "snippet" table is "%s".' % strCreateStatement)
+
+        # Compare the current "CREATE" statement with the statement of the
+        # existing table.
+        tCursor.execute('SELECT sql FROM sqlite_master WHERE name="snippets"')
+        tRes = tCursor.fetchone()
+        if tRes is None:
+            # The table does not exist yet. Create it now.
+            if self.__fDebug:
+                print('[SnipLib] Database: The "snippet" table does not yet exist. Create it now.')
+            tCursor.execute(strCreateStatement)
+            tDb.commit()
+        elif tRes[0] != strCreateStatement:
+            if self.__fDebug:
+                print('[SnipLib] Database: The existing "snippet" table has a different CREATE statement: "%s".' % tRes[0])
+                print('[SnipLib] Database: Delete the existing table and re-create it.')
+            # Delete the old table.
+            tCursor.execute('DROP TABLE snippets')
+            tDb.commit()
+            # Create a new table.
+            tCursor.execute(strCreateStatement)
+            tDb.commit()
+        else:
+            if self.__fDebug:
+                print('[SnipLib] Database: The existing "snippet" table was created with the correct statement.')
+
+    def __snippet_get_gav(self, strPath):
+        strGroup = None
+        strArtifact = None
+        strVersion = None
+
+        # Parse the snippet.
+        try:
+            tXml = xml.dom.minidom.parse(strPath)
+        except xml.dom.DOMException as tException:
+            # Invalid XML, ignore.
+            strArtifact = 'No valid XML: %s' % repr(tException)
+            tXml = None
+
+        if tXml is not None:
+            # Search for the "Info" node.
+            tInfoNode = self.__xml_get_node(tXml.documentElement, 'Info')
+            if tInfoNode is None:
+                # No Info node -> ignore the file.
+                strArtifact = 'It has no "Info" node.'
+            else:
+                # Get the "group", "artifact" and "version" attributes.
+                strGroup = tInfoNode.getAttribute('group')
+                strArtifact = tInfoNode.getAttribute('artifact')
+                strVersion = tInfoNode.getAttribute('version')
+                if len(strGroup) == 0:
+                    strGroup = None
+                    strArtifact = 'The "group" attribute of an "Info" node must not be empty.'
+                elif len(strArtifact) == 0:
+                    strGroup = None
+                    strArtifact = 'The "artifact" attribute of an "Info" node must not be empty.'
+                elif len(strVersion) == 0:
+                    strGroup = None
+                    strArtifact = 'The "version" attribute of an "Info" node must not be empty.'
+
+        # Return the group, artifact and version.
+        return strGroup, strArtifact, strVersion
+
+    def __sniplib_invalidate(self, strSearchPath):
+        tCursor = self.__tDb.cursor()
+
+        # Show all files which are invalidated.
+        if self.__fDebug:
+            print('[SnipLib] Scan: Invalidating all cached entries for the search path "%s".' % strSearchPath)
+            tCursor.execute('SELECT path,groupid,artifact,version FROM snippets WHERE search_path=?', (strSearchPath, ))
+            atRes = tCursor.fetchall()
+            if atRes is None or len(atRes) == 0:
+                print('[SnipLib] Scan:  -> No cached entries found for the search path "%s".' % strSearchPath)
+            else:
+                for tRes in atRes:
+                    print('[SnipLib] Scan:  -> Invalidating entry G="%s" A="%s" V="%s" at "%s".' % (tRes[1], tRes[2], tRes[3], tRes[0]))
+
+        # Mark all files to be deleted. This flag will be cleared for all files which are present.
+        tCursor.execute('UPDATE snippets SET clean=1 WHERE search_path=?', (strSearchPath, ))
+        self.__tDb.commit()
+
+    def __sniplib_scan(self, strSearchPath):
+        if self.__fDebug:
+            print('[SnipLib] Scan: Scanning search path "%s".' % strSearchPath)
+
+        tCursor = self.__tDb.cursor()
+        # Search all files recursively.
+        for strRoot, astrDirs, astrFiles in os.walk(strSearchPath, followlinks=True):
+            # Process all files in this folder.
+            for strFile in astrFiles:
+                # Get the extension of the file.
+                strDummy, strExt = os.path.splitext(strFile)
+                if strExt == '.xml':
+                    # Get the absolute path for the file.
+                    strAbsPath = os.path.join(strRoot, strFile)
+
+                    # Get the stamp of the snip.
+                    strDigest = self.__get_snip_hash(strAbsPath)
+
+                    if self.__fDebug:
+                        print('[SnipLib] Scan:  -> Found snippet at "%s" with the hash "%s".' % (strAbsPath, strDigest))
+
+                    # Search the snippet in the database.
+                    tCursor.execute('SELECT id,hash FROM snippets WHERE search_path=? AND path=?', (strSearchPath, strAbsPath))
+                    atResults = tCursor.fetchone()
+                    if atResults is None:
+                        # The snippet is not present in the database yet.
+                        if self.__fDebug:
+                            print('[SnipLib] Scan:      -> The snippet is not registered in the cache yet. Make a new entry now.')
+                        strGroup, strArtifact, strVersion = self.__snippet_get_gav(strAbsPath)
+                        if strGroup is None:
+                            if self.__fDebug:
+                                print('[SnipLib] Scan:      -> Warning: Ignoring file "%s". %s' % (strAbsPath, strArtifact))
+
+                        # Make a new entry.
+                        tCursor.execute('INSERT INTO snippets (search_path, path, hash, groupid, artifact, version) VALUES (?, ?, ?, ?, ?, ?)', (strSearchPath, strAbsPath, strDigest, strGroup, strArtifact, strVersion))
+
+                    else:
+                        # Compare the hash of the file.
+                        if atResults[1] == strDigest:
+                            # The hash is the same -> the file is already known.
+                            if self.__fDebug:
+                                print('[SnipLib] Scan:      -> The snippet is already registered in the cache.')
+
+                            # Found the file. Do not delete it from the database.
+                            tCursor.execute('UPDATE snippets SET clean=0 WHERE id=?', (atResults[0], ))
+
+                        else:
+                            # The hash differs. Update the entry with the new hash, group, artifact and version.
+                            if self.__fDebug:
+                                print('[SnipLib] Scan:      -> The snippet has a different hash than the entry in the cache. Update the metadata now.')
+
+                            strGroup, strArtifact, strVersion = self.__snippet_get_gav(strAbsPath)
+                            if strGroup is None:
+                                if self.__fDebug:
+                                    print('[SnipLib] Scan:      -> Warning: Ignoring file "%s". %s' % (strAbsPath, strArtifact))
+                            else:
+                                tCursor.execute('UPDATE snippets SET hash=?, groupid=?, artifact=?, version=?, clean=0 WHERE id=?', (strDigest, strGroup, strArtifact, strVersion, atResults[0]))
+
+    def __sniplib_forget_invalid_entries(self, strSearchPath):
+        # Remove all entries from the cache which are marked for clean.
+        tCursor = self.__tDb.cursor()
+
+        # Show all files which are removed from the cache.
+        if self.__fDebug:
+            print('[SnipLib] Scan: Remove all invalidated entries from the cache for the search path "%s".' % strSearchPath)
+            tCursor.execute('SELECT path,groupid,artifact,version FROM snippets WHERE clean!=0 AND search_path=?', (strSearchPath, ))
+            atRes = tCursor.fetchall()
+            if atRes is None or len(atRes) == 0:
+                print('[SnipLib] Scan:  -> No cache entries are removed.')
+            else:
+                for tRes in atRes:
+                    print('[SnipLib] Scan:  -> Removing cache entry G="%s" A="%s" V="%s" at "%s".' % (tRes[1], tRes[2], tRes[3], tRes[0]))
+
+        tCursor.execute('DELETE FROM snippets WHERE clean!=0 AND search_path=?', (strSearchPath, ))
+        self.__tDb.commit()
+
+    def find(self, strGroup, strArtifact, strVersion, atParameter):
+        # Open the connection to the database.
+        self.__db_open()
+
+        # Scan each search path.
+        if self.__fSnipLibIsAlreadyScanned is not True:
+            for strSearchPath in self.__astrSnippetSearchPaths:
+                self.__sniplib_invalidate(strSearchPath)
+                self.__sniplib_scan(strSearchPath)
+                self.__sniplib_forget_invalid_entries(strSearchPath)
+            self.__fSnipLibIsAlreadyScanned = True
+
+        # Search for the snippet in each search path. Stop on the first hit.
+        atMatch = None
+        tCursor = self.__tDb.cursor()
+        for strSearchPath in self.__astrSnippetSearchPaths:
+            tCursor.execute('SELECT path FROM snippets WHERE search_path=? AND groupid=? AND artifact=? AND version=?', (strSearchPath, strGroup, strArtifact, strVersion))
+            atResult = tCursor.fetchone()
+            if atResult is not None:
+                atMatch = atResult
+                break
+
+        # Get the snippet name for messages.
+        strSnippetName = 'G="%s", A="%s", V="%s"' % (strGroup, strArtifact, strVersion)
+
+        if atMatch is None:
+            # No matching snippet found.
+            raise Exception('No matching snippet found for %s.' % strSnippetName)
+
+        strAbsPath = atMatch[0]
+        if self.__fDebug:
+            print('[SnipLib] Resolve: Found %s at "%s".' % (strSnippetName, strAbsPath))
+
+        # Try to parse the snippet file.
+        try:
+            tXml = xml.dom.minidom.parse(strAbsPath)
+        except xml.dom.DOMException as tException:
+            # Invalid XML, ignore.
+            raise Exception('Failed to parse the snippet %s: %s' % (strSnippetName, repr(tException)))
+
+        tRootNode = tXml.documentElement
+
+        # Find all parameters.
+        # The "ParameterList" node is optional.
+        atParameterList = {}
+        tParameterListNode = self.__xml_get_node(tRootNode, 'ParameterList')
+        if tParameterListNode is not None:
+            # Loop over all child nodes.
+            for tChildNode in tParameterListNode.childNodes:
+                if tChildNode.nodeType == tChildNode.ELEMENT_NODE:
+                    if tChildNode.localName == 'Parameter':
+                        # Get the "name" atribute.
+                        strName = tChildNode.getAttribute('name')
+                        if len(strName) == 0:
+                            raise Exception('Failed to parse the snippet %s: a parameter node is missing the "name" attribute!' % strSnippetName)
+                        # Get the "default" attribute. It is optional.
+                        tDefault = None
+                        if tChildNode.hasAttribute('default'):
+                            tDefault = tChildNode.getAttribute('default')
+                        # Is the parameter already present?
+                        if strName in atParameterList:
+                            raise Exception('Failed to parse the snippet %s: the parameter is requested more than once in the snippet definition!' % strSnippetName)
+                        else:
+                            atParameterList[strName] = tDefault
+                    else:
+                        raise Exception('Failed to parse the snippet %s: unexpected tag "%s".' % (strSnippetName, tChildNode.localName))
+
+        # Combine the parameters.
+        atReplace = {}
+        astrMissing = []
+        # Add all default values and find missing values.
+        for strName, tDefault in iter(atParameterList.items()):
+            if tDefault is not None:
+                atReplace[strName] = tDefault
+            if strName not in atParameter:
+                astrMissing.append(strName)
+        if len(astrMissing) != 0:
+            raise Exception('Failed to instanciate snippet %s: missing parameter %s' % (strSnippetName, ', '.join(astrMissing)))
+
+        # Add all required parameters which have assigned values.
+        # Find unused parameter.
+        astrUnused = []
+        for strName, strValue in iter(atParameter.items()):
+            if strName in atParameterList:
+                atReplace[strName] = strValue
+            else:
+                astrUnused.append(strName)
+
+        if len(astrUnused) != 0:
+            if self.__fDebug:
+                print('[SnipLib] Resolve: the snippet %s does not use the following parameters: %s' % (strSnippetName, ', '.join(astrUnused)))
+
+        # Find the "Snippet" node.
+        tSnippetNode = self.__xml_get_node(tRootNode, 'Snippet')
+        if tSnippetNode is None:
+            raise Exception('The snippet definition "%s" has no "Snippet" node.' % strAbsPath)
+
+        # Get the text contents.
+        strSnippet = self.__xml_get_all_text(tSnippetNode)
+
+        return (strSnippet, atReplace, strAbsPath)
diff --git a/tools/netx4000/hboot_netx4000_patch_table.xml b/tools/netx4000/hboot_netx4000_patch_table.xml
new file mode 100644
index 0000000000..aceda3f394
--- /dev/null
+++ b/tools/netx4000/hboot_netx4000_patch_table.xml
@@ -0,0 +1,7129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<PatchDefinitions>
+	<Options>
+		<Option id="bootdev" value="1">
+			<Element id="/t_bootdev_options/auc_boot_devices" size="8" type="0"/>
+		</Option>
+		<Option id="bootdev0" value="2">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev1" value="3">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev2" value="4">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev3" value="5">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev4" value="6">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev5" value="7">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev6" value="8">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev7" value="9">
+			<Element id="/t_bootdev_options/auc_boot_devices:size1" size="1" type="0"/>
+		</Option>
+		<Option id="bootdev01" value="10">
+			<Element id="/t_bootdev_options/auc_boot_devices:size2" size="2" type="0"/>
+		</Option>
+		<Option id="bootdev23" value="11">
+			<Element id="/t_bootdev_options/auc_boot_devices:size2" size="2" type="0"/>
+		</Option>
+		<Option id="bootdev45" value="12">
+			<Element id="/t_bootdev_options/auc_boot_devices:size2" size="2" type="0"/>
+		</Option>
+		<Option id="bootdev67" value="13">
+			<Element id="/t_bootdev_options/auc_boot_devices:size2" size="2" type="0"/>
+		</Option>
+		<Option id="bootdev0123" value="14">
+			<Element id="/t_bootdev_options/auc_boot_devices:size4" size="4" type="0"/>
+		</Option>
+		<Option id="bootdev4567" value="15">
+			<Element id="/t_bootdev_options/auc_boot_devices:size4" size="4" type="0"/>
+		</Option>
+		<Option id="console" value="16">
+			<Element id="/t_console_options/uc_console_line_size" size="1" type="0"/>
+			<Element id="/t_console_options/uc_console_linefeed_mode" size="1" type="0"/>
+			<Element id="/t_console_options/auc_console_devices" size="4" type="0"/>
+			<Element id="/t_console_options/uc_uart_diagnostics_device" size="1" type="0"/>
+		</Option>
+		<Option id="console_linesize_linefeed" value="17">
+			<Element id="/t_console_options/uc_console_line_size" size="1" type="0"/>
+			<Element id="/t_console_options/uc_console_linefeed_mode" size="1" type="0"/>
+		</Option>
+		<Option id="console_devices" value="18">
+			<Element id="/t_console_options/auc_console_devices" size="4" type="0"/>
+		</Option>
+		<Option id="console_diagnostic" value="19">
+			<Element id="/t_console_options/uc_uart_diagnostics_device" size="1" type="0"/>
+		</Option>
+		<Option id="alternative_bootimage" value="20">
+			<Element id="/t_system_config/ulBootBlockOldstyleMagic" size="4" type="0"/>
+			<Element id="/t_system_config/ucBootImage_Standard0_Alternative1" size="1" type="0"/>
+		</Option>
+		<Option id="prevent_switch_to_alternative_image" value="21">
+			<Element id="/t_system_config/ucBootImage_Prevent_Switch_to_Alternative" size="1" type="0"/>
+		</Option>
+		<Option id="force_secure_console" value="22">
+			<Element id="/t_system_config/ucForceSecureConsole" size="1" type="0"/>
+		</Option>
+		<Option id="ddr" value="23">
+			<Element id="/tDdrOptions/ulPowerUpTimeoutTicks" size="4" type="0"/>
+			<Element id="/tDdrOptions/aucScript" size="2048" type="2"/>
+		</Option>
+		<Option id="ddr_script" value="24">
+			<Element id="/tDdrOptions/aucScript" size="2048" type="2"/>
+		</Option>
+		<Option id="ethernet" value="25">
+			<Element id="/t_ethernet/ac_tftp_server_name" size="64" type="2"/>
+			<Element id="/t_ethernet/ac_tftp_bootfile_name" size="128" type="2"/>
+			<Element id="/t_ethernet/aucMac" size="6" type="0"/>
+			<Element id="/t_ethernet/usTftpPort" size="2" type="0"/>
+			<Element id="/t_ethernet/ulIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulGatewayIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulNetmask" size="4" type="0"/>
+			<Element id="/t_ethernet/ulTftpIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulDnsIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulPhyControl" size="4" type="0"/>
+			<Element id="/t_ethernet/usLinkUpDelay" size="2" type="0"/>
+			<Element id="/t_ethernet/usArpTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usDhcpTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usDnsTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usTftpTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/ucArpRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucDhcpRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucDnsRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucTftpRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/aucMmioCfg" size="2" type="0"/>
+		</Option>
+		<Option id="ethernet_tftp" value="26">
+			<Element id="/t_ethernet/ac_tftp_server_name" size="64" type="2"/>
+			<Element id="/t_ethernet/ac_tftp_bootfile_name" size="128" type="2"/>
+			<Element id="/t_ethernet/usTftpPort" size="2" type="0"/>
+		</Option>
+		<Option id="ethernet_tftpip" value="27">
+			<Element id="/t_ethernet/ac_tftp_bootfile_name" size="128" type="2"/>
+			<Element id="/t_ethernet/usTftpPort" size="2" type="0"/>
+			<Element id="/t_ethernet/ulTftpIp" size="4" type="0"/>
+		</Option>
+		<Option id="ethernet_network" value="28">
+			<Element id="/t_ethernet/aucMac" size="6" type="0"/>
+			<Element id="/t_ethernet/ulIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulGatewayIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulNetmask" size="4" type="0"/>
+			<Element id="/t_ethernet/ulDnsIp" size="4" type="0"/>
+		</Option>
+		<Option id="ethernet_mac" value="29">
+			<Element id="/t_ethernet/aucMac" size="6" type="0"/>
+		</Option>
+		<Option id="ethernet_ip" value="30">
+			<Element id="/t_ethernet/ulIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulGatewayIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulNetmask" size="4" type="0"/>
+			<Element id="/t_ethernet/ulTftpIp" size="4" type="0"/>
+			<Element id="/t_ethernet/ulDnsIp" size="4" type="0"/>
+		</Option>
+		<Option id="ethernet_delay" value="31">
+			<Element id="/t_ethernet/usLinkUpDelay" size="2" type="0"/>
+			<Element id="/t_ethernet/usArpTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usDhcpTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usDnsTimeout" size="2" type="0"/>
+			<Element id="/t_ethernet/usTftpTimeout" size="2" type="0"/>
+		</Option>
+		<Option id="ethernet_retry" value="32">
+			<Element id="/t_ethernet/ucArpRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucDhcpRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucDnsRetries" size="1" type="0"/>
+			<Element id="/t_ethernet/ucTftpRetries" size="1" type="0"/>
+		</Option>
+		<Option id="ethernet_io" value="33">
+			<Element id="/t_ethernet/ulPhyControl" size="4" type="0"/>
+			<Element id="/t_ethernet/usLinkUpDelay" size="2" type="0"/>
+			<Element id="/t_ethernet/aucMmioCfg" size="2" type="0"/>
+		</Option>
+		<Option id="hif_hif_io" value="34">
+			<Element id="/t_hif_options/ulHifIoCfg" size="4" type="0"/>
+		</Option>
+		<Option id="hif_hif_io_lsb" value="35">
+			<Element id="/t_hif_options/ulHifIoCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_hif_io_msb" value="36">
+			<Element id="/t_hif_options/ulHifIoCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_all_cfg" value="37">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmMiscCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmIoCfgMisc" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmIrqFiqCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucPcieIntCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ulFirmwareIrqMask" size="4" type="0"/>
+		</Option>
+		<Option id="hif_dpmcfg0x0" value="38">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmaddrcfg" value="39">
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmtimingcfg" value="40">
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmrdycfg" value="41">
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmmisccfg" value="42">
+			<Element id="/t_hif_options/ucDpmMiscCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmiocfgmisc" value="43">
+			<Element id="/t_hif_options/ucDpmIoCfgMisc" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpmirqfiqcfg" value="44">
+			<Element id="/t_hif_options/ucDpmIrqFiqCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucPcieIntCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ulFirmwareIrqMask" size="4" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_addrcfg" value="45">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_timingcfg" value="46">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_rdycfg" value="47">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_addrcfg_timingcfg" value="48">
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_addrcfg_rdycfg" value="49">
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_timingcfg_rdycfg" value="50">
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_addrcfg_timingcfg" value="51">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_addrcfg_rdycfg" value="52">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_timingcfg_rdycfg" value="53">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_addrcfg_timingcfg_rdycfg" value="54">
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_cfg0x0_addrcfg_timingcfg_rdycfg" value="55">
+			<Element id="/t_hif_options/ucDpmCfg0x0" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmAddrCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmTimingCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmRdyCfg" size="1" type="0"/>
+		</Option>
+		<Option id="hif_dpm_misccfg_iocfgmisc_irqfiqcfg" value="56">
+			<Element id="/t_hif_options/ucDpmMiscCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmIoCfgMisc" size="1" type="0"/>
+			<Element id="/t_hif_options/ucDpmIrqFiqCfg" size="1" type="0"/>
+			<Element id="/t_hif_options/ucPcieIntCfg" size="1" type="0"/>
+		</Option>
+		<Option id="mmio_array" value="57">
+			<Element id="/t_system_config/auc_mmio_sel" size="107" type="2"/>
+		</Option>
+		<Option id="mmio_inv_array" value="58">
+			<Element id="/t_system_config/auc_mmio_inv" size="107" type="2"/>
+		</Option>
+		<Option id="mmio00_array" value="59">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio10_array" value="60">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio20_array" value="61">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio30_array" value="62">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio40_array" value="63">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio50_array" value="64">
+			<Element id="/t_system_config/auc_mmio_sel" size="16" type="2"/>
+		</Option>
+		<Option id="mmio60_array" value="65">
+			<Element id="/t_system_config/auc_mmio_sel" size="11" type="2"/>
+		</Option>
+		<Option id="netx_mem_sdram" value="66">
+			<Element id="/tNetxMemSdram/ul_general_ctrl" size="4" type="0"/>
+			<Element id="/tNetxMemSdram/ul_timing_ctrl" size="4" type="0"/>
+			<Element id="/tNetxMemSdram/ul_mr" size="4" type="0"/>
+			<Element id="/tNetxMemSdram/us_sdram_setup_timeout_ms" size="2" type="0"/>
+		</Option>
+		<Option id="netx_mem_sdram_ctrl" value="67">
+			<Element id="/tNetxMemSdram/ul_general_ctrl" size="4" type="0"/>
+			<Element id="/tNetxMemSdram/ul_timing_ctrl" size="4" type="0"/>
+		</Option>
+		<Option id="netx_hif_sdram" value="68">
+			<Element id="/tNetxHifSdram/ul_general_ctrl" size="4" type="0"/>
+			<Element id="/tNetxHifSdram/ul_timing_ctrl" size="4" type="0"/>
+			<Element id="/tNetxHifSdram/ul_mr" size="4" type="0"/>
+			<Element id="/tNetxHifSdram/us_sdram_setup_timeout_ms" size="2" type="0"/>
+		</Option>
+		<Option id="netx_hif_sdram_ctrl" value="69">
+			<Element id="/tNetxHifSdram/ul_general_ctrl" size="4" type="0"/>
+			<Element id="/tNetxHifSdram/ul_timing_ctrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_hif_cs0" value="70">
+			<Element id="/tNetxHifSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_hif_cs1" value="71">
+			<Element id="/tNetxHifSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_hif_cs2" value="72">
+			<Element id="/tNetxHifSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_hif_cs3" value="73">
+			<Element id="/tNetxHifSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_hif_cfg" value="74">
+			<Element id="/tNetxHifSram/ulApmCtrl" size="4" type="0"/>
+			<Element id="/tNetxHifSram/ulRdyCfg" size="4" type="0"/>
+		</Option>
+		<Option id="sram_mem_cs0" value="75">
+			<Element id="/tNetxMemSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_mem_cs1" value="76">
+			<Element id="/tNetxMemSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_mem_cs2" value="77">
+			<Element id="/tNetxMemSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_mem_cs3" value="78">
+			<Element id="/tNetxMemSram/aulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_mem_cfg" value="79">
+			<Element id="/tNetxMemSram/ulApmCtrl" size="4" type="0"/>
+			<Element id="/tNetxMemSram/ulRdyCfg" size="4" type="0"/>
+		</Option>
+		<Option id="sram_current" value="80">
+			<Element id="/tNetxCurrentSram/ulCtrl" size="4" type="0"/>
+		</Option>
+		<Option id="sram_current_cfg" value="81">
+			<Element id="/tNetxCurrentSram/ulApmCtrl" size="4" type="0"/>
+			<Element id="/tNetxCurrentSram/ulRdyCfg" size="4" type="0"/>
+		</Option>
+		<Option id="pcie" value="82">
+			<Element id="/tPcieOptions/ulPowerUpTimeoutTicks" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulResetDelayTicks" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulVidPid" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulRevisionClassCode" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulSubVidSubPid" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulBaseAddressRegisterMask00Lower" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulBaseAddressRegisterMask00Upper" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulBaseSize00" size="4" type="0"/>
+			<Element id="/tPcieOptions/usSysctrlPcieCfg" size="2" type="0"/>
+			<Element id="/tPcieOptions/ucAcpCachePolicyPcie" size="1" type="0"/>
+			<Element id="/tPcieOptions/ucSupportedLinkSpeeds" size="1" type="0"/>
+		</Option>
+		<Option id="pcie_window0" value="83">
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowBase" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowMask" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiDestination" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_window1" value="84">
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowBase" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowMask" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiDestination" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_window2" value="85">
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowBase" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowMask" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiDestination" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_window3" value="86">
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowBase" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiWindowMask" size="4" type="0"/>
+			<Element id="/tPcieOptions/atWindowConfiguration/ulAxiDestination" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_timings" value="87">
+			<Element id="/tPcieOptions/ulPowerUpTimeoutTicks" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulResetDelayTicks" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_id" value="88">
+			<Element id="/tPcieOptions/ulVidPid" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulRevisionClassCode" size="4" type="0"/>
+			<Element id="/tPcieOptions/ulSubVidSubPid" size="4" type="0"/>
+		</Option>
+		<Option id="pcie_cfg" value="89">
+			<Element id="/tPcieOptions/usSysctrlPcieCfg" size="2" type="0"/>
+			<Element id="/tPcieOptions/ucAcpCachePolicyPcie" size="1" type="0"/>
+			<Element id="/tPcieOptions/ucSupportedLinkSpeeds" size="1" type="0"/>
+		</Option>
+		<Option id="nand" value="90">
+			<Element id="/tNand/aulId" size="8" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulPageSize" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulOobSize" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulPageUsableSize" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulPageMax" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulBlockMax" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulLunMax" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulAddressCyclesColumn" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulAddressCyclesRow" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tBusWidth" size="1" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulFlags" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/ulReadTimeoutMs" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_RC" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_WC" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_REA" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_WP" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_CLR" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_AR" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_RR" size="4" type="0"/>
+			<Element id="/tNand/tDeviceParameter/tTimingsNs/ulT_CEA" size="4" type="0"/>
+		</Option>
+		<Option id="nand_current" value="91">
+			<Element id="/tNandCurrent/ulPageSize" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulOobSize" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulPageUsableSize" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulPageMax" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulBlockMax" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulLunMax" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulAddressCyclesColumn" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulAddressCyclesRow" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulFlags" size="4" type="0"/>
+			<Element id="/tNandCurrent/ulReadTimeoutMs" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_RC" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_WC" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_REA" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_WP" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_CLR" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_AR" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_RR" size="4" type="0"/>
+			<Element id="/tNandCurrent/tTimingsNs/ulT_CEA" size="4" type="0"/>
+		</Option>
+		<Option id="nand_flags" value="92">
+			<Element id="/tNand/tDeviceParameter/ulFlags" size="4" type="0"/>
+		</Option>
+		<Option id="portcontrol" value="93">
+			<Element id="/tPortControlDefault/aus" size="6" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="12" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="4" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="30" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="22" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="16" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="32" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="24" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="4" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="28" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="24" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="2" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="2" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="2" type="2"/>
+			<Element id="/tPortControlDefault/aus" size="2" type="2"/>
+		</Option>
+		<Option id="rap_uart0" value="94">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+			<Element id="/at_rap_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_rap_uart/ausPortControl" size="8" type="0"/>
+		</Option>
+		<Option id="rap_uart0_baud_div" value="95">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+		</Option>
+		<Option id="rap_uart1" value="96">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+			<Element id="/at_rap_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_rap_uart/ausPortControl" size="8" type="0"/>
+		</Option>
+		<Option id="rap_uart1_baud_div" value="97">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+		</Option>
+		<Option id="rap_uart2" value="98">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+			<Element id="/at_rap_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_rap_uart/ausPortControl" size="8" type="0"/>
+		</Option>
+		<Option id="rap_uart2_baud_div" value="99">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+		</Option>
+		<Option id="rap_uart3" value="100">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+			<Element id="/at_rap_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_rap_uart/ausPortControl" size="8" type="0"/>
+		</Option>
+		<Option id="rap_uart3_baud_div" value="101">
+			<Element id="/at_rap_uart/ulBaudDiv" size="4" type="0"/>
+		</Option>
+		<Option id="sdio" value="102">
+			<Element id="/tSdioOptions/ulPowerUpTimeoutTicks" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulResetDelayTicks" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulInitialSpeedKHz" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulMaximumSpeedKHz" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulInitialClockGenerationUs" size="4" type="0"/>
+			<Element id="/tSdioOptions/ausPortControl" size="16" type="0"/>
+		</Option>
+		<Option id="sdio_cfg" value="103">
+			<Element id="/tSdioOptions/ulResetDelayTicks" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulInitialSpeedKHz" size="4" type="0"/>
+			<Element id="/tSdioOptions/ulInitialClockGenerationUs" size="4" type="0"/>
+		</Option>
+		<Option id="current_flash" value="104">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="current_flash_initial_speed" value="105">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="current_flash_portctrl" value="106">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="current_flash_io" value="107">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="current_flash_idle_mode" value="108">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="current_flash_speed_cmd" value="109">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="current_flash_speed" value="110">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="current_flash_speed_fifo" value="111">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="current_flash_cmd" value="112">
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="current_flash_cmd_atmel" value="113">
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash" value="114">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_initial_speed" value="115">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_portctrl" value="116">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_idle_mode" value="117">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_speed_cmd" value="118">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_speed" value="119">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_speed_fifo" value="120">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_speed_rom" value="121">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_cmd" value="122">
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_flash_cmd_atmel" value="123">
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash" value="124">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_initial_speed" value="125">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_portctrl" value="126">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_idle_mode" value="127">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_speed_cmd" value="128">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_speed" value="129">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_speed_fifo" value="130">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_speed_rom" value="131">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_cmd" value="132">
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_flash_cmd_atmel" value="133">
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_flash" value="134">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_flash_portctrl" value="135">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_flash_initial_speed" value="136">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_flash_io" value="137">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_flash_speed_cmd" value="138">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_flash" value="139">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_flash_initial_speed" value="140">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_flash_portctrl" value="141">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_flash_io" value="142">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_flash_speed_cmd" value="143">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_flash" value="144">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_flash_initial_speed" value="145">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_flash_portctrl" value="146">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_flash_io" value="147">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_flash_speed_cmd" value="148">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_flash" value="149">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_flash_initial_speed" value="150">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_flash_portctrl" value="151">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_flash_io" value="152">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_flash_speed_cmd" value="153">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_flash" value="154">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_flash_initial_speed" value="155">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_flash_portctrl" value="156">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_flash_io" value="157">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_flash_speed_cmd" value="158">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_flash" value="159">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_flash_initial_speed" value="160">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_flash_portctrl" value="161">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_flash_io" value="162">
+			<Element id="/atSpiFlashCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiFlashCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_flash_speed_cmd" value="163">
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInFifoMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/uiMaximumSpeedInRomMode_kHz" size="4" type="0"/>
+			<Element id="/atSpiFlashCfg/usAtmelDataflashPageSize" size="2" type="0"/>
+			<Element id="/atSpiFlashCfg/ucFlags" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommand" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandBusWidths" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandDummyBytes" size="1" type="0"/>
+			<Element id="/atSpiFlashCfg/ucReadCommandIdleCycles" size="1" type="0"/>
+		</Option>
+		<Option id="current_sdmmc_speed" value="164">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc" value="165">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc_speed" value="166">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc_buscfg" value="167">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc_idle_mode" value="168">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc_io" value="169">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_sdmmc_filename" value="170">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc" value="171">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc_speed" value="172">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc_buscfg" value="173">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc_idle_mode" value="174">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc_io" value="175">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_sdmmc_filename" value="176">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc" value="177">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc_speed" value="178">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc_buscfg" value="179">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc_idle_mode" value="180">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc_io" value="181">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs0_sdmmc_filename" value="182">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc" value="183">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc_speed" value="184">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc_buscfg" value="185">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc_idle_mode" value="186">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc_io" value="187">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs1_sdmmc_filename" value="188">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc" value="189">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc_speed" value="190">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc_buscfg" value="191">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc_idle_mode" value="192">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc_io" value="193">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi0_cs2_sdmmc_filename" value="194">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc" value="195">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc_speed" value="196">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc_buscfg" value="197">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc_idle_mode" value="198">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc_io" value="199">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs0_sdmmc_filename" value="200">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc" value="201">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc_speed" value="202">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc_buscfg" value="203">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc_idle_mode" value="204">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc_io" value="205">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs1_sdmmc_filename" value="206">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc" value="207">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc_speed" value="208">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc_buscfg" value="209">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ulInitialSpeedKhz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulSpeedLimitKHz" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGoIdleRetryDelayMs" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ulGetStatusRetries" size="4" type="0"/>
+			<Element id="/atSpiSdMmcCfg/ucInitialIdles" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc_idle_mode" value="210">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucDummyByte" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucMode" size="1" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ucIdleConfiguration" size="1" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc_io" value="211">
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/ausPortControl" size="12" type="0"/>
+			<Element id="/atSpiSdMmcCfg/tSpiCfg/aucMmio" size="4" type="0"/>
+		</Option>
+		<Option id="spi1_cs2_sdmmc_filename" value="212">
+			<Element id="/atSpiSdMmcCfg/atFileName" size="13" type="1"/>
+		</Option>
+		<Option id="sqi_current" value="213">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="sqi_current_rom_cfg" value="214">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+		</Option>
+		<Option id="sqi_current_activate" value="215">
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+		</Option>
+		<Option id="sqi_current_deactivate" value="216">
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="sqi0_cs0" value="217">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="sqi0_cs0_rom_cfg" value="218">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+		</Option>
+		<Option id="sqi0_cs0_activate" value="219">
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+		</Option>
+		<Option id="sqi0_cs0_deactivate" value="220">
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="sqi1_cs0" value="221">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="sqi1_cs0_rom_cfg" value="222">
+			<Element id="/atSqiRomOptions/ulSqiRomCfg" size="4" type="0"/>
+		</Option>
+		<Option id="sqi1_cs0_activate" value="223">
+			<Element id="/atSqiRomOptions/aucSeqActivate" size="64" type="1"/>
+		</Option>
+		<Option id="sqi1_cs0_deactivate" value="224">
+			<Element id="/atSqiRomOptions/aucSeqDeactivate" size="16" type="1"/>
+		</Option>
+		<Option id="uart0" value="225">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_rts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_cts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_uart/us_baud_div" size="2" type="0"/>
+			<Element id="/at_uart/uc_connect1" size="1" type="0"/>
+			<Element id="/at_uart/uc_connect2" size="1" type="0"/>
+		</Option>
+		<Option id="uart0_rx_tx" value="226">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+		</Option>
+		<Option id="uart0_mode_rts_cts" value="227">
+			<Element id="/at_uart/uMmio/s/uc_rts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_cts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uc_mode" size="1" type="0"/>
+		</Option>
+		<Option id="uart0_mode_baud_div" value="228">
+			<Element id="/at_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_uart/us_baud_div" size="2" type="0"/>
+		</Option>
+		<Option id="uart1" value="229">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_rts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_cts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_uart/us_baud_div" size="2" type="0"/>
+			<Element id="/at_uart/uc_connect1" size="1" type="0"/>
+			<Element id="/at_uart/uc_connect2" size="1" type="0"/>
+		</Option>
+		<Option id="uart1_rx_tx" value="230">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+		</Option>
+		<Option id="uart2" value="231">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_rts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_cts_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uc_mode" size="1" type="0"/>
+			<Element id="/at_uart/us_baud_div" size="2" type="0"/>
+			<Element id="/at_uart/uc_connect1" size="1" type="0"/>
+			<Element id="/at_uart/uc_connect2" size="1" type="0"/>
+		</Option>
+		<Option id="uart2_rx_tx" value="232">
+			<Element id="/at_uart/uMmio/s/uc_rx_mmio" size="1" type="0"/>
+			<Element id="/at_uart/uMmio/s/uc_tx_mmio" size="1" type="0"/>
+		</Option>
+		<Option id="usb_vendor_device_release" value="233">
+			<Element id="/t_usb/us_vendor_id" size="2" type="0"/>
+			<Element id="/t_usb/us_device_id" size="2" type="0"/>
+			<Element id="/t_usb/us_release_id" size="2" type="0"/>
+		</Option>
+		<Option id="usb_cc_mpc" value="234">
+			<Element id="/t_usb/uc_config_characteristics" size="1" type="0"/>
+			<Element id="/t_usb/uc_maximum_power_consumption" size="1" type="0"/>
+		</Option>
+		<Option id="usb_vendor" value="235">
+			<Element id="/t_usb/t_vendor_string" size="17" type="1"/>
+		</Option>
+		<Option id="usb_device" value="236">
+			<Element id="/t_usb/t_device_string" size="17" type="1"/>
+		</Option>
+		<Option id="usb_serial" value="237">
+			<Element id="/t_usb/t_serial_string" size="17" type="1"/>
+		</Option>
+	</Options>
+	<Definitions>
+		<Definition name="BOOTDEV_DPM_PAR" value="25"/>
+		<Definition name="BOOTDEV_DPM_SER" value="26"/>
+		<Definition name="BOOTDEV_ETH_GMAC" value="29"/>
+		<Definition name="BOOTDEV_ETH_INTPHY0" value="27"/>
+		<Definition name="BOOTDEV_ETH_INTPHY1" value="28"/>
+		<Definition name="BOOTDEV_ETH_LVDS0" value="30"/>
+		<Definition name="BOOTDEV_ETH_LVDS1" value="31"/>
+		<Definition name="BOOTDEV_IDPM0" value="36"/>
+		<Definition name="BOOTDEV_NONE" value="0"/>
+		<Definition name="BOOTDEV_PCIE" value="35"/>
+		<Definition name="BOOTDEV_PFL_HIF_CS0" value="21"/>
+		<Definition name="BOOTDEV_PFL_HIF_CS1" value="22"/>
+		<Definition name="BOOTDEV_PFL_HIF_CS2" value="23"/>
+		<Definition name="BOOTDEV_PFL_HIF_CS3" value="24"/>
+		<Definition name="BOOTDEV_PFL_MEM_CS0" value="17"/>
+		<Definition name="BOOTDEV_PFL_MEM_CS1" value="18"/>
+		<Definition name="BOOTDEV_PFL_MEM_CS2" value="19"/>
+		<Definition name="BOOTDEV_PFL_MEM_CS3" value="20"/>
+		<Definition name="BOOTDEV_PFL_NAND" value="32"/>
+		<Definition name="BOOTDEV_PFL_PL353_CS0" value="33"/>
+		<Definition name="BOOTDEV_PFL_PL353_CS1" value="34"/>
+		<Definition name="BOOTDEV_SDIO" value="37"/>
+		<Definition name="BOOTDEV_SPI0_FLASH_CS0" value="5"/>
+		<Definition name="BOOTDEV_SPI0_FLASH_CS1" value="6"/>
+		<Definition name="BOOTDEV_SPI0_FLASH_CS2" value="7"/>
+		<Definition name="BOOTDEV_SPI0_SDMMC_CS0" value="11"/>
+		<Definition name="BOOTDEV_SPI0_SDMMC_CS1" value="12"/>
+		<Definition name="BOOTDEV_SPI0_SDMMC_CS2" value="13"/>
+		<Definition name="BOOTDEV_SPI1_FLASH_CS0" value="8"/>
+		<Definition name="BOOTDEV_SPI1_FLASH_CS1" value="9"/>
+		<Definition name="BOOTDEV_SPI1_FLASH_CS2" value="10"/>
+		<Definition name="BOOTDEV_SPI1_SDMMC_CS0" value="14"/>
+		<Definition name="BOOTDEV_SPI1_SDMMC_CS1" value="15"/>
+		<Definition name="BOOTDEV_SPI1_SDMMC_CS2" value="16"/>
+		<Definition name="BOOTDEV_SQI0_FLASH_CS0" value="1"/>
+		<Definition name="BOOTDEV_SQI0_SDMMC_CS0" value="3"/>
+		<Definition name="BOOTDEV_SQI1_FLASH_CS0" value="2"/>
+		<Definition name="BOOTDEV_SQI1_SDMMC_CS0" value="4"/>
+		<Definition name="BOOTDEV_STOP_SIMU" value="255"/>
+		<Definition name="CONSOLE_DEVICE_DCC" value="6"/>
+		<Definition name="CONSOLE_DEVICE_ETH" value="5"/>
+		<Definition name="CONSOLE_DEVICE_NONE" value="0"/>
+		<Definition name="CONSOLE_DEVICE_RAPUART0" value="7"/>
+		<Definition name="CONSOLE_DEVICE_RAPUART1" value="8"/>
+		<Definition name="CONSOLE_DEVICE_RAPUART2" value="9"/>
+		<Definition name="CONSOLE_DEVICE_RAPUART3" value="10"/>
+		<Definition name="CONSOLE_DEVICE_UART0" value="1"/>
+		<Definition name="CONSOLE_DEVICE_UART1" value="2"/>
+		<Definition name="CONSOLE_DEVICE_UART2" value="3"/>
+		<Definition name="CONSOLE_DEVICE_USBDEV" value="4"/>
+		<Definition name="DDR_SETUP_COMMAND_DelayTicks" value="3"/>
+		<Definition name="DDR_SETUP_COMMAND_Nop" value="0"/>
+		<Definition name="DDR_SETUP_COMMAND_PollCtrl" value="5"/>
+		<Definition name="DDR_SETUP_COMMAND_PollPhy" value="4"/>
+		<Definition name="DDR_SETUP_COMMAND_WriteCtrl" value="2"/>
+		<Definition name="DDR_SETUP_COMMAND_WritePhy" value="1"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL0" value="0x20410000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL0_DRAM_CLASS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL0_START" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL0_VERSION" value="0x20410000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL10" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL101" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL101_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DELAY_4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DIR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL102" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL102_RDLVL_DELAY_4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL102_RDLVL_GATE_DELAY_4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL103" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL103_AXI0_ALL_STROBES_USED_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL103_AXI0_R_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL103_AXI0_W_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL103_AXI1_ALL_STROBES_USED_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL104" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL104_AXI1_R_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL104_AXI1_W_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL104_AXI2_ALL_STROBES_USED_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL104_AXI2_R_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL105" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL105_AXI2_W_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL105_AXI3_ALL_STROBES_USED_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL105_AXI3_R_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL105_AXI3_W_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL106" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL106_AXI4_ALL_STROBES_USED_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL106_AXI4_R_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL106_AXI4_W_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL106_WEIGHTED_ROUND_ROBIN_LATENCY_CONTROL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL107" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY0_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY1_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL107_WEIGHTED_ROUND_ROBIN_WEIGHT_SHARING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL107_WRR_PARAM_VALUE_ERR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL108" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL108_AXI0_PORT_ORDERING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY2_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY3_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL108_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL109" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL109_AXI0_PRIORITY_RELAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY0_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY1_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL10_ADDITIVE_LAT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL10_TBST_INT_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL10_TCCD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL10_WRLAT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL11" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL110" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL110_AXI1_PORT_ORDERING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY2_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY3_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL110_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL111" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL111_AXI1_PRIORITY_RELAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY0_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY1_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL112" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL112_AXI2_PORT_ORDERING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY2_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY3_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL112_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL113" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL113_AXI2_PRIORITY_RELAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY0_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY1_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL114" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL114_AXI3_PORT_ORDERING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY2_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY3_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL114_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL115" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL115_AXI3_PRIORITY_RELAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY0_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY1_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL116" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL116_AXI4_PORT_ORDERING" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY2_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY3_RELATIVE_PRIORITY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL116_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL117" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL117_AXI4_PRIORITY_RELAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL117_CKE_STATUS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL117_MEM_RST_VALID" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL118" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL118_DLL_RST_ADJ_DLY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL118_DLL_RST_DELAY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL118_TDFI_PHY_WRLAT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL119" value="0x00000600"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL119_DRAM_CLK_DISABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL119_TDFI_PHY_RDLAT" value="0x00000600"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL119_TDFI_RDDATA_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL119_UPDATE_ERROR_STATUS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL11_TRAS_MIN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL11_TRC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL11_TRRD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL11_TWTR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL12" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL120" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL120_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MIN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL121" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL122" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL123" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL123_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL123_TDFI_PHYUPD_RESP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL124" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL124_TDFI_CTRLUPD_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL125" value="0x00020000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY" value="0x00020000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL126" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL126_TDFI_DRAM_CLK_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_WW" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL127" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL127_TDFI_WRLVL_RESP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL128" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL128_TDFI_WRLVL_MAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL129" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL129_DFI_WRLVL_MAX_DELAY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_DLL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_RESPLAT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL12_TFAW" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL12_TMRD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL12_TRP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL12_TRTP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL13" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL130" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_DLL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_LOAD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL130_TDFI_WRLVL_LOAD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL131" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL131_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL131_RDLVL_MAX_DELAY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL131_TDFI_RDLVL_RESPLAT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL132" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL132_RDLVL_GATE_MAX_DELAY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL132_TDFI_RDLVL_RR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL133" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL133_TDFI_RDLVL_RESP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL134" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL134_RDLVL_RESP_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL135" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL135_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL135_RDLVL_RESP_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL136" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL136_RDLVL_GATE_RESP_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL137" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL137_RDLVL_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_PREAMBLE_CHECK_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_RESP_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL138" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL138_TDFI_RDLVL_MAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL139" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL139_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL139_RDLVL_DQ_0_COUNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL139_RDLVL_GATE_DQ_0_COUNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL13_TMOD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL13_TRAS_MAX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL14" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL141" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL141_RDLVL_GATE_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL141_RDLVL_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL142" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL142_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL142_TDFI_PHY_WRDATA" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL14_TCKE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL14_TCKESR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL14_TRCD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL14_WRITEINTERP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL15" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL150" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL150_AXI4_RDFIFO_LOG2_DEPTH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL150_AXI4_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL150_AXI4_WRFIFO_LOG2_DEPTH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL150_RESERVED3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL152" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL152_ECC_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_IN_PROGRESS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_START" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL152_ECC_WRITEBACK_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL153" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_LEN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_MODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL154" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL154_ECC_SCRUB_IDLE_CNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL154_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL155" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL155_ECC_SCRUB_START_ADDR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL156" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL156_ECC_SCRUB_END_ADDR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL157" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL157_BANK_ADDR_INTLV_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL157_BANK_START_BIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL157_LONG_COUNT_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL157_RESERVED3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL159" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL159_INT_ACK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL15_AP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL15_CONCURRENTAP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL15_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL15_TWR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL16" value="0x00020000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL160" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL160_INT_MASK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL161" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL161_AXI0_FIXED_PORT_PRIORITY_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL161_AXI1_FIXED_PORT_PRIORITY_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL161_AXI2_FIXED_PORT_PRIORITY_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL161_WR_TO_ODTH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL162" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL162_AXI3_FIXED_PORT_PRIORITY_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL162_AXI4_FIXED_PORT_PRIORITY_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL16_BSTLEN" value="0x00020000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL16_TDAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL16_TRAS_LOCKOUT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL16_TRP_AB" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL17" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL17_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL17_OPTIMAL_RMODW_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL17_REG_DIMM_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL17_RESERVED3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL18" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL18_AREFRESH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL18_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL18_RESERVED1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL18_TREF_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL19" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL19_TREF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL19_TRFC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL21" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL21_TPDEX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL21_TXPDLL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL22" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL22_TXARD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL22_TXARDS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL23" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL23_TXSNR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL23_TXSR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL24" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL24_CKE_DELAY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL24_ENABLE_QUICK_SREFRESH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL24_PWRUP_SREFRESH_EXIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL24_SREFRESH_EXIT_NO_REFRESH" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL25" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL25_CKSRE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL25_CKSRX" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL25_LOWPOWER_REFRESH_ENABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL25_LP_CMD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL26" value="0x00000020"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL26_LP_ARB_STATE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL26_LP_AUTO_ENTRY_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL26_LP_AUTO_EXIT_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL26_LP_STATE" value="0x00000020"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL27" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL27_LP_AUTO_MEM_GATE_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL27_LP_AUTO_PD_IDLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL27_LP_AUTO_SR_IDLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL28" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL28_LP_AUTO_SR_MC_GATE_IDLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL28_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL28_RESERVED1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL29" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL29_WRITE_MODEREG" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL2_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL2_TINIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL32" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL32_MR0_DATA_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL32_MR1_DATA_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL33" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL33_MR2_DATA_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL33_MRSINGLE_DATA_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL34" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL34_MR3_DATA_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL34_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL39" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL39_FWC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL39_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL40" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL40_XOR_CHECK_BITS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL41" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL41_ECC_DISABLE_W_UC_ERR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL41_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL49" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL49_ZQCL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL49_ZQINIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL50" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL50_ZQCS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL50_ZQ_ON_SREF_EXIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL50_ZQ_REQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL51" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL51_ZQ_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL53" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL53_BANK_DIFF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL53_COL_DIFF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL53_OBSOLETE0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL53_ROW_DIFF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL54" value="0x0000000a"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL54_ADDR_CMP_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL54_AGE_COUNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL54_APREBIT" value="0x0000000a"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL54_COMMAND_AGE_COUNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL55" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL55_BANK_SPLIT_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL55_PLACEMENT_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL55_PRIORITY_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL55_RW_SAME_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL56" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL56_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL56_RW_SAME_PAGE_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL57" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL57_DISABLE_RD_INTERLEAVE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL57_INHIBIT_DRAM_CMD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL57_NUM_Q_ENTRIES_ACT_DISABLE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL57_SWAP_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL58" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL58_BURST_ON_FLY_BIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL58_OBSOLETE0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL58_OBSOLETE3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL58_REDUC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL59" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL59_CONTROLLER_BUSY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL59_CTRLUPD_REQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL59_IN_ORDER_ACCEPT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL59_Q_FULLNESS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL6" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL60" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL60_CTRLUPD_REQ_PER_AREF_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL60_OBSOLETE1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL6_TRST_PWRON" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL7" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL70" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL70_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL70_ODT_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL70_TODTH_WR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL70_TODTL_2CMD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL73" value="0x00000200"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL73_R2R_SAMECS_DLY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL73_R2W_SAMECS_DLY" value="0x00000200"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL73_W2R_SAMECS_DLY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL73_W2W_SAMECS_DLY" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL74" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL74_OBSOLETE0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PDN_CS_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PUP_CS_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL75" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL75_SWLVL_EXIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL75_SWLVL_LOAD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL75_SWLVL_START" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL75_SW_LEVELING_MODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL78" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL78_WLDQSEN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL78_WLMRD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL78_WRLVL_CS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL78_WRLVL_REQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL79" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL79_RESERVED2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL79_WRLVL_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL79_WRLVL_INTERVAL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL7_CKE_INACTIVE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL8" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL80" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL80_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL80_WRLVL_ERROR_STATUS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL80_WRLVL_REG_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL81" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL82" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL83" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL83_RDLVL_GATE_REQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL83_RDLVL_REQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL83_WRLVL_DELAY_4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL84" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL84_RDLVL_BEGIN_DELAY_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL84_RDLVL_CS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL84_RDLVL_EDGE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL84_RDLVL_REG_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL85" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL85_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL85_RDLVL_BEGIN_DELAY_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL85_RDLVL_GATE_REG_EN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL87" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL87_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DELAY_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DIR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL88" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL88_RDLVL_DELAY_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL88_RDLVL_GATE_DELAY_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL8_INITAREF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL8_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL8_TCPD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL9" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL90" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL90_RDLVL_MIDPOINT_DELAY_1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL90_RDLVL_OFFSET_DELAY_1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL91" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL91_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL91_RDLVL_DELAY_1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL91_RDLVL_OFFSET_DIR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL92" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL92_RDLVL_BEGIN_DELAY_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL92_RDLVL_GATE_DELAY_1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL94" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL94_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DELAY_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DIR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL95" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL95_RDLVL_DELAY_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL95_RDLVL_GATE_DELAY_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL97" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL97_RDLVL_MIDPOINT_DELAY_3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL97_RDLVL_OFFSET_DELAY_3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL98" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL98_OBSOLETE2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL98_RDLVL_DELAY_3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL98_RDLVL_OFFSET_DIR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL99" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL99_RDLVL_BEGIN_DELAY_4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL99_RDLVL_GATE_DELAY_3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL9_CASLAT_LIN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL9_NO_CMD_INIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_CTRL_CTL9_TDLL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_DACNTUPD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_DDMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_HSLMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MDACNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MDACNTM" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MDLLOCK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MDLLSTBY" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MFSL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MSATFG" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_MSATMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_Reserved4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_DLLCTRL_SDLYCTRL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FIFOINIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FUNCCTRL" value="0x00000100"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_FUNCCTRL_IFSEL" value="0x00000100"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY1" value="0x18181818"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY1_MASKSDL0OFS" value="0x00000018"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY1_MASKSDL1OFS" value="0x00001800"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY1_MASKSDL2OFS" value="0x00180000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY1_MASKSDL3OFS" value="0x18000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY2" value="0x00000018"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_MASKSDLY2_MASKSDL4OFS" value="0x00000018"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL" value="0x1e0a0806"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_ADCMDOE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_CKEODTOE" value="0x00000002"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN" value="0x1c000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_DISOUT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_MBL" value="0x02000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_MRL" value="0x000a0000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_MWL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_OUTCTRL_RESETBOE" value="0x00000004"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL" value="0xe747e746"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PDQODTOFT" value="0x00070000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PDQODTONT" value="0x00400000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYBENOFT" value="0x00000700"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYBENONT" value="0x0000e000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYIENOFT" value="0x00000006"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYIENONT" value="0x00000040"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYODTOFT" value="0x07000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDCTRL_PHYODTONT" value="0xe0000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDTMG" value="0x000000b0"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDTMG_MASKSFT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDTMG_RDENVALID" value="0x000000b0"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDTMG_RDMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_RDTMG_WDOMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WL1OFS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WL2OFS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WLAUTO" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WLEN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WLSTATE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL1_WLSTR" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL2_WL3OFS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL2_WL4OFS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_WLCTRL2_WL5OFS" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL" value="0x00000082"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALGAP" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALINIT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL" value="0x00000080"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRUN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV" value="0x00000002"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ACODTN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ACODTSL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_CKODTEN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_EODTDQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU4" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU5" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_RFU6" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQCALENCNT" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQCALFL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQCAL_ERRER" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQENC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQENF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQEPC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQEPF" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQCODE_ZQUPD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL" value="0xaaaa8051"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE" value="0x80000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_DNVEN" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT" value="0x08000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_PHYODT" value="0x00000040"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN" value="0x00000010"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_SRCK" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_SRCMDAD" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_SRDQ" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN" value="0x20000000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_ZQCK" value="0x00280000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD" value="0x00028000"/>
+		<Definition name="DFLT_VAL_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA" value="0x02800000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P0_2_UDC" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_6" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_7" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_8" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_8_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_9" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P10_9_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_6" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_7" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P11_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_12" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_13" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_14" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_14_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_15" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_15_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P12_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P13_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P14_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_0" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_0_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_1" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_10" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_10_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_11" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_11_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_12" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_12_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_13" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_13_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_1_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_2" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_2_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_3" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_3_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_4" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_4_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_5" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_5_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_6" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_6_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_7" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_7_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_8" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_8_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_9" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_9_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P15_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_0" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_0_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_1" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_10" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_10_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_10_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_11" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_11_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_1_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_2" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_2_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_3" value="0x00000803"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_3_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_4" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_4_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_5" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_5_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_6" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_6_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_7" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_7_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_8" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_8_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_8_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_9" value="0x00000801"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_9_CTL" value="0x00000800"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P16_9_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_0_CTL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_2_CTL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P17_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P18_0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P18_0_CTL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P18_2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P18_2_CTL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P1_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P2_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_12" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_13" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_14" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_14_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_15" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_15_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P3_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_12" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_13" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_14" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_14_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_15" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_15_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P4_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_12" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_13" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_14" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_14_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_15" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_15_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P5_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_1" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_10" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_10_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_11" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_11_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_12" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_12_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_13" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_13_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_14" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_14_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_15" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_15_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_1_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_2" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_2_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_3" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_3_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_4" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_4_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_5" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_5_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_6" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_6_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_7" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_7_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_8" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_8_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_9" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P6_9_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_10" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_10_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_11" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_11_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_12" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_12_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_13" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_13_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_14" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_14_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_15" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_15_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_6" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_7" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_8" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_8_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_9" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P7_9_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_0" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_0_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_10" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_10_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_11" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_11_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_12" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_12_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_13" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_13_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_14" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_14_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_15" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_15_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_6" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_7" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_8" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_8_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_9" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P8_9_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_0" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_0_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_0_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_0_UDC" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_1" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_10" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_10_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_10_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_10_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_11" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_11_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_11_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_11_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_12" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_12_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_12_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_12_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_13" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_13_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_13_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_13_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_14" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_14_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_14_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_14_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_15" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_15_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_15_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_15_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_1_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_1_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_1_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_2" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_2_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_2_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_2_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_3" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_3_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_3_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_3_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_4" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_4_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_4_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_4_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_5" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_5_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_5_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_5_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_6" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_6_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_6_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_6_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_7" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_7_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_7_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_7_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_8" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_8_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_8_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_8_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_9" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_9_DRV" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_9_SEL" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_PORTCONTROL_P9_9_UDC" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_mmio_sel" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio0_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio100_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio100_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio100_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio100_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio100_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio101_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio101_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio101_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio101_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio101_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio102_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio102_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio102_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio102_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio102_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio103_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio103_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio103_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio103_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio103_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio104_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio104_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio104_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio104_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio104_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio105_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio105_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio105_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio105_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio105_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio106_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio106_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio106_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio106_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio106_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg" value="0x0000000a"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_mmio_sel" value="0x0000000a"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio10_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg" value="0x0000000b"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_mmio_sel" value="0x0000000b"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio11_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg" value="0x0000000c"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_mmio_sel" value="0x0000000c"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio12_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg" value="0x0000000d"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_mmio_sel" value="0x0000000d"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio13_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg" value="0x0000000e"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_mmio_sel" value="0x0000000e"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio14_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg" value="0x0000000f"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_mmio_sel" value="0x0000000f"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio15_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio16_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio17_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio18_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio19_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_mmio_sel" value="0x00000001"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio1_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio20_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio21_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio22_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio23_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio24_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio25_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio26_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio27_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio28_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio29_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg" value="0x00000002"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_mmio_sel" value="0x00000002"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio2_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio30_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio31_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio32_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio33_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio34_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio35_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio36_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio37_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio38_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio39_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_mmio_sel" value="0x00000003"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio3_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio40_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio41_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio42_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio43_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio44_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio45_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio46_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio47_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio48_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio49_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg" value="0x00000004"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_mmio_sel" value="0x00000004"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio4_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio50_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio51_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio52_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio53_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio54_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio55_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio56_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio57_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio58_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio59_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg" value="0x00000005"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_mmio_sel" value="0x00000005"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio5_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio60_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio61_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio62_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio63_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio64_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio64_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio64_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio64_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio64_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio65_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio65_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio65_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio65_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio65_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio66_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio66_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio66_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio66_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio66_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio67_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio67_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio67_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio67_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio67_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio68_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio68_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio68_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio68_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio68_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio69_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio69_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio69_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio69_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio69_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg" value="0x00000006"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_mmio_sel" value="0x00000006"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio6_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio70_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio70_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio70_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio70_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio70_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio71_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio71_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio71_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio71_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio71_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio72_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio72_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio72_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio72_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio72_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio73_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio73_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio73_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio73_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio73_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio74_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio74_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio74_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio74_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio74_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio75_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio75_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio75_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio75_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio75_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio76_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio76_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio76_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio76_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio76_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio77_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio77_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio77_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio77_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio77_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio78_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio78_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio78_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio78_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio78_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio79_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio79_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio79_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio79_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio79_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg" value="0x00000007"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_mmio_sel" value="0x00000007"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio7_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio80_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio80_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio80_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio80_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio80_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio81_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio81_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio81_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio81_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio81_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio82_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio82_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio82_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio82_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio82_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio83_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio83_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio83_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio83_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio83_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio84_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio84_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio84_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio84_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio84_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio85_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio85_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio85_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio85_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio85_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio86_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio86_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio86_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio86_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio86_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio87_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio87_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio87_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio87_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio87_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio88_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio88_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio88_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio88_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio88_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio89_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio89_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio89_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio89_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio89_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg" value="0x00000008"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_mmio_sel" value="0x00000008"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio8_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio90_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio90_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio90_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio90_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio90_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio91_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio91_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio91_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio91_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio91_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio92_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio92_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio92_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio92_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio92_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio93_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio93_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio93_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio93_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio93_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio94_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio94_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio94_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio94_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio94_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio95_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio95_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio95_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio95_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio95_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio96_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio96_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio96_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio96_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio96_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio97_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio97_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio97_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio97_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio97_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio98_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio98_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio98_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio98_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio98_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio99_cfg" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio99_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio99_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio99_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="DFLT_VAL_NX4000_mmio99_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg" value="0x00000009"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_mmio_in_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_mmio_out_inv" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_mmio_sel" value="0x00000009"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_pio_oe" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_pio_out" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio9_cfg_status_in_ro" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_cfg3_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_reset_cfg3_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_oe_line_set_cfg3_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_cfg3_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_reset_cfg3_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg0" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg0_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg1" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg1_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg2" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg2_line" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg3" value="0x00000000"/>
+		<Definition name="DFLT_VAL_NX4000_mmio_pio_out_line_set_cfg3_line" value="0x00000000"/>
+		<Definition name="MEMDEV_DDR" value="10"/>
+		<Definition name="MEMDEV_SDRAM_E" value="0"/>
+		<Definition name="MEMDEV_SDRAM_H" value="5"/>
+		<Definition name="MEMDEV_SRAM_E_CS0" value="1"/>
+		<Definition name="MEMDEV_SRAM_E_CS1" value="2"/>
+		<Definition name="MEMDEV_SRAM_E_CS2" value="3"/>
+		<Definition name="MEMDEV_SRAM_E_CS3" value="4"/>
+		<Definition name="MEMDEV_SRAM_H_CS0" value="6"/>
+		<Definition name="MEMDEV_SRAM_H_CS1" value="7"/>
+		<Definition name="MEMDEV_SRAM_H_CS2" value="8"/>
+		<Definition name="MEMDEV_SRAM_H_CS3" value="9"/>
+		<Definition name="MEMORY_WIDTH_08Bit" value="1"/>
+		<Definition name="MEMORY_WIDTH_16Bit" value="2"/>
+		<Definition name="MEMORY_WIDTH_32Bit" value="3"/>
+		<Definition name="MEMORY_WIDTH_Auto" value="4"/>
+		<Definition name="MEMORY_WIDTH_Off" value="0"/>
+		<Definition name="MMIO_CFG_CAN_RX" value="92"/>
+		<Definition name="MMIO_CFG_CAN_TX" value="93"/>
+		<Definition name="MMIO_CFG_EN_IN" value="57"/>
+		<Definition name="MMIO_CFG_GPIO0" value="0"/>
+		<Definition name="MMIO_CFG_GPIO1" value="1"/>
+		<Definition name="MMIO_CFG_GPIO10" value="10"/>
+		<Definition name="MMIO_CFG_GPIO11" value="11"/>
+		<Definition name="MMIO_CFG_GPIO12" value="12"/>
+		<Definition name="MMIO_CFG_GPIO13" value="13"/>
+		<Definition name="MMIO_CFG_GPIO14" value="14"/>
+		<Definition name="MMIO_CFG_GPIO15" value="15"/>
+		<Definition name="MMIO_CFG_GPIO2" value="2"/>
+		<Definition name="MMIO_CFG_GPIO3" value="3"/>
+		<Definition name="MMIO_CFG_GPIO4" value="4"/>
+		<Definition name="MMIO_CFG_GPIO5" value="5"/>
+		<Definition name="MMIO_CFG_GPIO6" value="6"/>
+		<Definition name="MMIO_CFG_GPIO7" value="7"/>
+		<Definition name="MMIO_CFG_GPIO8" value="8"/>
+		<Definition name="MMIO_CFG_GPIO9" value="9"/>
+		<Definition name="MMIO_CFG_I2C0_SCL" value="70"/>
+		<Definition name="MMIO_CFG_I2C0_SDA" value="71"/>
+		<Definition name="MMIO_CFG_I2C1_SCL" value="72"/>
+		<Definition name="MMIO_CFG_I2C1_SDA" value="73"/>
+		<Definition name="MMIO_CFG_I2C2_SCL" value="74"/>
+		<Definition name="MMIO_CFG_I2C2_SDA" value="75"/>
+		<Definition name="MMIO_CFG_IOLINK0_IN" value="16"/>
+		<Definition name="MMIO_CFG_IOLINK0_OE" value="18"/>
+		<Definition name="MMIO_CFG_IOLINK0_OUT" value="17"/>
+		<Definition name="MMIO_CFG_IOLINK0_WAKEUP" value="19"/>
+		<Definition name="MMIO_CFG_IOLINK1_IN" value="20"/>
+		<Definition name="MMIO_CFG_IOLINK1_OE" value="22"/>
+		<Definition name="MMIO_CFG_IOLINK1_OUT" value="21"/>
+		<Definition name="MMIO_CFG_IOLINK1_WAKEUP" value="23"/>
+		<Definition name="MMIO_CFG_IOLINK2_IN" value="24"/>
+		<Definition name="MMIO_CFG_IOLINK2_OE" value="26"/>
+		<Definition name="MMIO_CFG_IOLINK2_OUT" value="25"/>
+		<Definition name="MMIO_CFG_IOLINK2_WAKEUP" value="27"/>
+		<Definition name="MMIO_CFG_IOLINK3_IN" value="28"/>
+		<Definition name="MMIO_CFG_IOLINK3_OE" value="30"/>
+		<Definition name="MMIO_CFG_IOLINK3_OUT" value="29"/>
+		<Definition name="MMIO_CFG_IOLINK3_WAKEUP" value="31"/>
+		<Definition name="MMIO_CFG_IOLINK4_IN" value="32"/>
+		<Definition name="MMIO_CFG_IOLINK4_OE" value="34"/>
+		<Definition name="MMIO_CFG_IOLINK4_OUT" value="33"/>
+		<Definition name="MMIO_CFG_IOLINK4_WAKEUP" value="35"/>
+		<Definition name="MMIO_CFG_IOLINK5_IN" value="36"/>
+		<Definition name="MMIO_CFG_IOLINK5_OE" value="38"/>
+		<Definition name="MMIO_CFG_IOLINK5_OUT" value="37"/>
+		<Definition name="MMIO_CFG_IOLINK5_WAKEUP" value="39"/>
+		<Definition name="MMIO_CFG_IOLINK6_IN" value="40"/>
+		<Definition name="MMIO_CFG_IOLINK6_OE" value="42"/>
+		<Definition name="MMIO_CFG_IOLINK6_OUT" value="41"/>
+		<Definition name="MMIO_CFG_IOLINK6_WAKEUP" value="43"/>
+		<Definition name="MMIO_CFG_IOLINK7_IN" value="44"/>
+		<Definition name="MMIO_CFG_IOLINK7_OE" value="46"/>
+		<Definition name="MMIO_CFG_IOLINK7_OUT" value="45"/>
+		<Definition name="MMIO_CFG_IOLINK7_WAKEUP" value="47"/>
+		<Definition name="MMIO_CFG_MII_MDC" value="111"/>
+		<Definition name="MMIO_CFG_MII_MDIO" value="112"/>
+		<Definition name="MMIO_CFG_PHY0_LED_DPX" value="122"/>
+		<Definition name="MMIO_CFG_PHY0_LED_PHY_CTRL_ACT" value="120"/>
+		<Definition name="MMIO_CFG_PHY0_LED_PHY_CTRL_LNK" value="119"/>
+		<Definition name="MMIO_CFG_PHY0_LED_SPD" value="121"/>
+		<Definition name="MMIO_CFG_PHY1_LED_DPX" value="126"/>
+		<Definition name="MMIO_CFG_PHY1_LED_PHY_CTRL_ACT" value="124"/>
+		<Definition name="MMIO_CFG_PHY1_LED_PHY_CTRL_LNK" value="123"/>
+		<Definition name="MMIO_CFG_PHY1_LED_SPD" value="125"/>
+		<Definition name="MMIO_CFG_PHY2_LED_ACT" value="130"/>
+		<Definition name="MMIO_CFG_PHY2_LED_DPX" value="132"/>
+		<Definition name="MMIO_CFG_PHY2_LED_LNK" value="129"/>
+		<Definition name="MMIO_CFG_PHY2_LED_PHY_CTRL_ACT" value="128"/>
+		<Definition name="MMIO_CFG_PHY2_LED_PHY_CTRL_LNK" value="127"/>
+		<Definition name="MMIO_CFG_PHY2_LED_SPD" value="131"/>
+		<Definition name="MMIO_CFG_PHY3_LED_ACT" value="136"/>
+		<Definition name="MMIO_CFG_PHY3_LED_DPX" value="138"/>
+		<Definition name="MMIO_CFG_PHY3_LED_LNK" value="135"/>
+		<Definition name="MMIO_CFG_PHY3_LED_PHY_CTRL_ACT" value="134"/>
+		<Definition name="MMIO_CFG_PHY3_LED_PHY_CTRL_LNK" value="133"/>
+		<Definition name="MMIO_CFG_PHY3_LED_SPD" value="137"/>
+		<Definition name="MMIO_CFG_PIO" value="255"/>
+		<Definition name="MMIO_CFG_PIO0" value="48"/>
+		<Definition name="MMIO_CFG_PIO1" value="49"/>
+		<Definition name="MMIO_CFG_PIO2" value="50"/>
+		<Definition name="MMIO_CFG_PIO3" value="51"/>
+		<Definition name="MMIO_CFG_PIO4" value="52"/>
+		<Definition name="MMIO_CFG_PIO5" value="53"/>
+		<Definition name="MMIO_CFG_PIO6" value="54"/>
+		<Definition name="MMIO_CFG_PIO7" value="55"/>
+		<Definition name="MMIO_CFG_POS_ENC0_A" value="95"/>
+		<Definition name="MMIO_CFG_POS_ENC0_B" value="96"/>
+		<Definition name="MMIO_CFG_POS_ENC0_N" value="97"/>
+		<Definition name="MMIO_CFG_POS_ENC1_A" value="98"/>
+		<Definition name="MMIO_CFG_POS_ENC1_B" value="99"/>
+		<Definition name="MMIO_CFG_POS_ENC1_N" value="100"/>
+		<Definition name="MMIO_CFG_POS_MP0" value="101"/>
+		<Definition name="MMIO_CFG_POS_MP1" value="102"/>
+		<Definition name="MMIO_CFG_PWM_FAILURE_N" value="94"/>
+		<Definition name="MMIO_CFG_SPI0_CLK" value="58"/>
+		<Definition name="MMIO_CFG_SPI0_CS0N" value="59"/>
+		<Definition name="MMIO_CFG_SPI0_CS1N" value="60"/>
+		<Definition name="MMIO_CFG_SPI0_CS2N" value="61"/>
+		<Definition name="MMIO_CFG_SPI0_MISO" value="62"/>
+		<Definition name="MMIO_CFG_SPI0_MOSI" value="63"/>
+		<Definition name="MMIO_CFG_SPI1_CLK" value="64"/>
+		<Definition name="MMIO_CFG_SPI1_CS0N" value="65"/>
+		<Definition name="MMIO_CFG_SPI1_CS1N" value="66"/>
+		<Definition name="MMIO_CFG_SPI1_CS2N" value="67"/>
+		<Definition name="MMIO_CFG_SPI1_MISO" value="68"/>
+		<Definition name="MMIO_CFG_SPI1_MOSI" value="69"/>
+		<Definition name="MMIO_CFG_UART0_CTSN" value="76"/>
+		<Definition name="MMIO_CFG_UART0_RTSN" value="77"/>
+		<Definition name="MMIO_CFG_UART0_RXD" value="78"/>
+		<Definition name="MMIO_CFG_UART0_TXD" value="79"/>
+		<Definition name="MMIO_CFG_UART1_CTSN" value="80"/>
+		<Definition name="MMIO_CFG_UART1_RTSN" value="81"/>
+		<Definition name="MMIO_CFG_UART1_RXD" value="82"/>
+		<Definition name="MMIO_CFG_UART1_TXD" value="83"/>
+		<Definition name="MMIO_CFG_UART2_CTSN" value="84"/>
+		<Definition name="MMIO_CFG_UART2_RTSN" value="85"/>
+		<Definition name="MMIO_CFG_UART2_RXD" value="86"/>
+		<Definition name="MMIO_CFG_UART2_TXD" value="87"/>
+		<Definition name="MMIO_CFG_UART_XPIC3_CTSN" value="88"/>
+		<Definition name="MMIO_CFG_UART_XPIC3_RTSN" value="89"/>
+		<Definition name="MMIO_CFG_UART_XPIC3_RXD" value="90"/>
+		<Definition name="MMIO_CFG_UART_XPIC3_TXD" value="91"/>
+		<Definition name="MMIO_CFG_WDG_ACTIVE" value="56"/>
+		<Definition name="MMIO_CFG_XC0_SAMPLE0" value="103"/>
+		<Definition name="MMIO_CFG_XC0_SAMPLE1" value="104"/>
+		<Definition name="MMIO_CFG_XC0_TRIGGER0" value="105"/>
+		<Definition name="MMIO_CFG_XC0_TRIGGER1" value="106"/>
+		<Definition name="MMIO_CFG_XC1_SAMPLE0" value="107"/>
+		<Definition name="MMIO_CFG_XC1_SAMPLE1" value="108"/>
+		<Definition name="MMIO_CFG_XC1_TRIGGER0" value="109"/>
+		<Definition name="MMIO_CFG_XC1_TRIGGER1" value="110"/>
+		<Definition name="MMIO_CFG_XM00_IO0" value="139"/>
+		<Definition name="MMIO_CFG_XM00_IO1" value="140"/>
+		<Definition name="MMIO_CFG_XM00_IO2" value="141"/>
+		<Definition name="MMIO_CFG_XM00_IO3" value="142"/>
+		<Definition name="MMIO_CFG_XM00_IO4" value="143"/>
+		<Definition name="MMIO_CFG_XM00_IO5" value="144"/>
+		<Definition name="MMIO_CFG_XM00_RX" value="145"/>
+		<Definition name="MMIO_CFG_XM00_TX_OUT" value="146"/>
+		<Definition name="MMIO_CFG_XM01_IO0" value="147"/>
+		<Definition name="MMIO_CFG_XM01_IO1" value="148"/>
+		<Definition name="MMIO_CFG_XM01_IO2" value="149"/>
+		<Definition name="MMIO_CFG_XM01_IO3" value="150"/>
+		<Definition name="MMIO_CFG_XM01_IO4" value="151"/>
+		<Definition name="MMIO_CFG_XM01_IO5" value="152"/>
+		<Definition name="MMIO_CFG_XM01_RX" value="153"/>
+		<Definition name="MMIO_CFG_XM01_TX_OUT" value="154"/>
+		<Definition name="MMIO_CFG_XM10_IO0" value="155"/>
+		<Definition name="MMIO_CFG_XM10_IO1" value="156"/>
+		<Definition name="MMIO_CFG_XM10_IO2" value="157"/>
+		<Definition name="MMIO_CFG_XM10_IO3" value="158"/>
+		<Definition name="MMIO_CFG_XM10_IO4" value="159"/>
+		<Definition name="MMIO_CFG_XM10_IO5" value="160"/>
+		<Definition name="MMIO_CFG_XM10_MII_IRQ" value="117"/>
+		<Definition name="MMIO_CFG_XM10_MII_MDC" value="113"/>
+		<Definition name="MMIO_CFG_XM10_MII_MDIO" value="114"/>
+		<Definition name="MMIO_CFG_XM10_RX" value="161"/>
+		<Definition name="MMIO_CFG_XM10_TX_OUT" value="162"/>
+		<Definition name="MMIO_CFG_XM11_IO0" value="163"/>
+		<Definition name="MMIO_CFG_XM11_IO1" value="164"/>
+		<Definition name="MMIO_CFG_XM11_IO2" value="165"/>
+		<Definition name="MMIO_CFG_XM11_IO3" value="166"/>
+		<Definition name="MMIO_CFG_XM11_IO4" value="167"/>
+		<Definition name="MMIO_CFG_XM11_IO5" value="168"/>
+		<Definition name="MMIO_CFG_XM11_MII_IRQ" value="118"/>
+		<Definition name="MMIO_CFG_XM11_MII_MDC" value="115"/>
+		<Definition name="MMIO_CFG_XM11_MII_MDIO" value="116"/>
+		<Definition name="MMIO_CFG_XM11_RX" value="169"/>
+		<Definition name="MMIO_CFG_XM11_TX_OUT" value="170"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL0_DRAM_CLASS" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL0_START" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL0_VERSION" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL100_RDLVL_END_DELAY_4" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL100_RDLVL_MIDPOINT_DELAY_4" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL101_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DELAY_4" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DIR" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL102_RDLVL_DELAY_4" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL102_RDLVL_GATE_DELAY_4" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL103_AXI0_ALL_STROBES_USED_ENABLE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL103_AXI0_R_PRIORITY" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL103_AXI0_W_PRIORITY" value="0x00030000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL103_AXI1_ALL_STROBES_USED_ENABLE" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL104_AXI1_R_PRIORITY" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL104_AXI1_W_PRIORITY" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL104_AXI2_ALL_STROBES_USED_ENABLE" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL104_AXI2_R_PRIORITY" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL105_AXI2_W_PRIORITY" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL105_AXI3_ALL_STROBES_USED_ENABLE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL105_AXI3_R_PRIORITY" value="0x00030000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL105_AXI3_W_PRIORITY" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL106_AXI4_ALL_STROBES_USED_ENABLE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL106_AXI4_R_PRIORITY" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL106_AXI4_W_PRIORITY" value="0x00030000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL106_WEIGHTED_ROUND_ROBIN_LATENCY_CONTROL" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY0_RELATIVE_PRIORITY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY1_RELATIVE_PRIORITY" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL107_WEIGHTED_ROUND_ROBIN_WEIGHT_SHARING" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL107_WRR_PARAM_VALUE_ERR" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL108_AXI0_PORT_ORDERING" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY2_RELATIVE_PRIORITY" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY3_RELATIVE_PRIORITY" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL108_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL109_AXI0_PRIORITY_RELAX" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY0_RELATIVE_PRIORITY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY1_RELATIVE_PRIORITY" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL10_ADDITIVE_LAT" value="0x00001f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL10_TBST_INT_INTERVAL" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL10_TCCD" value="0x1f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL10_WRLAT" value="0x0000001f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL110_AXI1_PORT_ORDERING" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY2_RELATIVE_PRIORITY" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY3_RELATIVE_PRIORITY" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL110_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL111_AXI1_PRIORITY_RELAX" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY0_RELATIVE_PRIORITY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY1_RELATIVE_PRIORITY" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL112_AXI2_PORT_ORDERING" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY2_RELATIVE_PRIORITY" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY3_RELATIVE_PRIORITY" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL112_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL113_AXI2_PRIORITY_RELAX" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY0_RELATIVE_PRIORITY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY1_RELATIVE_PRIORITY" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL114_AXI3_PORT_ORDERING" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY2_RELATIVE_PRIORITY" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY3_RELATIVE_PRIORITY" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL114_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL115_AXI3_PRIORITY_RELAX" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY0_RELATIVE_PRIORITY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY1_RELATIVE_PRIORITY" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL116_AXI4_PORT_ORDERING" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY2_RELATIVE_PRIORITY" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY3_RELATIVE_PRIORITY" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL116_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL117_AXI4_PRIORITY_RELAX" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL117_CKE_STATUS" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL117_MEM_RST_VALID" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL118_DLL_RST_ADJ_DLY" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL118_DLL_RST_DELAY" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL118_TDFI_PHY_WRLAT" value="0x3f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL119_DRAM_CLK_DISABLE" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL119_TDFI_PHY_RDLAT" value="0x00003f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL119_TDFI_RDDATA_EN" value="0x003f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL119_UPDATE_ERROR_STATUS" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL11_TRAS_MIN" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL11_TRC" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL11_TRRD" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL11_TWTR" value="0x3f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL120_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MAX" value="0x003fff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MIN" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE2" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE3" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL123_OBSOLETE1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL123_TDFI_PHYUPD_RESP" value="0x00003fff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL124_TDFI_CTRLUPD_INTERVAL" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ" value="0x0000003f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ" value="0x00003f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL126_TDFI_DRAM_CLK_ENABLE" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_EN" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_WW" value="0x03ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL127_TDFI_WRLVL_RESP" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL128_TDFI_WRLVL_MAX" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL129_DFI_WRLVL_MAX_DELAY" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_DLL" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_RESPLAT" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL12_TFAW" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL12_TMRD" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL12_TRP" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL12_TRTP" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_DLL" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_EN" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_LOAD" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL130_TDFI_WRLVL_LOAD" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL131_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL131_RDLVL_MAX_DELAY" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL131_TDFI_RDLVL_RESPLAT" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL132_RDLVL_GATE_MAX_DELAY" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL132_TDFI_RDLVL_RR" value="0x03ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL133_TDFI_RDLVL_RESP" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL134_RDLVL_RESP_MASK" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL135_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL135_RDLVL_RESP_MASK" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL136_RDLVL_GATE_RESP_MASK" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL137_RDLVL_EN" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_PREAMBLE_CHECK_EN" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_RESP_MASK" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL138_TDFI_RDLVL_MAX" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL139_OBSOLETE2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL139_RDLVL_DQ_0_COUNT" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL139_RDLVL_GATE_DQ_0_COUNT" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL13_TMOD" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL13_TRAS_MAX" value="0x01ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL140_OBSOLETE1" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL140_RDLVL_ERROR_STATUS" value="0x003fffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL141_RDLVL_GATE_INTERVAL" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL141_RDLVL_INTERVAL" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL142_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL142_TDFI_PHY_WRDATA" value="0x00000007"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL143_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL144_READ_DATA_FIFO_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL144_READ_DATA_FIFO_PTR_WIDTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL144_WRITE_DATA_FIFO_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL144_WRITE_DATA_FIFO_PTR_WIDTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL145_ASYNC_CDC_STAGES" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL145_AXI0_CMDFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL145_MEMCD_RMODW_FIFO_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL145_MEMCD_RMODW_FIFO_PTR_WIDTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL146_AXI0_RDFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL146_AXI0_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL146_AXI0_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL146_AXI1_CMDFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL147_AXI1_RDFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL147_AXI1_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL147_AXI1_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL147_AXI2_CMDFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL148_AXI2_RDFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL148_AXI2_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL148_AXI2_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL148_AXI3_CMDFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL149_AXI3_RDFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL149_AXI3_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL149_AXI3_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL149_AXI4_CMDFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL14_TCKE" value="0x00000007"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL14_TCKESR" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL14_TRCD" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL14_WRITEINTERP" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL150_AXI4_RDFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL150_AXI4_WRCMD_PROC_FIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL150_AXI4_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL150_RESERVED3" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL151_AXI1_TRANS_WRFIFO_LOG2_DEPTH" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL151_AXI2_TRANS_WRFIFO_LOG2_DEPTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL151_AXI3_TRANS_WRFIFO_LOG2_DEPTH" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL151_AXI4_TRANS_WRFIFO_LOG2_DEPTH" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL152_ECC_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_IN_PROGRESS" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_START" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL152_ECC_WRITEBACK_EN" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_INTERVAL" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_LEN" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_MODE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL154_ECC_SCRUB_IDLE_CNT" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL154_OBSOLETE1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL155_ECC_SCRUB_START_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL156_ECC_SCRUB_END_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL157_BANK_ADDR_INTLV_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL157_BANK_START_BIT" value="0x00001f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL157_LONG_COUNT_MASK" value="0x0000001f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL157_RESERVED3" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL158_INT_STATUS" value="0x03ffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL159_INT_ACK" value="0x01ffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL15_AP" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL15_CONCURRENTAP" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL15_OBSOLETE1" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL15_TWR" value="0x0000003f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL160_INT_MASK" value="0x03ffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL161_AXI0_FIXED_PORT_PRIORITY_ENABLE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL161_AXI1_FIXED_PORT_PRIORITY_ENABLE" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL161_AXI2_FIXED_PORT_PRIORITY_ENABLE" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL161_WR_TO_ODTH" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL162_AXI3_FIXED_PORT_PRIORITY_ENABLE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL162_AXI4_FIXED_PORT_PRIORITY_ENABLE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL16_BSTLEN" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL16_TDAL" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL16_TRAS_LOCKOUT" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL16_TRP_AB" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL17_OBSOLETE1" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL17_OPTIMAL_RMODW_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL17_REG_DIMM_ENABLE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL17_RESERVED3" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL18_AREFRESH" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL18_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL18_RESERVED1" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL18_TREF_ENABLE" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL19_TREF" value="0x3fff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL19_TRFC" value="0x000003ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL1_MAX_COL_REG" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL1_MAX_CS_REG" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL1_MAX_ROW_REG" value="0x0000001f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL1_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL20_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL21_TPDEX" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL21_TXPDLL" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL22_TXARD" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL22_TXARDS" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL23_TXSNR" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL23_TXSR" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL24_CKE_DELAY" value="0x07000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL24_ENABLE_QUICK_SREFRESH" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL24_PWRUP_SREFRESH_EXIT" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL24_SREFRESH_EXIT_NO_REFRESH" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL25_CKSRE" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL25_CKSRX" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL25_LOWPOWER_REFRESH_ENABLE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL25_LP_CMD" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL26_LP_ARB_STATE" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL26_LP_AUTO_ENTRY_EN" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL26_LP_AUTO_EXIT_EN" value="0x07000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL26_LP_STATE" value="0x0000003f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL27_LP_AUTO_MEM_GATE_EN" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL27_LP_AUTO_PD_IDLE" value="0x000fff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL27_LP_AUTO_SR_IDLE" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL28_LP_AUTO_SR_MC_GATE_IDLE" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL28_OBSOLETE2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL28_RESERVED1" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL29_WRITE_MODEREG" value="0x07ffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL2_OBSOLETE1" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL2_TINIT" value="0x00ffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL30_MRW_STATUS" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL30_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL31_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL32_MR0_DATA_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL32_MR1_DATA_0" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL33_MR2_DATA_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL33_MRSINGLE_DATA_0" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL34_MR3_DATA_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL34_OBSOLETE1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL35_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL36_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL37_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL38_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL39_FWC" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL39_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL3_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL40_XOR_CHECK_BITS" value="0x0fffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL41_ECC_DISABLE_W_UC_ERR" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL41_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL42_ECC_U_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL43_ECC_U_SYND" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL43_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL43_OBSOLETE2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL44_ECC_U_DATA" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL45_ECC_C_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL46_ECC_C_SYND" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL46_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL46_OBSOLETE2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL47_ECC_C_DATA" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL48_ECC_C_ID" value="0x07ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL48_ECC_U_ID" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL49_ZQCL" value="0x0fff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL49_ZQINIT" value="0x00000fff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL4_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL50_ZQCS" value="0x00000fff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL50_ZQ_ON_SREF_EXIT" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL50_ZQ_REQ" value="0x00030000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL51_ZQ_INTERVAL" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL52_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL52_ZQ_IN_PROGRESS" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL53_BANK_DIFF" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL53_COL_DIFF" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL53_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL53_ROW_DIFF" value="0x00070000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL54_ADDR_CMP_EN" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL54_AGE_COUNT" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL54_APREBIT" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL54_COMMAND_AGE_COUNT" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL55_BANK_SPLIT_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL55_PLACEMENT_EN" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL55_PRIORITY_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL55_RW_SAME_EN" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL56_OBSOLETE1" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL56_RW_SAME_PAGE_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL57_DISABLE_RD_INTERLEAVE" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL57_INHIBIT_DRAM_CMD" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL57_NUM_Q_ENTRIES_ACT_DISABLE" value="0x00000007"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL57_SWAP_EN" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL58_BURST_ON_FLY_BIT" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL58_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL58_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL58_REDUC" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL59_CONTROLLER_BUSY" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL59_CTRLUPD_REQ" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL59_IN_ORDER_ACCEPT" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL59_Q_FULLNESS" value="0x00000007"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL5_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL60_CTRLUPD_REQ_PER_AREF_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL60_OBSOLETE1" value="0xffffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL61_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL62_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL63_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL64_OUT_OF_RANGE_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL65_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL65_OBSOLETE3" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL65_OUT_OF_RANGE_LENGTH" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL65_OUT_OF_RANGE_TYPE" value="0x007f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL66_OBSOLETE1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL66_OUT_OF_RANGE_SOURCE_ID" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL67_PORT_CMD_ERROR_ADDR" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL68_OBSOLETE0" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL68_PORT_CMD_ERROR_ID" value="0x0007ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL68_PORT_CMD_ERROR_TYPE" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL69_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL6_TRST_PWRON" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL70_OBSOLETE2" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL70_ODT_EN" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL70_TODTH_WR" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL70_TODTL_2CMD" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL71_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL72_OBSOLETE0" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL73_R2R_SAMECS_DLY" value="0x0000001f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL73_R2W_SAMECS_DLY" value="0x00001f00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL73_W2R_SAMECS_DLY" value="0x001f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL73_W2W_SAMECS_DLY" value="0x1f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL74_OBSOLETE0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PDN_CS_0" value="0x001f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PUP_CS_0" value="0x1f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL75_SWLVL_EXIT" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL75_SWLVL_LOAD" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL75_SWLVL_START" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL75_SW_LEVELING_MODE" value="0x00000007"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL76_LVL_STATUS" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL76_OBSOLETE1" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL76_SWLVL_OP_DONE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL76_SWLVL_RESP_0" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_1" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_2" value="0x0000ff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_3" value="0x00ff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_4" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL78_WLDQSEN" value="0x003f0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL78_WLMRD" value="0x3f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL78_WRLVL_CS" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL78_WRLVL_REQ" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL79_RESERVED2" value="0x1f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL79_WRLVL_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL79_WRLVL_INTERVAL" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL7_CKE_INACTIVE" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL80_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL80_WRLVL_ERROR_STATUS" value="0x00000fff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL80_WRLVL_REG_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_2" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_3" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL83_RDLVL_GATE_REQ" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL83_RDLVL_REQ" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL83_WRLVL_DELAY_4" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL84_RDLVL_BEGIN_DELAY_EN" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL84_RDLVL_CS" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL84_RDLVL_EDGE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL84_RDLVL_REG_EN" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL85_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL85_RDLVL_BEGIN_DELAY_0" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL85_RDLVL_GATE_REG_EN" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL86_RDLVL_END_DELAY_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL86_RDLVL_MIDPOINT_DELAY_0" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL87_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DELAY_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DIR" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL88_RDLVL_DELAY_0" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL88_RDLVL_GATE_DELAY_0" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL89_RDLVL_BEGIN_DELAY_1" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL89_RDLVL_END_DELAY_1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL8_INITAREF" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL8_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL8_TCPD" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL90_RDLVL_MIDPOINT_DELAY_1" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL90_RDLVL_OFFSET_DELAY_1" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL91_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL91_RDLVL_DELAY_1" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL91_RDLVL_OFFSET_DIR" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL92_RDLVL_BEGIN_DELAY_2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL92_RDLVL_GATE_DELAY_1" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL93_RDLVL_END_DELAY_2" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL93_RDLVL_MIDPOINT_DELAY_2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL94_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DELAY_2" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DIR" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL95_RDLVL_DELAY_2" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL95_RDLVL_GATE_DELAY_2" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL96_RDLVL_BEGIN_DELAY_3" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL96_RDLVL_END_DELAY_3" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL97_RDLVL_MIDPOINT_DELAY_3" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL97_RDLVL_OFFSET_DELAY_3" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL98_OBSOLETE2" value="0xff000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL98_RDLVL_DELAY_3" value="0x00ffff00"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL98_RDLVL_OFFSET_DIR" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL99_RDLVL_BEGIN_DELAY_4" value="0xffff0000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL99_RDLVL_GATE_DELAY_3" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL9_CASLAT_LIN" value="0x3f000000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL9_NO_CMD_INIT" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_CTRL_CTL9_TDLL" value="0x0000ffff"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_DACNTUPD" value="0x00100000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_DDMODE" value="0x00000008"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_HSLMODE" value="0x00000020"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MDACNT" value="0x0003ff00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MDACNTM" value="0x00400000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MDLLOCK" value="0x02000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MDLLSTBY" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MFSL" value="0x00000006"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MSATFG" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_MSATMODE" value="0x00000010"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_Reserved4" value="0xfc000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_DLLCTRL_SDLYCTRL" value="0x00200000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_FUNCCTRL_IFSEL" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_PHY_MASKSDLY1_MASKSDL0OFS" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_PHY_MASKSDLY1_MASKSDL1OFS" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_MASKSDLY1_MASKSDL2OFS" value="0x007f0000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_MASKSDLY1_MASKSDL3OFS" value="0x7f000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_MASKSDLY2_MASKSDL4OFS" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_ADCMDOE" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_CKEODTOE" value="0x00000002"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN" value="0x1c000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_DISOUT" value="0x00000030"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_MBL" value="0x03000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_MRL" value="0x001f0000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_MWL" value="0x00001f00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_OUTCTRL_RESETBOE" value="0x00000004"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PDQODTOFT" value="0x000f0000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PDQODTONT" value="0x00f00000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYBENOFT" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYBENONT" value="0x0000f000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYIENOFT" value="0x0000000f"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYIENONT" value="0x000000f0"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYODTOFT" value="0x0f000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDCTRL_PHYODTONT" value="0xf0000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDTMG_MASKSFT" value="0x00000200"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDTMG_RDENVALID" value="0x000000f0"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDTMG_RDMODE" value="0x00000100"/>
+		<Definition name="MSK_NX4000_DDR_PHY_RDTMG_WDOMODE" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WL1OFS" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WL2OFS" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WLAUTO" value="0x40000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WLEN" value="0x80000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WLSTATE" value="0x06000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL1_WLSTR" value="0x01000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL2_WL3OFS" value="0x0000007f"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL2_WL4OFS" value="0x00007f00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_WLCTRL2_WL5OFS" value="0x007f0000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND" value="0x40000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALGAP" value="0x20000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALINIT" value="0x00004000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL" value="0x000000f0"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE" value="0x00000004"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNC" value="0x00380000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNF" value="0x00078000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPC" value="0x1c000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPF" value="0x03c00000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRUN" value="0x80000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV" value="0x00000002"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD" value="0x00000c00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ACODTN" value="0x00002000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ACODTSL" value="0x000000c0"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_CKODTEN" value="0x00001000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_EODTDQ" value="0x00000002"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU1" value="0x00000800"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU2" value="0x00000400"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU3" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU4" value="0x00000030"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU5" value="0x00000008"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_RFU6" value="0x00000004"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQCALENCNT" value="0x00000001"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQCALFL" value="0x0000c000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQCAL_ERRER" value="0x00020000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQENC" value="0x01c00000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQENF" value="0x003c0000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQEPC" value="0xe0000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQEPF" value="0x1e000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQCODE_ZQUPD" value="0x00010000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE" value="0xc0000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_DNVEN" value="0x00000008"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF" value="0x00000003"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT" value="0x18000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_PHYODT" value="0x00000060"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN" value="0x00000010"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_SRCK" value="0x00000c00"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_SRCMDAD" value="0x00000300"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_SRDQ" value="0x00003000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN" value="0x20000000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_ZQCK" value="0x00780000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD" value="0x00078000"/>
+		<Definition name="MSK_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA" value="0x07800000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P0_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_0_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_1_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_2_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_9_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P10_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_0_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_1_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_2_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_3_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_4_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_5_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_6_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_7_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P11_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_0_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_11_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_12_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_13_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_14_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_15_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_9_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P12_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_0_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_11_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_9_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P13_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_0_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_1_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P14_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_0_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_0_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_10_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_10_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_11_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_11_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_12_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_12_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_13_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_13_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_1_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_1_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_2_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_2_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_3_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_3_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_4_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_4_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_5_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_5_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_6_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_6_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_7_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_7_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_8_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_8_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_9_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_9_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P15_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_0_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_0_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_10_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_10_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_11_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_11_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_1_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_1_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_2_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_2_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_3_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_3_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_4_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_4_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_5_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_5_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_6_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_6_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_7_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_7_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_8_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_8_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_9_CTL" value="0x00000f00"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_9_SEL" value="0x00007000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P16_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P17_0_CTL" value="0x00000300"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P17_0_DRV" value="0x00000070"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P17_2_CTL" value="0x00000300"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P17_2_DRV" value="0x00000070"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P18_0_CTL" value="0x00000100"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P18_2_CTL" value="0x00000100"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P1_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_0_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_1_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P2_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_10_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_11_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_12_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_13_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_14_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_15_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_1_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_3_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_4_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_5_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_6_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_7_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_8_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_9_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P3_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_0_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_11_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_12_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_13_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_14_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_15_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_9_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P4_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_0_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_11_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_12_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_13_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_14_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_15_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_9_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P5_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_0_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_10_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_11_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_12_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_13_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_14_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_15_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_9_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P6_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_0_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_10_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_11_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_12_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_13_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_14_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_1_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_2_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_3_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_4_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_5_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_6_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_7_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_8_SEL" value="0x00003000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_9_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P7_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_0_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_10_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_11_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_12_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_13_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_14_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_15_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_1_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_2_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_3_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_4_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_5_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_6_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_7_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_8_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_9_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P8_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_0_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_0_SEL" value="0x00001000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_0_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_10_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_10_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_10_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_11_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_11_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_11_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_12_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_12_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_12_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_13_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_13_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_13_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_14_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_14_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_14_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_15_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_15_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_15_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_1_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_1_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_1_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_2_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_2_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_2_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_3_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_3_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_3_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_4_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_4_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_4_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_5_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_5_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_5_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_6_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_6_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_6_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_7_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_7_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_7_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_8_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_8_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_8_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_9_DRV" value="0x00000030"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_9_SEL" value="0x00002000"/>
+		<Definition name="MSK_NX4000_PORTCONTROL_P9_9_UDC" value="0x00000003"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio0_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio100_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio100_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio100_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio100_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio101_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio101_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio101_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio101_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio102_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio102_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio102_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio102_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio103_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio103_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio103_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio103_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio104_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio104_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio104_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio104_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio105_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio105_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio105_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio105_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio106_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio106_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio106_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio106_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio10_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio11_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio12_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio13_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio14_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio15_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio16_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio17_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio18_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio19_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio1_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio20_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio21_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio22_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio23_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio24_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio25_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio26_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio27_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio28_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio29_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio2_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio30_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio31_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio32_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio33_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio34_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio35_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio36_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio37_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio38_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio39_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio3_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio40_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio41_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio42_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio43_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio44_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio45_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio46_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio47_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio48_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio49_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio4_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio50_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio51_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio52_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio53_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio54_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio55_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio56_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio57_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio58_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio59_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio5_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio60_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio61_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio62_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio63_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio64_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio64_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio64_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio64_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio65_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio65_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio65_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio65_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio66_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio66_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio66_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio66_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio67_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio67_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio67_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio67_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio68_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio68_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio68_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio68_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio69_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio69_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio69_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio69_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio6_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio70_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio70_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio70_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio70_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio71_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio71_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio71_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio71_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio72_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio72_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio72_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio72_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio73_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio73_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio73_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio73_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio74_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio74_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio74_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio74_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio75_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio75_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio75_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio75_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio76_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio76_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio76_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio76_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio77_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio77_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio77_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio77_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio78_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio78_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio78_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio78_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio79_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio79_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio79_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio79_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio7_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio80_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio80_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio80_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio80_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio81_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio81_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio81_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio81_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio82_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio82_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio82_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio82_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio83_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio83_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio83_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio83_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio84_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio84_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio84_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio84_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio85_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio85_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio85_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio85_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio86_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio86_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio86_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio86_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio87_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio87_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio87_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio87_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio88_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio88_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio88_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio88_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio89_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio89_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio89_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio89_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio8_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio90_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio90_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio90_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio90_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio91_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio91_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio91_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio91_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio92_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio92_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio92_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio92_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio93_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio93_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio93_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio93_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio94_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio94_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio94_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio94_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio95_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio95_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio95_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio95_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio96_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio96_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio96_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio96_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio97_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio97_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio97_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio97_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio98_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio98_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio98_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio98_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio99_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio99_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio99_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio99_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_mmio_in_inv" value="0x00000400"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_mmio_out_inv" value="0x00000200"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_mmio_sel" value="0x000000ff"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_pio_oe" value="0x00010000"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_pio_out" value="0x00020000"/>
+		<Definition name="MSK_NX4000_mmio9_cfg_status_in_ro" value="0x00040000"/>
+		<Definition name="MSK_NX4000_mmio_in_line_status0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_in_line_status1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_in_line_status2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_in_line_status3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_is_pio_status0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_is_pio_status1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_is_pio_status2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_is_pio_status3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_cfg3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_reset_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_reset_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_reset_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_reset_cfg3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_set_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_set_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_set_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_oe_line_set_cfg3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_cfg3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_reset_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_reset_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_reset_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_reset_cfg3_line" value="0x000007ff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_set_cfg0_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_set_cfg1_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_set_cfg2_line" value="0xffffffff"/>
+		<Definition name="MSK_NX4000_mmio_pio_out_line_set_cfg3_line" value="0x000007ff"/>
+		<Definition name="NAND_DEVICE_PARAMETERS_FLAG_AutodetectReadySignaling" value="1"/>
+		<Definition name="NAND_DEVICE_PARAMETERS_FLAG_HasReadStatusEnhanced" value="4"/>
+		<Definition name="NAND_DEVICE_PARAMETERS_FLAG_Use_ReadySignal0_Polling1" value="2"/>
+		<Definition name="REEMUX_0" value="0"/>
+		<Definition name="REEMUX_1" value="1"/>
+		<Definition name="REEMUX_2" value="2"/>
+		<Definition name="REEMUX_3" value="3"/>
+		<Definition name="REEMUX_DRV_04MA" value="0"/>
+		<Definition name="REEMUX_DRV_06MA" value="1"/>
+		<Definition name="REEMUX_DRV_08MA" value="2"/>
+		<Definition name="REEMUX_DRV_12MA" value="3"/>
+		<Definition name="REEMUX_UDC_NONE" value="0"/>
+		<Definition name="REEMUX_UDC_NONE2" value="2"/>
+		<Definition name="REEMUX_UDC_PULLDOWN50K" value="3"/>
+		<Definition name="REEMUX_UDC_PULLUP50K" value="1"/>
+		<Definition name="SMC_ADR" value="0xfc"/>
+		<Definition name="SMC_CHTR_FIFO" value="0xc9"/>
+		<Definition name="SMC_CHTR_No" value="0xc8"/>
+		<Definition name="SMC_CHTR_ROM" value="0xca"/>
+		<Definition name="SMC_CMP" value="0xe0"/>
+		<Definition name="SMC_CMP_FATAL" value="0xe8"/>
+		<Definition name="SMC_IDLE_NNN" value="0x80"/>
+		<Definition name="SMC_IDLE_SDD" value="0xb0"/>
+		<Definition name="SMC_IDLE_SDN" value="0xa0"/>
+		<Definition name="SMC_IDLE_SNN" value="0x90"/>
+		<Definition name="SMC_JUMP" value="0xc0"/>
+		<Definition name="SMC_JUMP_EQ" value="0xc1"/>
+		<Definition name="SMC_JUMP_NE" value="0xc2"/>
+		<Definition name="SMC_JUMP_NZ" value="0xc4"/>
+		<Definition name="SMC_JUMP_ZE" value="0xc3"/>
+		<Definition name="SMC_MASK" value="0xf0"/>
+		<Definition name="SMC_MODE" value="0xf8"/>
+		<Definition name="SMC_RECEIVE_NNN" value="0x00"/>
+		<Definition name="SMC_RECEIVE_SDD" value="0x30"/>
+		<Definition name="SMC_RECEIVE_SDN" value="0x20"/>
+		<Definition name="SMC_RECEIVE_SNN" value="0x10"/>
+		<Definition name="SMC_SEND_NNN" value="0x40"/>
+		<Definition name="SMC_SEND_SDD" value="0x70"/>
+		<Definition name="SMC_SEND_SDN" value="0x60"/>
+		<Definition name="SMC_SEND_SNN" value="0x50"/>
+		<Definition name="SPI_BUS_WIDTH_1BIT" value="0"/>
+		<Definition name="SPI_BUS_WIDTH_2BIT" value="1"/>
+		<Definition name="SPI_BUS_WIDTH_4BIT" value="2"/>
+		<Definition name="SPI_FLASH_FLAGS_4_bit_address" value="0x02"/>
+		<Definition name="SPI_FLASH_FLAGS_Atmel_address" value="0x04"/>
+		<Definition name="SPI_FLASH_FLAGS_Forbid_Autodetect" value="0x00000001"/>
+		<Definition name="SPI_FLASH_FLAGS_Forbid_Autodetection_of_Dummy_and_Idle" value="0x01"/>
+		<Definition name="SPI_MACRO_CHANGE_TRANSPORT_FIFO" value="1"/>
+		<Definition name="SPI_MACRO_CHANGE_TRANSPORT_No_Change" value="0"/>
+		<Definition name="SPI_MACRO_CHANGE_TRANSPORT_ROM" value="2"/>
+		<Definition name="SPI_MODE0" value="0"/>
+		<Definition name="SPI_MODE1" value="1"/>
+		<Definition name="SPI_MODE2" value="2"/>
+		<Definition name="SPI_MODE3" value="3"/>
+		<Definition name="SPI_UNIT_OFFSET_CURRENT" value="0"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI0_CS0" value="3"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI0_CS1" value="4"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI0_CS2" value="5"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI1_CS0" value="6"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI1_CS1" value="7"/>
+		<Definition name="SPI_UNIT_OFFSET_SPI1_CS2" value="8"/>
+		<Definition name="SPI_UNIT_OFFSET_SQI0_CS0" value="1"/>
+		<Definition name="SPI_UNIT_OFFSET_SQI1_CS0" value="2"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL0_DRAM_CLASS" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL0_START" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL0_VERSION" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL100_RDLVL_END_DELAY_4" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL100_RDLVL_MIDPOINT_DELAY_4" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL101_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DELAY_4" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL101_RDLVL_OFFSET_DIR" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL102_RDLVL_DELAY_4" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL102_RDLVL_GATE_DELAY_4" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL103_AXI0_ALL_STROBES_USED_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL103_AXI0_R_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL103_AXI0_W_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL103_AXI1_ALL_STROBES_USED_ENABLE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL104_AXI1_R_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL104_AXI1_W_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL104_AXI2_ALL_STROBES_USED_ENABLE" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL104_AXI2_R_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL105_AXI2_W_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL105_AXI3_ALL_STROBES_USED_ENABLE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL105_AXI3_R_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL105_AXI3_W_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL106_AXI4_ALL_STROBES_USED_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL106_AXI4_R_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL106_AXI4_W_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL106_WEIGHTED_ROUND_ROBIN_LATENCY_CONTROL" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY0_RELATIVE_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL107_AXI0_PRIORITY1_RELATIVE_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL107_WEIGHTED_ROUND_ROBIN_WEIGHT_SHARING" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL107_WRR_PARAM_VALUE_ERR" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL108_AXI0_PORT_ORDERING" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY2_RELATIVE_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL108_AXI0_PRIORITY3_RELATIVE_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL108_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL109_AXI0_PRIORITY_RELAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY0_RELATIVE_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL109_AXI1_PRIORITY1_RELATIVE_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL10_ADDITIVE_LAT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL10_TBST_INT_INTERVAL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL10_TCCD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL10_WRLAT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL110_AXI1_PORT_ORDERING" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY2_RELATIVE_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL110_AXI1_PRIORITY3_RELATIVE_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL110_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL111_AXI1_PRIORITY_RELAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY0_RELATIVE_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL111_AXI2_PRIORITY1_RELATIVE_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL112_AXI2_PORT_ORDERING" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY2_RELATIVE_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL112_AXI2_PRIORITY3_RELATIVE_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL112_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL113_AXI2_PRIORITY_RELAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY0_RELATIVE_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL113_AXI3_PRIORITY1_RELATIVE_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL114_AXI3_PORT_ORDERING" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY2_RELATIVE_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL114_AXI3_PRIORITY3_RELATIVE_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL114_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL115_AXI3_PRIORITY_RELAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY0_RELATIVE_PRIORITY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL115_AXI4_PRIORITY1_RELATIVE_PRIORITY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL116_AXI4_PORT_ORDERING" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY2_RELATIVE_PRIORITY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL116_AXI4_PRIORITY3_RELATIVE_PRIORITY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL116_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL117_AXI4_PRIORITY_RELAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL117_CKE_STATUS" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL117_MEM_RST_VALID" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL118_DLL_RST_ADJ_DLY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL118_DLL_RST_DELAY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL118_TDFI_PHY_WRLAT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL119_DRAM_CLK_DISABLE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL119_TDFI_PHY_RDLAT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL119_TDFI_RDDATA_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL119_UPDATE_ERROR_STATUS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL11_TRAS_MIN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL11_TRC" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL11_TRRD" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL11_TWTR" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL120_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MAX" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL120_TDFI_CTRLUPD_MIN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL121_TDFI_PHYUPD_TYPE1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE2" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL122_TDFI_PHYUPD_TYPE3" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL123_OBSOLETE1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL123_TDFI_PHYUPD_RESP" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL124_TDFI_CTRLUPD_INTERVAL" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL125_RDLAT_ADJ" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL125_TDFI_CTRL_DELAY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL125_TDFI_DRAM_CLK_DISABLE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL125_WRLAT_ADJ" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL126_TDFI_DRAM_CLK_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL126_TDFI_WRLVL_WW" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL127_TDFI_WRLVL_RESP" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL128_TDFI_WRLVL_MAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL129_DFI_WRLVL_MAX_DELAY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_DLL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL129_TDFI_WRLVL_RESPLAT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL12_TFAW" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL12_TMRD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL12_TRP" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL12_TRTP" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_DLL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL130_TDFI_RDLVL_LOAD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL130_TDFI_WRLVL_LOAD" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL131_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL131_RDLVL_MAX_DELAY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL131_TDFI_RDLVL_RESPLAT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL132_RDLVL_GATE_MAX_DELAY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL132_TDFI_RDLVL_RR" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL133_TDFI_RDLVL_RESP" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL134_RDLVL_RESP_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL135_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL135_RDLVL_RESP_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL136_RDLVL_GATE_RESP_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL137_RDLVL_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_PREAMBLE_CHECK_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL137_RDLVL_GATE_RESP_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL138_TDFI_RDLVL_MAX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL139_OBSOLETE2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL139_RDLVL_DQ_0_COUNT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL139_RDLVL_GATE_DQ_0_COUNT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL13_TMOD" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL13_TRAS_MAX" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL140_OBSOLETE1" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL140_RDLVL_ERROR_STATUS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL141_RDLVL_GATE_INTERVAL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL141_RDLVL_INTERVAL" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL142_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL142_TDFI_PHY_WRDATA" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL143_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL144_READ_DATA_FIFO_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL144_READ_DATA_FIFO_PTR_WIDTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL144_WRITE_DATA_FIFO_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL144_WRITE_DATA_FIFO_PTR_WIDTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL145_ASYNC_CDC_STAGES" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL145_AXI0_CMDFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL145_MEMCD_RMODW_FIFO_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL145_MEMCD_RMODW_FIFO_PTR_WIDTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL146_AXI0_RDFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL146_AXI0_WRCMD_PROC_FIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL146_AXI0_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL146_AXI1_CMDFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL147_AXI1_RDFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL147_AXI1_WRCMD_PROC_FIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL147_AXI1_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL147_AXI2_CMDFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL148_AXI2_RDFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL148_AXI2_WRCMD_PROC_FIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL148_AXI2_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL148_AXI3_CMDFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL149_AXI3_RDFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL149_AXI3_WRCMD_PROC_FIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL149_AXI3_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL149_AXI4_CMDFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL14_TCKE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL14_TCKESR" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL14_TRCD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL14_WRITEINTERP" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL150_AXI4_RDFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL150_AXI4_WRCMD_PROC_FIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL150_AXI4_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL150_RESERVED3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL151_AXI1_TRANS_WRFIFO_LOG2_DEPTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL151_AXI2_TRANS_WRFIFO_LOG2_DEPTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL151_AXI3_TRANS_WRFIFO_LOG2_DEPTH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL151_AXI4_TRANS_WRFIFO_LOG2_DEPTH" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL152_ECC_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_IN_PROGRESS" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL152_ECC_SCRUB_START" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL152_ECC_WRITEBACK_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_INTERVAL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_LEN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL153_ECC_SCRUB_MODE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL154_ECC_SCRUB_IDLE_CNT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL154_OBSOLETE1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL155_ECC_SCRUB_START_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL156_ECC_SCRUB_END_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL157_BANK_ADDR_INTLV_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL157_BANK_START_BIT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL157_LONG_COUNT_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL157_RESERVED3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL158_INT_STATUS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL159_INT_ACK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL15_AP" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL15_CONCURRENTAP" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL15_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL15_TWR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL160_INT_MASK" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL161_AXI0_FIXED_PORT_PRIORITY_ENABLE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL161_AXI1_FIXED_PORT_PRIORITY_ENABLE" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL161_AXI2_FIXED_PORT_PRIORITY_ENABLE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL161_WR_TO_ODTH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL162_AXI3_FIXED_PORT_PRIORITY_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL162_AXI4_FIXED_PORT_PRIORITY_ENABLE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL16_BSTLEN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL16_TDAL" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL16_TRAS_LOCKOUT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL16_TRP_AB" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL17_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL17_OPTIMAL_RMODW_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL17_REG_DIMM_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL17_RESERVED3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL18_AREFRESH" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL18_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL18_RESERVED1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL18_TREF_ENABLE" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL19_TREF" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL19_TRFC" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL1_MAX_COL_REG" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL1_MAX_CS_REG" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL1_MAX_ROW_REG" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL1_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL20_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL21_TPDEX" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL21_TXPDLL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL22_TXARD" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL22_TXARDS" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL23_TXSNR" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL23_TXSR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL24_CKE_DELAY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL24_ENABLE_QUICK_SREFRESH" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL24_PWRUP_SREFRESH_EXIT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL24_SREFRESH_EXIT_NO_REFRESH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL25_CKSRE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL25_CKSRX" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL25_LOWPOWER_REFRESH_ENABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL25_LP_CMD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL26_LP_ARB_STATE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL26_LP_AUTO_ENTRY_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL26_LP_AUTO_EXIT_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL26_LP_STATE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL27_LP_AUTO_MEM_GATE_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL27_LP_AUTO_PD_IDLE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL27_LP_AUTO_SR_IDLE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL28_LP_AUTO_SR_MC_GATE_IDLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL28_OBSOLETE2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL28_RESERVED1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL29_WRITE_MODEREG" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL2_OBSOLETE1" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL2_TINIT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL30_MRW_STATUS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL30_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL31_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL32_MR0_DATA_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL32_MR1_DATA_0" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL33_MR2_DATA_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL33_MRSINGLE_DATA_0" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL34_MR3_DATA_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL34_OBSOLETE1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL35_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL36_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL37_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL38_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL39_FWC" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL39_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL3_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL40_XOR_CHECK_BITS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL41_ECC_DISABLE_W_UC_ERR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL41_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL42_ECC_U_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL43_ECC_U_SYND" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL43_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL43_OBSOLETE2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL44_ECC_U_DATA" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL45_ECC_C_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL46_ECC_C_SYND" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL46_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL46_OBSOLETE2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL47_ECC_C_DATA" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL48_ECC_C_ID" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL48_ECC_U_ID" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL49_ZQCL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL49_ZQINIT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL4_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL50_ZQCS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL50_ZQ_ON_SREF_EXIT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL50_ZQ_REQ" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL51_ZQ_INTERVAL" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL52_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL52_ZQ_IN_PROGRESS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL53_BANK_DIFF" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL53_COL_DIFF" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL53_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL53_ROW_DIFF" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL54_ADDR_CMP_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL54_AGE_COUNT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL54_APREBIT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL54_COMMAND_AGE_COUNT" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL55_BANK_SPLIT_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL55_PLACEMENT_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL55_PRIORITY_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL55_RW_SAME_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL56_DISABLE_RW_GROUP_W_BNK_CONFLICT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL56_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL56_RW_SAME_PAGE_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL57_DISABLE_RD_INTERLEAVE" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL57_INHIBIT_DRAM_CMD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL57_NUM_Q_ENTRIES_ACT_DISABLE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL57_SWAP_EN" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL58_BURST_ON_FLY_BIT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL58_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL58_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL58_REDUC" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL59_CONTROLLER_BUSY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL59_CTRLUPD_REQ" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL59_IN_ORDER_ACCEPT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL59_Q_FULLNESS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL5_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL60_CTRLUPD_REQ_PER_AREF_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL60_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL61_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL62_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL63_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL64_OUT_OF_RANGE_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL65_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL65_OBSOLETE3" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL65_OUT_OF_RANGE_LENGTH" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL65_OUT_OF_RANGE_TYPE" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL66_OBSOLETE1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL66_OUT_OF_RANGE_SOURCE_ID" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL67_PORT_CMD_ERROR_ADDR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL68_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL68_PORT_CMD_ERROR_ID" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL68_PORT_CMD_ERROR_TYPE" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL69_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL6_TRST_PWRON" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL70_OBSOLETE2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL70_ODT_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL70_TODTH_WR" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL70_TODTL_2CMD" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL71_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL72_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL73_R2R_SAMECS_DLY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL73_R2W_SAMECS_DLY" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL73_W2R_SAMECS_DLY" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL73_W2W_SAMECS_DLY" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL74_OBSOLETE0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PDN_CS_0" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL74_OCD_ADJUST_PUP_CS_0" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL75_SWLVL_EXIT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL75_SWLVL_LOAD" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL75_SWLVL_START" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL75_SW_LEVELING_MODE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL76_LVL_STATUS" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL76_OBSOLETE1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL76_SWLVL_OP_DONE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL76_SWLVL_RESP_0" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_1" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_2" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_3" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL77_SWLVL_RESP_4" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL78_WLDQSEN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL78_WLMRD" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL78_WRLVL_CS" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL78_WRLVL_REQ" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL79_RESERVED2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL79_WRLVL_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL79_WRLVL_INTERVAL" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL7_CKE_INACTIVE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL80_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL80_WRLVL_ERROR_STATUS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL80_WRLVL_REG_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL81_WRLVL_DELAY_1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_2" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL82_WRLVL_DELAY_3" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL83_RDLVL_GATE_REQ" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL83_RDLVL_REQ" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL83_WRLVL_DELAY_4" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL84_RDLVL_BEGIN_DELAY_EN" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL84_RDLVL_CS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL84_RDLVL_EDGE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL84_RDLVL_REG_EN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL85_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL85_RDLVL_BEGIN_DELAY_0" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL85_RDLVL_GATE_REG_EN" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL86_RDLVL_END_DELAY_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL86_RDLVL_MIDPOINT_DELAY_0" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL87_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DELAY_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL87_RDLVL_OFFSET_DIR" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL88_RDLVL_DELAY_0" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL88_RDLVL_GATE_DELAY_0" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL89_RDLVL_BEGIN_DELAY_1" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL89_RDLVL_END_DELAY_1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL8_INITAREF" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL8_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL8_TCPD" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL90_RDLVL_MIDPOINT_DELAY_1" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL90_RDLVL_OFFSET_DELAY_1" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL91_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL91_RDLVL_DELAY_1" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL91_RDLVL_OFFSET_DIR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL92_RDLVL_BEGIN_DELAY_2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL92_RDLVL_GATE_DELAY_1" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL93_RDLVL_END_DELAY_2" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL93_RDLVL_MIDPOINT_DELAY_2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL94_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DELAY_2" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL94_RDLVL_OFFSET_DIR" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL95_RDLVL_DELAY_2" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL95_RDLVL_GATE_DELAY_2" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL96_RDLVL_BEGIN_DELAY_3" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL96_RDLVL_END_DELAY_3" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL97_RDLVL_MIDPOINT_DELAY_3" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL97_RDLVL_OFFSET_DELAY_3" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL98_OBSOLETE2" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL98_RDLVL_DELAY_3" value="8"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL98_RDLVL_OFFSET_DIR" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL99_RDLVL_BEGIN_DELAY_4" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL99_RDLVL_GATE_DELAY_3" value="0"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL9_CASLAT_LIN" value="24"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL9_NO_CMD_INIT" value="16"/>
+		<Definition name="SRT_NX4000_DDR_CTRL_CTL9_TDLL" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_DACNTUPD" value="20"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_DDMODE" value="3"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_HSLMODE" value="5"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MDACNT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MDACNTM" value="22"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MDLLOCK" value="25"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MDLLSTBY" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MFSL" value="1"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MSATFG" value="24"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_MSATMODE" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_Reserved4" value="26"/>
+		<Definition name="SRT_NX4000_DDR_PHY_DLLCTRL_SDLYCTRL" value="21"/>
+		<Definition name="SRT_NX4000_DDR_PHY_FIFOINIT_RDPTINITEXE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_FIFOINIT_WRPTINITEXE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_FUNCCTRL_FUNCRSTB" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_FUNCCTRL_IFSEL" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_MASKSDLY1_MASKSDL0OFS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_MASKSDLY1_MASKSDL1OFS" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_MASKSDLY1_MASKSDL2OFS" value="16"/>
+		<Definition name="SRT_NX4000_DDR_PHY_MASKSDLY1_MASKSDL3OFS" value="24"/>
+		<Definition name="SRT_NX4000_DDR_PHY_MASKSDLY2_MASKSDL4OFS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_ADCMDOE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_CKEODTOE" value="1"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_CKOBUFEN" value="26"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_DISOUT" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_MBL" value="24"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_MRL" value="16"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_MWL" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_OUTCTRL_RESETBOE" value="2"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PDQODTOFT" value="16"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PDQODTONT" value="20"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYBENOFT" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYBENONT" value="12"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYIENOFT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYIENONT" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYODTOFT" value="24"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDCTRL_PHYODTONT" value="28"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDTMG_MASKSFT" value="9"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDTMG_RDENVALID" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDTMG_RDMODE" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_RDTMG_WDOMODE" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WL1OFS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WL2OFS" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WLAUTO" value="30"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WLEN" value="31"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WLSTATE" value="25"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL1_WLSTR" value="24"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL2_WL3OFS" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL2_WL4OFS" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_WLCTRL2_WL5OFS" value="16"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALEND" value="30"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALFREQ" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALGAP" value="29"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALINIT" value="14"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALITVL" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALMODE" value="2"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNC" value="19"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALNF" value="15"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPC" value="26"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALPF" value="22"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRSTB" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALRUN" value="31"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALSTRV" value="1"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCALCTRL_ZQCALUPD" value="10"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ACODTN" value="13"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ACODTSL" value="6"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_CKODTEN" value="12"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_EODTDQ" value="1"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU1" value="11"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU2" value="10"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU3" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU4" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU5" value="3"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_RFU6" value="2"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQCALENCNT" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQCALFL" value="14"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQCAL_ERRER" value="17"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQENC" value="22"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQENF" value="18"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQEPC" value="29"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQEPF" value="25"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQCODE_ZQUPD" value="16"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_CAPHASE" value="30"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_DNVEN" value="3"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_DRAMIF" value="0"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_FIFORPINIT" value="27"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_PHYODT" value="5"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_PHYODTEN" value="4"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_SRCK" value="10"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_SRCMDAD" value="8"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_SRDQ" value="12"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_WRFIFOEN" value="29"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCK" value="19"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQCMDAD" value="15"/>
+		<Definition name="SRT_NX4000_DDR_PHY_ZQODTCTRL_ZQDATA" value="23"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P0_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_0_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_1_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_9_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P10_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P11_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_14_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P12_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P13_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P14_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_0_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_10_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_11_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_12_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_13_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_1_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_2_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_3_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_4_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_5_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_6_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_7_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_8_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_9_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P15_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_0_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_10_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_11_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_1_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_2_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_3_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_4_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_5_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_6_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_7_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_8_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_9_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P16_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P17_0_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P17_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P17_2_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P17_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P18_0_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P18_2_CTL" value="8"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P1_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P2_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_14_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P3_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_14_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P4_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_14_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P5_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_10_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_11_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_12_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_13_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_14_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_9_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P6_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_0_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_10_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_11_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_12_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_13_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_14_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_1_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_2_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_3_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_4_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_5_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_6_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_7_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_8_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_9_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P7_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_0_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_10_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_11_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_12_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_13_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_14_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_15_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_1_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_2_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_3_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_4_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_5_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_6_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_7_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_8_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_9_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P8_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_0_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_0_SEL" value="12"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_0_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_10_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_10_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_10_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_11_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_11_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_11_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_12_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_12_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_12_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_13_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_13_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_13_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_14_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_14_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_14_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_15_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_15_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_15_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_1_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_1_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_1_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_2_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_2_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_2_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_3_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_3_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_3_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_4_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_4_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_4_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_5_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_5_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_5_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_6_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_6_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_6_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_7_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_7_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_7_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_8_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_8_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_8_UDC" value="0"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_9_DRV" value="4"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_9_SEL" value="13"/>
+		<Definition name="SRT_NX4000_PORTCONTROL_P9_9_UDC" value="0"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio0_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio100_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio100_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio100_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio100_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio101_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio101_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio101_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio101_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio102_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio102_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio102_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio102_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio103_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio103_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio103_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio103_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio104_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio104_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio104_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio104_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio105_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio105_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio105_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio105_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio106_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio106_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio106_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio106_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio10_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio11_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio12_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio13_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio14_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio15_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio16_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio17_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio18_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio19_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio1_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio20_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio21_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio22_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio23_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio24_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio25_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio26_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio27_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio28_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio29_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio2_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio30_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio31_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio32_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio33_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio34_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio35_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio36_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio37_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio38_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio39_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio3_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio40_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio41_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio42_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio43_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio44_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio45_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio46_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio47_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio48_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio49_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio4_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio50_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio51_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio52_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio53_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio54_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio55_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio56_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio57_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio58_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio59_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio5_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio60_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio61_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio62_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio63_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio64_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio64_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio64_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio64_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio65_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio65_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio65_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio65_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio66_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio66_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio66_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio66_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio67_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio67_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio67_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio67_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio68_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio68_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio68_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio68_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio69_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio69_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio69_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio69_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio6_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio70_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio70_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio70_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio70_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio71_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio71_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio71_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio71_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio72_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio72_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio72_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio72_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio73_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio73_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio73_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio73_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio74_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio74_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio74_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio74_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio75_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio75_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio75_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio75_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio76_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio76_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio76_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio76_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio77_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio77_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio77_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio77_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio78_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio78_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio78_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio78_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio79_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio79_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio79_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio79_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio7_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio80_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio80_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio80_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio80_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio81_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio81_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio81_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio81_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio82_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio82_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio82_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio82_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio83_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio83_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio83_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio83_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio84_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio84_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio84_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio84_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio85_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio85_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio85_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio85_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio86_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio86_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio86_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio86_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio87_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio87_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio87_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio87_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio88_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio88_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio88_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio88_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio89_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio89_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio89_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio89_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio8_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio90_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio90_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio90_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio90_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio91_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio91_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio91_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio91_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio92_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio92_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio92_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio92_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio93_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio93_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio93_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio93_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio94_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio94_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio94_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio94_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio95_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio95_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio95_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio95_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio96_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio96_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio96_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio96_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio97_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio97_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio97_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio97_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio98_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio98_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio98_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio98_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio99_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio99_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio99_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio99_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_mmio_in_inv" value="10"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_mmio_out_inv" value="9"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_mmio_sel" value="0"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_pio_oe" value="16"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_pio_out" value="17"/>
+		<Definition name="SRT_NX4000_mmio9_cfg_status_in_ro" value="18"/>
+		<Definition name="SRT_NX4000_mmio_in_line_status0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_in_line_status1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_in_line_status2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_in_line_status3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_is_pio_status0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_is_pio_status1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_is_pio_status2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_is_pio_status3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_cfg3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_reset_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_reset_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_reset_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_reset_cfg3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_set_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_set_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_set_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_oe_line_set_cfg3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_cfg3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_reset_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_reset_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_reset_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_reset_cfg3_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_set_cfg0_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_set_cfg1_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_set_cfg2_line" value="0"/>
+		<Definition name="SRT_NX4000_mmio_pio_out_line_set_cfg3_line" value="0"/>
+		<Definition name="UART_MODE_2STOPBITS" value="0x08"/>
+		<Definition name="UART_MODE_BYTESIZE_5BIT" value="0"/>
+		<Definition name="UART_MODE_BYTESIZE_6BIT" value="32"/>
+		<Definition name="UART_MODE_BYTESIZE_7BIT" value="64"/>
+		<Definition name="UART_MODE_BYTESIZE_8BIT" value="96"/>
+		<Definition name="UART_MODE_ENABLE_RTSCTS" value="0x01"/>
+		<Definition name="UART_MODE_EVEN_PARITY" value="0x04"/>
+		<Definition name="UART_MODE_PARITY_ENABLE" value="0x02"/>
+		<Definition name="WFE_Loop" value="68212140"/>
+		<Definition name="WFI_Loop" value="68212132"/>
+		<Definition name="apply_port_control" value="0x04116cf1"/>
+	</Definitions>
+</PatchDefinitions>
diff --git a/tools/netx4000/netx4000_cr7_openfirewalls.elf b/tools/netx4000/netx4000_cr7_openfirewalls.elf
new file mode 100644
index 0000000000000000000000000000000000000000..c71edcb9ea07ad9fe53ceda58a49b4f9542422c7
GIT binary patch
literal 34631
zcmeIyPiP!f90%~<+nFTWV$G&{Yn2ru^k632x>67iS(^F>qGHzKWnntA`<krT?1Y&~
zs}RXr|KOpBiYF1O2X7vF5b@B$f*w5N;K4($A`1#0DtPk{f4`acc9$>|y?FXQczM6y
z@BQZAXEw8caqU^96xmUtGh{Ni&c)O35S2<aQ>Q99ymx|*+kK*elg&@%-~rLBS+nCg
z=i$n9rNFIoQW;Qw{E*|Ja<j=HtxS%W6axYffB*y_009U<00Izz00bZa0SG_<0uX=z
z1Rwwb2tWV=5P$##AOHafKmY;|fB*y_009U<00Izz00bZa0SG_<0uX=z1Rwwb2tWV=
z5P$##AOHafKmY;|fB*y_009U<00Izz00bZa0SG_<0uX=z1Rwwb2tWV=5P$##AOHaf
zKmY;|fB*y_009U<00Izz00bZa0SG_<0uX=z1Rwwb2tWV=5P$##An<<*%&#o{eo(zR
zI-r}Q!^#)GQtguw)vk}IG8o-1sC`{f`@EobqoB4|Q0o=cS_QSWg4#0$wfU7hzdd@m
z{L7vy|8<M!H$1=Nd7I~u=MOx8<axmJC!Rm^Y@BBCKnG!$)JYC!&M&Rg?D4tvvN~2W
zFGE`L*fkY$U1dX}8<Txom3=o3wo{#?tt4)@`Z|51UaQrX+wpln+R=UAR{Sg7SYHcz
zy~JzMg{NDW5*;V4px=pgkR+{ZQM{Gx1Z~}l;tg+mcXMlZ)05LCOXmFa+)J0Ljb`<n
zcdqW$NDb5iRc05|N#&GJl^-uZG{g7zWp<A*$Y1sMgC|Jw;Do0tx=o_{-)HumGlJqe
z^QwM!na6+p<9xgCoqfuVQi*SgyyVU8GzfW3<9yw;Q9J5r@^%8gTb=4yT7vc#FFNi9
zJ^!k1r%{}c*I0ki3(_?1hP$jpUPp(!8$KV_-<YJ`{*`FF6^60CYO`LqulcF|^*F_y
zf-##P;nILfG96pU*T;A%^K>LF@$cttUZ?tO_ym{7eM9BakP9n3&9Hq>a&G(X9XfPx
zpQvJ+c(r{OIOc2a*e$v4BQ}}pYfi<oeTMt05||;^k`eN>=a&3=?)yjrGwfcUa~sRn
zUG96>^vGiO_NHQ~|G|A<NnnQUTi`siGxd+J6MbNtc(r}9%Foh{#rKFVbMXN#%=480
zU~xLebNYPmzEAW$*X*$8v-y!V`w%$xs{B4>-?3Mg_m<`P73BToc~;KiJeU8>$#Cqi
z$dnwKn{0CAWN&;@a`-8x@6)9}4`0c*&4m=b%K6>=u{p|fvB-z{)tXF>e@$ZZJQWTi
z$({W9B!5eCbG{0n??cI^_CGt4-;#W)|IU$|?AIp^;tic9;}2!_ksN;-$K}@jzDrT~
zIxPmY*rD-v!spLKocckBKc`7Tz8@xusrj6(z1&#!8>_497n@CA3bL*H9gZibkldc2
L7X_0fJ2(9UytZpb

literal 0
HcmV?d00001

-- 
2.17.1

